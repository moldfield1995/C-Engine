//---------------------------------------------------------------------------------
// File Name: zcta009.cpp
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#include "Geometry.h"
#ifndef TA_VECTOR_H
#include "Vector.h"
#endif //
na\
m\
espa\
c\
e
TA\

{
bo\
o\
l
TAC_CA\
L\
L
Geome\
try\

::
Li\
neI\
ntersect\
sB\
o\
x
(
co\
nst
Vec2
&
lllOllO\
lOO\

,
const
Vec2
&
lllOl\
l\
OlO\
l
,
co\
ns\
t
Ve\
c\
2
&
lllOll\
Ol\
lO
,
cons\
t
Vec2\

&
lllOllO\
lll
)
{
if\

(
lllOl\
lOlOO
.
x
>
lllOll\
O\
llO
.
x
+
ll\
lOllOlll
.
x
&&
ll\
lOllO\
lOl\

.
x
>
lllOl\
lOllO
.
x
+
lllOllOl\
ll
.
x
)
re\
turn\

fa\
ls\
e
;
if
(
lllOllOlOO
.
x
<
ll\
lOl\
lOllO
.
x
-
lllO\
llO\
l\
ll
.
x
&&
ll\
l\
Ol\
lO\
lO\
l
.
x
<
lllOll\
Oll\
O
.
x
-
lll\
O\
llO\
lll
.
x
)
return
fal\
se
;
if\

(
lllOll\
OlOO
.
y
>
lllOllO\
ll\
O
.
y
+
lll\
O\
l\
lO\
lll
.
y
&&
ll\
lOllOlO\
l
.
y
>
lllOl\
lOl\
lO\

.
y
+
lllOllOll\
l
.
y
)
retur\
n
false\

;
if
(
lllO\
llO\
l\
O\
O
.
y
<
lllOllOl\
lO
.
y
-
lll\
OllOl\
ll
.
y
&&
ll\
lO\
llOlOl\

.
y
<
lllOll\
OllO
.
y
-
lllOllOlll\

.
y
)
ret\
u\
rn
false
;
Vec\
2\

ll\
lOll\
lOOO
=
(
lllO\
l\
lOlOl\

-
lllOll\
O\
l\
OO
)
;
float\

lOl\
lllOlOl
=
ll\
l\
Ol\
ll\
OOO
.
GetM\
agnitu\
d\
e
(
)
;
if
(
lOl\
l\
llOlOl
<
k_fMinFloat
)
ret\
urn
fa\
lse
;
lllO\
lll\
OOO
/=
lOllll\
O\
lOl
;
ll\
l\
Ol\
llOOO
.
Initiali\
s\
e\

(
lllOl\
l\
l\
O\
OO
.
y
,
-
ll\
lOlll\
OOO
.
x
)
;
Vec2\

lllOll\
l\
OOl
=
lllOl\
lOlll
;
if
(
lllO\
ll\
l\
OOl
.
x
*
lll\
Olll\
OO\
O
.
x
<
0.0f
)
lllOl\
llO\
Ol
.
x
=
-
lll\
O\
lll\
O\
Ol
.
x
;
if\

(
ll\
lOl\
llOOl
.
y
*
lllOlllOOO\

.
y
<
0.0f
)
lll\
Ol\
llOOl\

.
y
=
-
lllOlllO\
Ol
.
y
;
if
(
ll\
lOl\
l\
lOOO
.
Dot
(
lll\
OllOll\
O\

+
lll\
OlllOO\
l
-
lllOllOlOO
)
<
0.0f
)
retur\
n
false
;
if
(
lll\
Olll\
O\
O\
O\

.
Do\
t
(
lllOll\
O\
l\
l\
O
-
lll\
Olll\
OO\
l
-
lllOll\
OlOO
)
>
0.0f
)
re\
t\
ur\
n
false\

;
re\
t\
ur\
n
true
;
}
flo\
a\
t\

TA\
C_\
CALL\

Geometry\

::
CubicInter\
pola\
te
(
flo\
a\
t
lllOlllO\
lO
,
fl\
oat
lllOlllOll
,
fl\
oat\

lllOllllOO
,
float\

lllO\
llllOl
,
flo\
at
lll\
Olll\
ll\
O
)
{
floa\
t
ll\
lOl\
lll\
ll
=
ll\
l\
Oll\
lO\
lO
;
flo\
at
llllO\
O\
OOOO
=
ll\
lOllllOO\

;
flo\
a\
t
llllOOOOO\
l
=
lllOllllOO
+
lllOl\
lllOl
+
2.0f
*
(
lllOlllOlO
-
lllOlllOll
)
;
float
lll\
lOOOOlO
=
lllOlll\
Ol\
l
-
lllOll\
lOl\
O
-
lll\
Ol\
lllOO\

-
ll\
l\
lOOOO\
Ol
;
fl\
oa\
t
lOO\
OOOlll\
O
=
lll\
Ollllll
+
lll\
lOOO\
OOO
*
lllOl\
llllO\

+
lll\
lOOO\
O\
lO\

*
(
ll\
l\
O\
l\
llllO
*
lll\
Olll\
llO
)
+
lll\
lOO\
OOOl\

*
(
lllO\
lllllO
*
ll\
lOllll\
lO\

*
lllO\
lllllO\

)
;
retu\
rn
lOOOO\
O\
l\
llO
;
}
Vec3
TA\
C_CAL\
L
Geometry
::
CubicI\
nterp\
olat\
e
(
const
Vec3\

&
llll\
OOO\
O\
ll
,
con\
st
Vec3
&
llllO\
O\
OlOO
,
con\
st\

Vec3\

&
ll\
ll\
OOOlOl
,
const
Vec3
&
llll\
O\
OOl\
lO
,
fl\
oat
lllOl\
lll\
lO\

)
{
Vec\
3
llllOOOlll
=
lll\
lOOO\
Oll
;
Vec3
llllOOl\
OO\
O\

=
ll\
llOO\
OlOl
;
Vec3
llll\
llll\
l\

=
llll\
O\
OOlOl\

+
lll\
l\
OOOllO
+
2.0f
*
(
ll\
l\
lO\
OOO\
ll
-
ll\
l\
lO\
OO\
lOO
)
;
Vec3
lOOOOOO\
OO\
O
=
ll\
ll\
OOOlO\
O
-
ll\
l\
lOOOOl\
l\

-
llllOOOlOl
-
lllllll\
ll\

;
Ve\
c3\

ll\
llOOl\
OOl\

=
lll\
lO\
OOlll
+
ll\
llOO\
lO\
OO
*
lll\
O\
lll\
l\
lO
+
lOOOOOOOOO
*
(
lllOll\
lllO
*
lllOlllllO
)
+
lllllll\
ll\

*
(
ll\
l\
Oll\
ll\
lO
*
lll\
Ollll\
lO\

*
lllOlllll\
O
)
;
re\
tu\
rn\

llllOOlOOl\

;
}
fl\
o\
at
TAC_CALL
Geo\
me\
try
::
Cu\
bic\
In\
t\
er\
pol\
ateG\
rad\
ient
(
flo\
at
lllOlllOl\
O
,
float
ll\
lOl\
llOll
,
float
lllOllllO\
O
,
flo\
at
lllOl\
lll\
O\
l\

,
float\

lll\
Olll\
llO
)
{
flo\
at
ll\
llO\
O\
OOOO
=
lllOllllOO\

;
floa\
t\

llll\
OO\
OOO\
l
=
lllOllll\
Ol\

-
2.0f
*
lll\
OlllOll
+
lll\
OllllOO
+
2.0f
*
ll\
lOlllOlO\

;
float\

lll\
lOOOOlO
=
(
lllO\
llllOl\

-
3.0f
*
llllO\
OOOOl
-
lllOllllO\
O\

)
*
0.5f
;
float\

lOO\
OOOll\
lO\

=
llllOOOOOO\

+
2.0f
*
lll\
l\
OOOOlO
*
lllO\
ll\
lllO
+
3.0f
*
llll\
O\
OOOO\
l
*
(
lllOlllll\
O
*
ll\
lOl\
llllO
)
;
ret\
u\
rn
lOOOOO\
lllO
;
}
stati\
c\

in\
line
Vec\
2
TAC_C\
AL\
L
llllOO\
lOlO
(
con\
s\
t
Vec3
&
lll\
lll\
lll
,
con\
st
Vec3\

&
lOOOOO\
OOOO
,
int
llllO\
Ol\
Oll
[
3
]
)
{
re\
tur\
n
Vec2
(
llll\
lllll
[
ll\
l\
lOOlO\
l\
l
[
0
]
]
*
lOO\
OOO\
OOOO
[
ll\
l\
l\
OO\
lOll
[
1
]
]
-
llll\
l\
llll
[
llll\
OOlOll
[
1
]
]
*
lOOOO\
OOOOO
[
ll\
llOOlO\
ll
[
0
]
]
,
ll\
l\
llllll\

[
llllOOlOll
[
0
]
]
*
lOOO\
OO\
OOOO
[
lll\
l\
OOl\
Oll
[
2
]
]
-
ll\
lllllll
[
ll\
ll\
O\
OlOl\
l
[
2
]
]
*
lOOOOO\
OOOO
[
lll\
lO\
O\
lO\
ll
[
0
]
]
)
;
}
static\

in\
line
fl\
o\
a\
t\

TAC_CALL
llll\
OOl\
lO\
O
(
co\
ns\
t
Vec2
&
lll\
O\
llOl\
OO\

,
const
Ve\
c2
&
lllOll\
O\
lOl
)
{
retur\
n
lll\
OllOl\
OO\

.
x
*
lllOll\
Ol\
Ol
.
y
-
lllOll\
OlOO
.
y
*
lllOll\
O\
lOl
.
x
;
}
boo\
l\

TAC_CA\
LL
Ge\
om\
etry\

::
Tes\
t\
E\
dgeMove\
mentAgain\
stEd\
ge
(
const
Vec\
3
&
llllOO\
llO\
l
,
const\

Vec3\

&
ll\
llOOlll\
O
,
const
Vec3
&
llll\
OOll\
ll
,
const\

Vec\
3\

&
llllOl\
OOOO\

,
co\
ns\
t
Vec3
&
ll\
ll\
O\
lO\
OO\
l\

,
co\
nst
Vec3
&
llllO\
lOOlO
,
fl\
oa\
t
&
ll\
l\
l\
Ol\
O\
Oll
,
Vec3
&
lOlll\
lO\
Oll
,
Vec\
3
&
lO\
lll\
l\
O\
lO\
O
)
{
const
float
lOllOlO\
lll
=
0.00001f
;
const\

Vec3
llllOOOlll
=
ll\
llO\
lO\
OOl\

-
ll\
ll\
OOll\
O\
l
;
const\

Vec\
3
llllO\
lO\
lOO
=
ll\
l\
lOlOOOl\

-
llll\
Ol\
O\
OlO
;
const
Vec3
llllOl\
O\
lOl\

=
llllOO\
llll
-
lll\
lOO\
ll\
Ol
;
co\
n\
st
Vec3
lll\
lO\
l\
Ol\
lO
=
ll\
l\
lOOll\
l\
O
-
ll\
llOOllOl
;
const\

Vec3\

lll\
lO\
lOlll
=
ll\
llOOllOl
-
lll\
lOOlllO
+
llllOlOOOO
-
llllOO\
llll
;
int
llll\
OOlOl\
l
[
3
]
;
ll\
llOl\
Ol\
O\
O
.
GetAxisO\
rde\
r
(
ll\
ll\
OOlO\
l\
l
)
;
const\

Vec2
llllOllOOO
=
llllOO\
lOlO
(
ll\
l\
lOOOll\
l
,
llllOl\
Ol\
OO\

,
llllOOlOl\
l\

)
;
cons\
t\

Vec2
llllOllOO\
l
=
llllOOlO\
lO
(
ll\
llO\
l\
OlOl\

,
llllOlOl\
O\
O
,
llll\
O\
Ol\
O\
ll
)
;
co\
nst
Vec2
lll\
lOl\
lOl\
O
=
lll\
l\
OO\
lOlO
(
llllOlOl\
lO
,
llllOlOlOO
,
ll\
ll\
OOl\
Oll
)
;
const
Vec2
llllOll\
Oll
=
lll\
lOO\
lOlO
(
llll\
OlO\
lll\

,
ll\
l\
lOlO\
l\
OO
,
llllO\
O\
lOll
)
;
fl\
oat\

ll\
llOOOO\
O\
l\

=
ll\
l\
lOOllOO
(
ll\
llOllOl\
l
,
lll\
lOl\
l\
Ol\
O
)
;
flo\
a\
t
llllO\
OOOlO
=
lll\
lOO\
l\
lOO\

(
lll\
lO\
l\
lOOO
,
llllO\
llOll\

)
-
ll\
l\
l\
OOllOO
(
llllO\
llOlO\

,
llll\
Ol\
lOOl
)
;
floa\
t
llllO\
OOOOO\

=
llllO\
O\
l\
l\
OO
(
lll\
lO\
llO\
OO
,
llll\
OllOOl
)
;
float
ll\
ll\
OlllO\
O
=
0.0f
;
if
(
Fab\
s
(
llllO\
OO\
O\
Ol
)
<
lO\
llOlOlll
)
{
if
(
Fabs
(
ll\
llOO\
O\
OlO
)
<
lO\
ll\
O\
lOlll\

*
100.0f
)
re\
tu\
r\
n
false
;
llllOlllOO
=
-
llllOOOOOO\

/
llllOOOOlO\

;
}
els\
e
{
float
lll\
O\
Ol\
l\
O\
O\
l
=
llll\
OO\
O\
OlO\

*
llllOOOOlO
-
4.0f
*
llllOOO\
O\
O\
l
*
lll\
lO\
O\
O\
OOO\

;
if
(
lll\
OOll\
O\
Ol
<
0.0f
)
ret\
ur\
n
false
;
else\

lllOO\
llOOl
=
Sqrt
(
lll\
OOllOOl
)
;
lll\
lOlll\
O\
O
=
(
-
llllOOOOl\
O
-
ll\
lO\
O\
l\
lO\
O\
l
)
/
(
2.0f
*
ll\
l\
l\
OOOOOl\

)
;
fl\
oat
llll\
Olll\
O\
l
=
(
-
lll\
l\
O\
O\
OOlO
+
lllOOl\
lO\
Ol
)
/
(
2.0f
*
llllOOO\
O\
Ol
)
;
if
(
llllOlll\
O\
l
>
0.0f
&&
llllOl\
llOO
>
lll\
lOl\
llOl
)
llllOlll\
OO\

=
llll\
O\
l\
ll\
Ol
;
}
if
(
llllO\
lll\
OO
<
0.0f
||
llllO\
lllOO\

>
1.0f
)
retur\
n
fal\
se
;
fl\
oat\

lOlllll\
l\
OO
=
0.0f
;
fl\
oat
ll\
lOO\
llOOl
=
llllO\
ll\
O\
Ol
.
x
+
ll\
ll\
OllOll\

.
x
*
ll\
ll\
Ol\
llOO\

;
float\

llllOl\
ll\
lO
=
llllOl\
lOOl
.
y
+
lll\
l\
O\
llOll
.
y
*
llll\
OlllOO
;
if
(
Fabs
(
lll\
l\
Ollll\
O
)
>
Fabs\

(
lll\
O\
Oll\
OOl
)
)
{
lO\
llllllOO
=
(
llllOllOOO
.
y
-
llllOl\
lOl\
O
.
y
*
ll\
llOlllOO\

)
/
llllOll\
l\
l\
O
;
}
els\
e\

{
if
(
Fa\
bs\

(
lllO\
OllOO\
l
)
<
lOllO\
l\
Oll\
l
*
0.001f
)
retur\
n
false
;
lO\
ll\
l\
lll\
OO
=
(
llllOllOOO
.
x
-
llllOl\
lOlO
.
x
*
ll\
llOlllOO
)
/
lllO\
OllOOl
;
}
if
(
lOll\
llllOO\

<
0.0f
||
lOlllll\
lOO
>
1.0f
)
retu\
rn\

false
;
const\

int
lO\
OOlll\
l\
Ol\

=
llllOOlOll
[
0
]
;
TA_ASSERT
(
Fabs
(
llll\
OlOlO\
O
[
lOOOlll\
l\
Ol
]
)
>
lO\
llOlO\
lll
)
;
flo\
at
lll\
lOllll\
l
=
(
llllO\
O\
Ol\
ll
[
lOOOl\
lllOl
]
-
llllOlO\
lO\
l\

[
lO\
OOlll\
l\
O\
l\

]
*
lOl\
llll\
l\
O\
O
-
llllO\
l\
OllO\

[
lO\
OOllllOl
]
*
llllOlllOO
-
llllOlOl\
l\
l\

[
lO\
OOllllO\
l
]
*
lOll\
llllOO
*
lll\
lOlllOO
)
/
llllOlOlOO
[
lOOO\
l\
l\
llO\
l
]
;
if
(
ll\
l\
lOl\
lll\
l
<
0.0f
||
llllOll\
ll\
l
>
1.0f
)
retu\
rn\

false
;
lO\
llllO\
Ol\
l
=
ll\
llO\
Oll\
Ol
+
(
llllO\
Olll\
O
-
ll\
llO\
OllOl
)
*
llllOll\
l\
OO\

;
Vec3
lOOOlOO\
OOO\

=
ll\
llOl\
O\
l\
OO
.
Cro\
s\
s
(
ll\
ll\
OOll\
lO
-
llllOOllOl
)
;
Vec3
ll\
lll\
O\
O\
O\
O\
O
=
(
llllOOllO\
l
+
(
llll\
OOll\
lO
-
llllOOll\
Ol
)
*
llllOlllO\
O
)
-
(
llll\
OOll\
ll
+
(
llllOlOOO\
O
-
llll\
OO\
l\
l\
ll\

)
*
llllOl\
l\
lOO
)
;
if
(
lOOOl\
O\
OOO\
O
.
Do\
t
(
lll\
llO\
OOOO
)
<
0.0f
)
lO\
OOlOOOOO
=
-
lOOOlOO\
OOO
;
if
(
lOOOlOOOOO
.
Get\
Ma\
gn\
it\
ude
(
)
<
lO\
llOl\
Ol\
ll
)
return
false
;
lO\
OOlOO\
OOO
.
Norm\
alis\
e
(
)
;
lO\
llllO\
lOO\

=
lOOOlO\
OOO\
O
;
llllOlO\
Oll\

=
lO\
l\
ll\
lllOO
;
ret\
ur\
n
tru\
e\

;
}
bool
TAC_C\
ALL
Ge\
ometr\
y\

::
Tes\
tLineMo\
ve\
me\
nt\
Ag\
ainst\
Capsule
(
con\
st
Ve\
c\
3\

&
llllOO\
llOl\

,
cons\
t
Vec3
&
llll\
O\
Ol\
llO
,
const
Vec3
&
lll\
lOO\
lll\
l
,
cons\
t
Ve\
c3
&
ll\
l\
lOlOOOO\

,
con\
st\

Vec3
&
ll\
llOlOOOl
,
co\
n\
s\
t
Vec3
&
ll\
llO\
lOOl\
O
,
flo\
at\

lllllOO\
OO\
l\

,
fl\
oa\
t
&
ll\
l\
lOlOOll
,
Vec\
3\

&
lOll\
l\
lOOll\

,
Vec3\

&
lOllllOlOO
)
{
con\
s\
t
floa\
t
lOll\
O\
lOlll
=
0.0001f
;
Vec\
3
lO\
lll\
Olll\
l
=
(
llll\
OOl\
lOl\

-
llllOOlll\
O
)
.
Cross
(
lll\
lOl\
OOO\
l
-
lll\
l\
Ol\
O\
OlO
)
;
floa\
t\

lO\
llllOlO\
l
=
lOll\
lOll\
ll
.
Get\
M\
ag\
n\
itu\
de
(
)
;
if\

(
lOl\
ll\
lO\
l\
Ol
<
lO\
ll\
O\
lO\
ll\
l
*
lOllOlOlll
)
{
lOlllOllll
=
lll\
lOlOO\
lO
-
llllOlOO\
Ol
;
lOll\
lO\
ll\
ll
=
lOlllOllll
.
Cross
(
(
lll\
lO\
O\
l\
lO\
l
-
ll\
l\
l\
Ol\
OOO\
l
)
.
Cr\
o\
ss
(
lOlllOllll
)
)
;
lOllllO\
lOl
=
lOll\
lOlll\
l\

.
Get\
Magnitu\
de\

(
)
;
if
(
lOllll\
OlOl\

<
lO\
l\
lOlOl\
ll
*
lOllOlOl\
ll
)
return\

false
;
}
lOll\
l\
Ollll
.
Nor\
mali\
se\

(
)
;
float
llll\
lO\
OOlO
=
lOl\
l\
lOll\
l\
l
.
Dot
(
llllOOl\
lOl
-
llllO\
l\
O\
OOl
)
;
if\

(
lllllO\
O\
OlO
<
0.0f
)
{
ll\
l\
ll\
O\
OOl\
O\

=
-
ll\
lllOO\
OlO
;
lOlll\
Ol\
l\
ll
=
-
lOlllO\
llll
;
}
Vec3
lOl\
lllOOO\
l
=
(
llllOO\
l\
lll\

-
llllOlOOOO
)
.
Cross
(
ll\
llO\
lO\
O\
Ol
-
llllOlO\
OlO
)
;
lOllllOlOl
=
lOllll\
OOOl
.
GetMa\
g\
nitude\

(
)
;
if
(
lOllllOlOl\

<
lO\
ll\
OlOlll
*
lOllO\
lOl\
ll\

)
{
lOllllOOOl
=
ll\
llO\
lOO\
lO
-
ll\
llOlO\
OOl
;
lOl\
lllO\
OO\
l\

=
lOllll\
OO\
Ol
.
Cr\
oss
(
(
llllOOl\
lll
-
lll\
lOlOO\
Ol
)
.
Cros\
s
(
lO\
l\
lllOOOl
)
)
;
lOl\
lllOlO\
l\

=
lO\
l\
ll\
lOOOl
.
GetMagni\
tude
(
)
;
TA\
_ASSERT
(
lOlll\
l\
OlO\
l
>
lOllOlO\
ll\
l\

*
lOll\
O\
lOl\
ll
)
;
}
lOlll\
l\
O\
OO\
l
/=
lOll\
l\
l\
OlOl
;
if
(
lOll\
ll\
OO\
O\
l
.
Dot
(
lOlllOlll\
l
)
<
0.0f
)
lOllllOOOl
=
-
lOllllO\
O\
Ol
;
floa\
t\

ll\
l\
llOOO\
l\
l
=
lOl\
lllOOO\
l
.
Dot
(
llllOOllll
-
ll\
llOl\
OOO\
l
)
;
if
(
lll\
llOOOl\
O
>
lll\
ll\
OOOll
)
{
lO\
l\
llOl\
lll
=
-
lOlllO\
lll\
l
;
lOll\
llO\
O\
O\
l\

=
-
lOl\
lll\
OOOl
;
}
lOl\
ll\
Ol\
lll\

*=
ll\
ll\
lO\
O\
OOl\

;
lOll\
llOO\
Ol\

*=
llll\
lO\
OO\
O\
l
;
co\
nst
Vec3
lll\
l\
l\
OOlOO
=
lll\
l\
OOllOl\

+
lO\
ll\
lO\
llll
;
const
Vec\
3
lllll\
OOlOl
=
llllOO\
lllO
+
lO\
lllO\
llll
;
const
Vec3\

lllll\
OOllO
=
llllOOll\
ll\

+
lO\
lll\
l\
OO\
Ol
;
const\

Vec3
lllllO\
Olll
=
llll\
OlOOOO
+
lOllllOOO\
l
;
ret\
ur\
n\

Tes\
tE\
dg\
eMo\
veme\
n\
tAgainstE\
dge
(
ll\
lll\
OOlOO\

,
ll\
l\
llO\
OlOl
,
llll\
lOO\
ll\
O
,
llll\
l\
O\
Oll\
l
,
llllOl\
O\
OOl
,
lll\
lOlO\
Ol\
O
,
llllOlOOl\
l
,
lOlll\
l\
OOll
,
lOllllOlO\
O
)
;
}
boo\
l\

TAC_C\
ALL
Ge\
o\
metry
::
TestPo\
i\
ntMovementA\
gain\
s\
tSp\
her\
e
(
const
Vec3
&
llllOO\
l\
l\
Ol
,
const
Vec3
&
llllOOlll\
O\

,
co\
n\
st
Vec\
3\

&
lO\
OO\
O\
OOO\
OO\

,
floa\
t\

lllll\
OOOOl\

,
fl\
oat\

&
lll\
lOlO\
Ol\
l\

,
Vec\
3
&
lOl\
ll\
lOOll\

,
Ve\
c3
&
lOlll\
l\
Ol\
OO
)
{
float\

lOllOlOlll
=
0.0001f
;
Vec3
ll\
ll\
l\
OlOOO
=
llllOOl\
llO
-
llllOOllOl
;
fl\
oat
lO\
lOllOlOO
=
ll\
lllO\
lOO\
O
.
Do\
t
(
lOOO\
O\
O\
OOOO
-
ll\
llOOllOl
)
;
float
lOlO\
l\
lO\
lOl
=
lllll\
OlOOO
.
Dot
(
lOOOOOO\
OOO\

-
ll\
llOO\
l\
l\
lO
)
;
if
(
Fa\
bs
(
lO\
lOllO\
l\
OO\

-
lOl\
Oll\
O\
lO\
l
)
<
lOl\
lOlOl\
ll
)
retu\
rn
fals\
e
;
flo\
at\

lllOlllllO\

=
lOlO\
l\
lOlOO
/
(
lO\
lOl\
lO\
l\
OO
-
lOl\
OllOlO\
l
)
;
con\
s\
t
Vec3
ll\
lll\
Ol\
OOl
=
lll\
lOOllOl\

+
lllllO\
lOOO
*
lllO\
l\
l\
l\
ll\
O
;
con\
st
fl\
o\
at
lll\
llOl\
OlO\

=
lllllO\
O\
OO\
l
*
lllllO\
OO\
Ol\

;
co\
nst
flo\
at
lllOO\
lOll\
l
=
(
ll\
l\
ll\
O\
lO\
Ol
-
lOOOOOO\
OOO
)
.
GetMa\
g\
nit\
u\
deS\
qrd\

(
)
;
if\

(
lllO\
O\
lOlll
>
lllllOl\
OlO\

)
return\

false\

;
float
lllllOl\
Ol\
l\

=
ll\
lllOlOOO
.
GetMa\
gni\
tude
(
)
;
TA\
_\
A\
SSERT\

(
ll\
ll\
lOlOll
>
lOllOlOlll
*
0.1f
)
;
lllOll\
lllO
-=
(
Sqrt
(
llll\
lOlO\
l\
O
-
lllOOlOlll
)
/
lllllOl\
O\
ll\

)
;
if
(
ll\
lOll\
lll\
O\

<
0.0f
||
ll\
lOll\
lllO
>
1.0f
)
retu\
rn
fa\
lse\

;
lll\
l\
OlOOll
=
lllOl\
llllO
;
lO\
ll\
llOOl\
l\

=
ll\
l\
lOOll\
Ol
+
lll\
llOlOOO
*
ll\
lOlll\
llO
;
lOl\
l\
l\
lOlOO\

=
(
lOllll\
OOl\
l
-
lOOO\
O\
OOOOO
)
.
Ge\
tNo\
rmal\

(
)
;
ret\
u\
r\
n\

true
;
}
bool
TAC_C\
AL\
L
Ge\
om\
etry
::
Test\
Sphe\
reM\
ovem\
e\
nt\
A\
g\
ains\
tLine\

(
co\
nst
Vec3\

&
ll\
llO\
O\
llOl
,
co\
nst\

Vec3
&
llllO\
Olll\
O
,
const
Vec3\

&
llll\
OOlll\
l
,
const
Vec3
&
llllOlOOOO\

,
float\

lll\
l\
lOOO\
Ol
,
float
&
llll\
OlOO\
ll
,
Ve\
c3
&
lOll\
l\
lO\
Oll
,
Vec3
&
lO\
llll\
OlOO
)
{
co\
n\
s\
t
float\

lOllOlOll\
l
=
0.0001f
;
Vec3
ll\
l\
l\
lO\
ll\
OO\

=
ll\
l\
l\
OOll\
lO\

-
lll\
lOO\
ll\
Ol\

;
Vec\
3
lllllOl\
lOl\

=
llllOlOO\
O\
O
-
ll\
ll\
OOl\
lll
;
Vec3
lOllll\
lOOO
=
llll\
l\
OllOO
.
Cross
(
lllllO\
ll\
O\
O
,
lllllO\
llOl
)
;
Vec\
3
lOlllllOOl
=
lOllll\
lOOO
.
Cross
(
ll\
ll\
lOllO\
l\

)
;
float
lOll\
lllO\
lO\

=
lOllll\
lOOl
.
Dot
(
ll\
llOOl\
lO\
l
-
lll\
lO\
Ol\
ll\
l
)
;
fl\
oa\
t
lOll\
l\
llO\
ll\

=
lO\
lllllOOl
.
Do\
t
(
lll\
lOOl\
ll\
O
-
llll\
OOllll\

)
;
if
(
Fa\
bs
(
lOl\
llll\
O\
ll
-
lOl\
l\
lllOlO\

)
<
lOllOlOlll
)
return\

fals\
e
;
floa\
t\

llllOll\
lOO\

=
lOllll\
lOlO
/
(
lO\
l\
lll\
lOlO
-
lO\
l\
llllOll
)
;
Ve\
c3
lllllOlOOl
=
ll\
llO\
Ol\
lOl
+
lllllOl\
lOO
*
ll\
llO\
ll\
lOO
;
lOllll\
lOl\
O
=
lllll\
OllOl
.
Do\
t
(
llllO\
Ol\
lll\

-
lllllOlOOl
)
;
lOlllllO\
ll
=
ll\
ll\
l\
Ol\
lOl
.
Dot
(
lll\
l\
OlO\
OO\
O
-
llll\
l\
OlOOl
)
;
if
(
Fabs\

(
lOll\
lllO\
l\
l\

-
lOlll\
ll\
Ol\
O
)
<
lO\
llOlOll\
l
)
return\

false
;
float
lll\
llO\
lll\
O\

=
lOlll\
llOlO
/
(
lOll\
lllOlO
-
lOl\
llllOll
)
;
Vec3
lllllOl\
lll\

=
llll\
OOllll\

+
lllllO\
llOl
*
lllllOlllO
;
co\
nst
float\

lll\
l\
lOlOlO
=
lllllOOO\
Ol
*
ll\
lllOOO\
Ol
;
const
float
lllO\
Ol\
O\
lll\

=
(
lllllOlO\
Ol
-
ll\
l\
llOll\
ll\

)
.
GetMagn\
i\
tudeS\
q\
rd
(
)
;
if
(
ll\
lOOlOll\
l
>
ll\
lllO\
lOl\
O
)
return\

fals\
e
;
float
lll\
lll\
OOOO\

=
llll\
lOll\
OO\

.
GetM\
ag\
n\
itude
(
)
;
TA_\
A\
SSE\
RT\

(
lll\
lllO\
OOO\

>
lOllOlOll\
l
*
0.1f
)
;
float
ll\
l\
lll\
OOOl\

=
lllllOllOl
.
Get\
Mag\
nitude
(
)
;
TA_ASSERT
(
lll\
ll\
l\
OOOl
>
lOll\
OlO\
l\
l\
l
*
0.1f
)
;
float
lll\
ll\
lOOl\
O
=
lll\
ll\
Ol\
lOO
.
Dot
(
lllllOllO\
l
)
/
(
lllll\
lOOO\
O
*
ll\
ll\
llO\
OO\
l\

)
;
float
lll\
lllOOll
=
Sqr\
t
(
(
lll\
llOl\
OlO
-
ll\
lOO\
lO\
l\
ll
)
/
(
1
-
llllllOOlO
*
lll\
lllOOlO
)
)
;
lll\
l\
O\
lll\
OO\

-=
llll\
l\
lOOll
/
llllllOOOO
;
if
(
llllOlll\
OO\

<
0.0f
||
llllOll\
lOO
>
1.0f
)
re\
tu\
rn\

false
;
flo\
at
llllllOlOO
=
llllllOO\
ll\

*
ll\
llll\
OOl\
O
;
llll\
lO\
l\
ll\
O
-=
llllllO\
lOO
/
lll\
lll\
OOO\
l
;
if\

(
ll\
lll\
OlllO
<
0.0f
||
llll\
lO\
lll\
O
>
1.0f
)
return
false
;
llllOl\
OO\
ll\

=
llllO\
ll\
lOO\

;
lO\
lll\
lOOll
=
lll\
lOOll\
ll
+
lllllO\
l\
lOl
*
lllllOll\
lO\

;
lOllllO\
lOO
=
(
llllOOllOl\

+
ll\
lllO\
llOO
*
llllOll\
lO\
O\

-
llllO\
Ollll\

-
lllll\
OllO\
l\

*
lllllOll\
lO
)
.
GetNo\
r\
mal\

(
)
;
return
true
;
}
bool\

TAC\
_CAL\
L
Geometry
::
Tes\
tL\
i\
ne\
Move\
ment\
A\
ga\
i\
n\
stS\
ph\
ere\

(
con\
st
Vec3
&
ll\
llOOl\
lOl
,
con\
st
Vec3
&
ll\
ll\
O\
Ol\
llO
,
co\
n\
st
Ve\
c3\

&
llll\
O\
Ollll
,
const\

Vec3\

&
llllOlOOOO\

,
const
Vec3\

&
ll\
llOOlOOO
,
flo\
at\

llll\
lO\
OO\
O\
l
,
floa\
t
&
lll\
lO\
l\
O\
O\
ll\

,
Ve\
c\
3
&
lO\
ll\
llOO\
l\
l\

,
Vec\
3
&
lOll\
ll\
O\
lO\
O
)
{
const
fl\
oat
lO\
l\
lOlOll\
l
=
0.0001f
;
Vec3
llll\
lOlOOO
=
ll\
ll\
OOlllO
-
llllOO\
llOl
;
flo\
at
lOlO\
ll\
OlOO\

=
lllllOlO\
OO
.
Dot
(
ll\
llOOlO\
OO
-
llllOOl\
l\
O\
l
)
;
flo\
a\
t\

lOlO\
l\
l\
Ol\
Ol
=
lllll\
OlOOO
.
Dot
(
ll\
llOOl\
OO\
O
-
ll\
llOOlllO\

)
;
TA\
_ASS\
ER\
T
(
lO\
lOl\
lOl\
OO\

-
lOlOllOl\
Ol
>
0.0f
)
;
float\

lllOlllllO
=
lOlOllO\
l\
O\
O\

/
(
lO\
lOll\
O\
lOO
-
lOl\
Oll\
OlOl
)
;
Cla\
m\
p\

(
lll\
Oll\
lllO
,
0.0f
,
1.0f
)
;
Vec3
ll\
l\
lll\
lll
=
ll\
l\
lOOl\
lOl
+
lllll\
OlO\
O\
O\

*
lll\
Ol\
l\
lllO
;
float
llll\
lOlOlO
=
ll\
l\
l\
lOO\
OOl
*
lllll\
OO\
OO\
l
;
lllllOlOOO
=
llll\
Ol\
OOOO
-
llllOOll\
ll
;
lOl\
OllOlOO
=
lll\
llOlO\
OO\

.
Dot
(
lll\
l\
OOlOOO
-
llllOOllll
)
;
lO\
l\
O\
llOlO\
l\

=
ll\
lll\
OlOOO
.
Dot
(
llll\
O\
O\
lO\
OO
-
lll\
lOlOO\
OO
)
;
TA\
_A\
S\
SE\
RT
(
lOlOllOlO\
O
-
lOl\
O\
llOl\
Ol
>
0.0f
)
;
lllOlllllO\

=
lOlOl\
l\
Ol\
OO
/
(
lO\
lOl\
l\
Ol\
O\
O
-
lOlOllOlOl
)
;
Cl\
amp\

(
ll\
l\
OlllllO
,
0.0f
,
1.0f
)
;
Vec3\

lOOOOO\
OOOO
=
ll\
llOOlll\
l\

+
lllllO\
lOOO\

*
ll\
lO\
lllllO
;
lllllOlOO\
O
=
lOOO\
OO\
OO\
O\
O\

-
lll\
lllll\
l
;
lO\
lOllOlOO\

=
lllllO\
lOOO
.
Dot\

(
lll\
l\
OOl\
OOO
-
ll\
l\
lllll\
l\

)
;
lOlOllO\
lOl
=
lllllO\
lOOO
.
Dot
(
lll\
l\
OOlOO\
O
-
lOOOO\
OOOO\
O
)
;
if
(
Fabs\

(
lO\
lOllOlOO
-
lOlO\
llOl\
Ol
)
<
lOl\
l\
OlOlll\

)
re\
tu\
rn
false
;
lll\
Oll\
lllO
=
lO\
lO\
ll\
O\
lOO
/
(
lOlO\
l\
lOlO\
O
-
lOl\
Ol\
lO\
l\
Ol
)
;
Vec3
lll\
l\
llO\
lOl\

=
ll\
lllllll
+
ll\
ll\
lOlOO\
O\

*
ll\
lOlll\
llO
;
floa\
t\

lllOOlOlll\

=
(
lllll\
lOl\
Ol
-
lll\
lOOl\
OO\
O
)
.
GetM\
a\
gnitude\
Sqrd
(
)
;
if
(
ll\
lO\
OlOl\
l\
l\

>
lllllOl\
OlO
)
re\
turn
fal\
se
;
floa\
t
ll\
l\
llO\
lOll
=
lllllOlOO\
O
.
Ge\
tM\
agnitude
(
)
;
TA_AS\
SERT
(
lllllOlO\
ll
>
lOllOlO\
ll\
l
*
0.1f
)
;
lllO\
l\
llll\
O
-=
(
Sqr\
t
(
lll\
llOl\
Ol\
O
-
lllOOl\
O\
lll\

)
/
ll\
l\
llOlOll
)
;
if\

(
lllOlllll\
O\

<
0.0f
||
ll\
lOlllll\
O
>
1.0f
)
re\
turn\

fal\
se
;
llll\
O\
l\
OOll\

=
lllOlllll\
O\

;
lO\
l\
lllOO\
ll
=
lll\
l\
l\
lll\
l
;
lO\
l\
lllOlOO
=
(
ll\
l\
ll\
ll\
ll
+
lllllOl\
OOO\

*
lllO\
lllllO
-
ll\
llO\
O\
lOOO
)
.
Ge\
tNorm\
al\

(
)
;
re\
t\
urn
true
;
}
vo\
id
TAC\
_CAL\
L
Geom\
e\
try
::
FindC\
l\
oses\
tPoi\
nt\
OnLin\
eToLi\
ne\

(
const
Vec3\

&
llllO\
O\
l\
lO\
l
,
const
Vec3
&
llll\
O\
Ol\
llO\

,
cons\
t
Vec3
&
llllO\
Ol\
lll
,
co\
nst\

Ve\
c\
3
&
llll\
O\
lOOOO
,
Vec3
&
lllll\
O\
l\
OO\
l
,
Vec3\

&
lllll\
Ol\
lll\

)
{
const\

float\

lOll\
O\
lO\
l\
l\
l\

=
0.0001f
;
Vec3
lllllOllOO
=
llllOO\
lllO
-
ll\
llO\
Oll\
Ol
;
Vec\
3
lll\
llO\
ll\
Ol\

=
llllOl\
OO\
OO\

-
lll\
lOOllll
;
Vec\
3
lO\
l\
llllO\
O\
O
=
ll\
ll\
lO\
llOO
.
Cr\
oss\

(
llll\
lOll\
OO
,
llll\
lOllOl\

)
;
Vec3
lOlllllOOl
=
lOllll\
lO\
OO
.
Cross
(
ll\
lllOll\
O\
l
)
;
fl\
o\
at
lOl\
lll\
lOlO
=
lO\
lll\
l\
lO\
O\
l
.
Dot\

(
llllO\
O\
l\
lOl
-
llll\
O\
Ol\
lll
)
;
float
lOllll\
lOll
=
lO\
l\
llllO\
Ol
.
Dot
(
lll\
lOO\
lllO\

-
llllO\
Ollll
)
;
fl\
oat
lO\
llll\
llOO
;
if
(
Fa\
bs
(
lOll\
ll\
lOll
-
lOllll\
lOl\
O
)
<
lOllOlOll\
l
)
{
floa\
t\

lOllllOlOl\

=
ll\
lllOllOl
.
GetMagnitude
(
)
;
if
(
lOll\
llOlOl
<
lOllO\
lO\
lll
)
{
lllllOllll\

=
(
llll\
OOl\
lll
+
llll\
OlOOOO\

)
*
0.5f
;
float\

llllllO\
llO
=
(
llllOO\
llO\
l\

-
llll\
l\
O\
ll\
ll\

)
.
GetMag\
nit\
ude
(
)
;
flo\
at
lllll\
O\
lO\
ll
=
(
llllOOlllO\

-
lll\
llO\
llll
)
.
GetM\
a\
gnitude
(
)
;
ll\
lll\
O\
lOO\
l
=
ll\
l\
ll\
lOll\
O
<
lll\
llOl\
O\
ll
?
ll\
llOO\
l\
lO\
l
:
lll\
l\
OOl\
ll\
O
;
return
;
}
els\
e
{
lll\
llO\
l\
l\
Ol
/=
lOlll\
l\
OlOl\

;
Vec3
llllOlO\
OO\
l
;
Ve\
c3
ll\
llO\
lOOlO
;
if\

(
ll\
lllO\
ll\
OO
.
Dot\

(
lllllO\
l\
lOl
)
<
0.0f
)
{
lll\
llOll\
O\
l\

=
-
lll\
l\
l\
Ol\
l\
Ol
;
ll\
llO\
l\
OOO\
l
=
lll\
lOlOOOO
;
ll\
llOl\
OOlO\

=
llll\
OO\
lll\
l
;
}
else
{
llll\
OlOO\
Ol
=
ll\
llO\
O\
lll\
l
;
llllOl\
OO\
lO\

=
llll\
OlOOOO
;
}
lOl\
lll\
l\
OlO
=
lllllOl\
lOl
.
Do\
t
(
lll\
lOOll\
l\
O
-
llllOl\
OO\
Ol
)
;
if
(
lOlllllOlO
<
0.0f
)
{
ll\
ll\
l\
O\
lOOl
=
llllO\
Olll\
O
;
lllll\
Ollll
=
llllO\
lOOOl
;
ret\
urn
;
}
lOllll\
lOll
=
lll\
ll\
OllOl
.
Dot
(
llll\
OO\
l\
lO\
l
-
llllOlOOl\
O
)
;
if
(
lOlll\
l\
lOll
>
0.0f
)
{
lllllOlOO\
l
=
lll\
lOO\
llOl
;
lllll\
Ol\
l\
ll
=
llllO\
lOO\
lO
;
re\
turn\

;
}
lO\
l\
ll\
l\
lOlO
=
ll\
l\
llOl\
l\
O\
l\

.
Dot\

(
llllO\
Ol\
lOl
-
llllOlOO\
O\
l\

)
;
if\

(
lO\
lllllO\
lO\

<
0.0f
)
lOlllllOlO\

=
0.0f
;
lOlllllO\
ll
=
ll\
l\
l\
lOl\
lOl
.
Dot\

(
llllOOlll\
O
-
llll\
Ol\
OOOl
)
;
if
(
lO\
lllllO\
ll\

>
lOllllOlOl
)
lOl\
llllO\
ll
=
lOl\
l\
ll\
Ol\
O\
l\

;
lll\
llOllll
=
llll\
Ol\
O\
OOl
+
lllllOllO\
l
*
(
(
lOl\
llllOlO
+
lO\
ll\
lllO\
l\
l
)
*
0.5f
)
;
lOlllllOlO
=
llll\
lOllOO
.
Dot
(
lll\
l\
O\
Ol\
l\
Ol
-
lll\
l\
l\
Ol\
ll\
l
)
;
lOlllllOll\

=
lllllOllOO\

.
Dot
(
ll\
l\
l\
O\
O\
lllO
-
lll\
l\
lOllll\

)
;
if
(
Fabs
(
lOlllll\
Oll\

-
lOlllllO\
lO
)
<
lOllOlOlll\

)
lllllOlO\
O\
l
=
(
llllOO\
llO\
l
+
llllOOll\
l\
O
)
*
0.5f
;
el\
se\

llll\
lO\
lOOl
=
lll\
lO\
OllO\
l
+
lllllO\
l\
lOO\

*
(
lO\
lllllOlO
/
(
lOllll\
l\
OlO
-
lOlllllO\
ll
)
)
;
retu\
rn
;
}
}
else
{
lOllllllOO
=
lO\
lllll\
OlO
/
(
lOl\
lll\
l\
OlO
-
lOllll\
l\
Oll
)
;
}
Clam\
p\

(
lOll\
llllO\
O
,
0.0f
,
1.0f
)
;
lll\
l\
lOl\
O\
Ol
=
llllOO\
ll\
Ol
+
lllllO\
llOO
*
lO\
l\
llll\
l\
O\
O
;
lOlllll\
OlO
=
lll\
llO\
l\
lOl
.
Dot
(
llll\
O\
O\
l\
l\
ll\

-
lllllO\
l\
O\
Ol\

)
;
lOll\
lllO\
ll\

=
lllllOl\
lO\
l
.
Dot
(
llllOl\
OOO\
O
-
lllllOlOOl
)
;
if
(
Fabs
(
lOllll\
lO\
l\
l
-
lOlll\
llOl\
O
)
<
lOl\
lOlOlll
)
lOlll\
lllOO
=
0.0f
;
else\

lOl\
ll\
lllOO
=
lOlllll\
OlO
/
(
lOll\
l\
ll\
OlO
-
lO\
l\
ll\
l\
lOl\
l
)
;
bool
llllll\
Oll\
l
=
fal\
se
;
if
(
lOlllll\
lOO
<
0.0f
)
{
lOll\
llllOO
=
0.0f
;
lllll\
l\
O\
ll\
l
=
true
;
}
el\
se
if
(
lOlll\
l\
ll\
O\
O
>
1.0f
)
{
lllll\
lOl\
ll
=
tr\
ue
;
lO\
l\
ll\
ll\
lOO
=
1.0f
;
}
llll\
lO\
lll\
l\

=
ll\
llO\
Oll\
ll\

+
lllllO\
llOl\

*
lOll\
ll\
llOO\

;
if
(
lll\
lllOl\
ll
)
{
lOl\
llllO\
lO
=
lllllOllOO
.
Do\
t
(
ll\
l\
lOOllOl
-
lll\
llOl\
lll
)
;
lOl\
llllOll
=
lll\
llOllOO
.
Do\
t\

(
lll\
lO\
OlllO
-
llll\
lO\
lll\
l
)
;
flo\
at\

lOllllllO\
O
;
if
(
Fabs
(
lOl\
l\
l\
l\
lOll
-
lOl\
ll\
ll\
Ol\
O
)
<
lOllOlOlll\

)
lOlllll\
lO\
O
=
0.0f
;
el\
s\
e
lOl\
lll\
llOO
=
lOlllllOlO
/
(
lOl\
l\
lllO\
l\
O
-
lOlllllO\
ll
)
;
Clam\
p
(
lO\
lll\
l\
llOO
,
0.0f
,
1.0f
)
;
lll\
llOlOOl
=
lll\
lO\
Ol\
lOl
+
lllllO\
llOO\

*
lOll\
ll\
llOO
;
}
}
bool
TAC_C\
ALL
Geometry
::
Find\
Clo\
s\
estPointOnLineToLineUn\
Clamped\

(
co\
nst
Vec3\

&
ll\
llOOllOl\

,
const\

Ve\
c3
&
llllOOll\
lO\

,
con\
st
Vec3
&
ll\
llOOl\
lll
,
co\
nst
Ve\
c3
&
llllOl\
OOOO
,
Ve\
c3\

&
llll\
lOl\
OO\
l\

,
Ve\
c3\

&
lllllOl\
l\
l\
l
)
{
co\
nst
fl\
oat
lOll\
OlO\
l\
ll
=
0.0001f
;
Vec3\

lllllOllO\
O
=
ll\
llOO\
l\
ll\
O
-
llllOOllOl
;
Vec3\

lll\
ll\
O\
l\
l\
Ol\

=
llllOl\
O\
OOO
-
llll\
OO\
llll
;
Vec3
lOlllll\
OOO\

=
Vec3\

::
Cross
(
lll\
l\
l\
OllOO\

,
lllllOllO\
l\

)
;
Vec3
lOlll\
llO\
Ol
=
lOlllllOOO
.
Cr\
os\
s
(
ll\
lll\
OllOl
)
;
fl\
oat
lO\
ll\
lllO\
lO\

=
lO\
lll\
llOOl
.
Dot
(
llllOOl\
lO\
l
-
llllOOllll
)
;
floa\
t
lOl\
lll\
lO\
ll
=
lOlllllO\
Ol
.
Do\
t
(
llllO\
OlllO
-
ll\
l\
l\
OO\
llll
)
;
flo\
at
lO\
llllllOO
;
if\

(
Fab\
s\

(
lOllll\
l\
Oll
-
lOlllll\
OlO
)
<
lO\
llO\
lO\
lll
)
ret\
urn
fal\
se
;
els\
e
lOllllll\
OO\

=
lO\
l\
lll\
l\
Ol\
O\

/
(
lO\
lllllOlO
-
lO\
lllllO\
ll\

)
;
if
(
lO\
ll\
l\
lllOO\

<
0.0f
||
lOllll\
llOO\

>
1.0f
)
return
fal\
se
;
lllllOlOOl\

=
llllOOllOl
+
lll\
l\
lO\
llOO
*
lOllllllO\
O
;
lO\
lllllO\
lO
=
lll\
llOllO\
l
.
Dot
(
lll\
l\
O\
O\
llll
-
lllllOlOOl
)
;
lOl\
llll\
Oll
=
lllllOllOl
.
Dot\

(
llllOl\
O\
O\
OO
-
lllllO\
l\
O\
Ol\

)
;
if\

(
Fabs
(
lO\
l\
ll\
l\
lOll
-
lO\
lllll\
OlO
)
<
lOllOl\
Oll\
l
)
ret\
u\
rn
fal\
se
;
el\
se
lOllllllOO
=
lOlll\
llO\
l\
O\

/
(
lOl\
lll\
l\
OlO
-
lOlll\
ll\
Oll
)
;
if
(
lOll\
lll\
lOO
<
0.0f
||
lOlll\
lllOO
>
1.0f
)
re\
tu\
r\
n\

fals\
e\

;
lll\
llOllll
=
llll\
OO\
llll
+
lllll\
OllOl
*
lOl\
lllllOO
;
retu\
r\
n
tr\
ue\

;
}
#ifndef TA_GCC
inline
#endif //
Vec\
3
TAC_\
CALL
Ge\
ometr\
y
::
Fin\
dC\
losest\
P\
ointOnLine
(
const
Vec3
&
lOOO\
O\
lO\
OOl
,
con\
st
Vec3
&
llll\
l\
OllOO
,
co\
n\
st
Vec\
3
&
lllllOl\
lOl
)
{
Vec3
lllllllOOO
=
lllllOllOl
-
lll\
llOll\
O\
O\

;
flo\
a\
t
lOlO\
ll\
OlO\
O
=
ll\
lllllOOO
.
Dot\

(
lOOOOlOOO\
l
-
lllll\
O\
ll\
O\
O
)
;
flo\
at
lOl\
O\
llOlOl
=
lllll\
llOOO
.
Dot
(
lOOOOlOOO\
l\

-
ll\
lllO\
llOl
)
;
TA\
_\
ASSER\
T
(
lOlOllOlOO\

-
lOlOl\
lOl\
Ol
>
0.0f
)
;
fl\
oat
lllOlllllO
=
lOlO\
llOlOO
/
(
lOl\
Oll\
OlOO\

-
lOlOllOlOl
)
;
Clam\
p
(
lllOll\
lllO
,
0.0f
,
1.0f
)
;
return
ll\
ll\
lOl\
l\
OO
+
ll\
ll\
l\
llOOO
*
lllOl\
ll\
llO
;
}
#ifndef TA_GCC
#endif //
float
TAC_C\
ALL
Geometry
::
Fi\
ndShortestDi\
stanc\
eToLine\
Sq\
rd
(
const
Vec3
&
lOOO\
OlOOOl
,
cons\
t\

Vec3\

&
ll\
ll\
lOll\
OO
,
co\
n\
st\

Vec\
3
&
lllll\
OllOl
)
{
Ve\
c3
lO\
llll\
OO\
ll\

=
FindCl\
osest\
PointOnLine
(
lOO\
O\
O\
lO\
OO\
l\

,
lllllO\
llOO
,
lllll\
O\
llOl
)
;
return\

(
lO\
llllO\
Oll
-
lOOOOlOOO\
l
)
.
Ge\
t\
Magni\
tud\
eSqrd\

(
)
;
}
fl\
oa\
t\

TAC\
_CALL\

Geo\
metry\

::
FindSho\
rtestDi\
sta\
nceT\
o\
Lin\
e
(
const\

Vec\
3
&
lOO\
O\
OlO\
OO\
l
,
const\

Vec3
&
lll\
llOll\
OO
,
co\
ns\
t
Vec3
&
lll\
llOl\
lOl\

)
{
return
Sqr\
t\

(
Fin\
dShortest\
D\
istanc\
eToLi\
ne\
Sqrd
(
lOOOOlO\
OOl
,
lllllOllOO\

,
llll\
lOll\
O\
l
)
)
;
}
bo\
ol
TAC_CAL\
L
Geome\
try
::
FindClo\
s\
estPoi\
ntO\
nLi\
ne\
UnClamped
(
const\

Vec3
&
lOOO\
OlOOOl
,
co\
ns\
t
Vec3
&
llll\
l\
O\
l\
l\
OO\

,
con\
st
Vec\
3
&
llll\
lOll\
Ol
,
Vec3\

&
lOll\
l\
lOOll
)
{
Vec\
3
lllllll\
OOO\

=
lllllOllOl
-
lll\
ll\
OllOO
;
flo\
at
lOlOl\
lOl\
O\
O
=
lll\
llllO\
OO
.
Dot
(
lOO\
OO\
lO\
OOl
-
ll\
l\
llOllOO
)
;
float
lOlOllO\
lO\
l
=
llll\
ll\
lOOO
.
Dot
(
lOOO\
O\
lOO\
Ol
-
lllllOllOl
)
;
TA_ASS\
ERT
(
lOlOll\
O\
lOO\

-
lOl\
O\
llOlO\
l
>
0.0f
)
;
float
lll\
Olll\
llO
=
lOlOll\
OlO\
O
/
(
lOlOl\
lO\
lOO
-
lOlOllOl\
Ol
)
;
if
(
lllO\
lllllO
<
0.0f
||
ll\
lOll\
ll\
l\
O
>
1.0f
)
re\
turn
false
;
lOl\
lllO\
Oll\

=
lllllOllOO
+
lllllll\
OOO
*
ll\
lOlllllO\

;
return\

true
;
}
bool
TAC\
_CALL\

Geom\
et\
ry
::
Test\
PointAg\
ainstC\
o\
ne\

(
co\
n\
s\
t
Vec\
3
&
lO\
O\
OOlOOOl
,
cons\
t
Vec3
&
llll\
l\
OllO\
O
,
co\
nst
Vec3\

&
lllllOllOl
,
fl\
oa\
t
llll\
lOOOOl
)
{
Vec3\

ll\
lllllOOO
=
lllllOl\
l\
Ol\

-
lllll\
OllO\
O\

;
fl\
oat\

lOlO\
llOlOO
=
lllllllOOO
.
Dot
(
lO\
OOOlOOOl\

-
lll\
llOllOO
)
;
fl\
oa\
t\

lO\
lOllOl\
Ol\

=
ll\
ll\
ll\
lOO\
O\

.
Dot
(
lOO\
O\
O\
l\
O\
OOl
-
lllll\
OllOl\

)
;
TA_AS\
SE\
RT
(
lOl\
O\
llOlOO
-
lOlOllOlOl
>
0.0f
)
;
fl\
o\
at
lllO\
lllllO
=
lO\
l\
OllOlOO
/
(
lOlO\
ll\
OlO\
O
-
lO\
lO\
ll\
OlOl
)
;
if
(
lll\
O\
l\
lll\
lO
<
0.0f
||
lll\
Oll\
lllO
>
1.0f
)
retur\
n
false\

;
Vec3
lOll\
llOO\
l\
l
=
lll\
llO\
l\
lO\
O\

+
lllllllOO\
O
*
lll\
OlllllO
;
floa\
t
llllll\
lOO\
l\

=
lll\
llOOOOl
*
lllO\
lllllO
;
ll\
ll\
lllOOl
*=
lllll\
llOOl
;
if\

(
(
lOllllOOl\
l
-
lOOO\
OlOO\
Ol
)
.
GetMag\
ni\
tu\
deS\
qrd
(
)
>
lllll\
llO\
Ol
)
return
fals\
e
;
ret\
ur\
n
true
;
}
}
