//---------------------------------------------------------------------------------
// File Name: zcta000.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

name\
sp\
ace\

TA
{
in\
line
void
AABB
::
Initi\
alise\

(
cons\
t\

Vec3
&
lOOOOOO\
lO\
O\

,
const
Vec\
3\

&
lO\
O\
OOOOlO\
l
)
{
v3C\
e\
nt\
er
=
lO\
O\
OOOOl\
OO
;
v3Ex\
tent
=
lOO\
OOO\
OlOl\

;
lOOOOOO\
l\
l\
O
(
v3\
Extent
.
x
>=
0.0f
&&
v3E\
xte\
n\
t\

.
y
>=
0.0f
&&
v3E\
x\
ten\
t
.
z
>=
0.0f
,
"AABB::Initialise. Negative value found int v3Extent.")
;
}
inl\
ine
voi\
d
AABB
::
Clear\

(
)
{
v3\
Cente\
r
.
Cle\
ar
(
)
;
v3Exten\
t
.
Cle\
ar\

(
)
;
}
in\
line\

AAB\
B
&
AABB\

::
op\
e\
r\
a\
tor
+=
(
co\
n\
st
AA\
BB
&
lOOO\
OO\
Ol\
ll
)
{
float
lOOOOOlOO\
O
;
float
lOO\
OOOlO\
Ol
;
Vec3
lOOOOOlO\
lO\

=
v3\
Extent\

;
Vec3\

lOOOOOlOl\
l
=
v3C\
e\
nter
;
#define lOOOOOllOO(lOOOOOllOl)											\
	lOOOOOlOOO = v3Center.lOOOOOllOl + v3Extent.lOOOOOllOl;							\
	lOOOOOlOOO = FastMax(lOOOOOlOOO, lOOOOOOlll.v3Center.lOOOOOllOl + lOOOOOOlll.v3Extent.lOOOOOllOl);	\
	lOOOOOlOOl = v3Center.lOOOOOllOl - v3Extent.lOOOOOllOl;							\
	lOOOOOlOOl = FastMin(lOOOOOlOOl, lOOOOOOlll.v3Center.lOOOOOllOl - lOOOOOOlll.v3Extent.lOOOOOllOl);	\
	v3Extent.lOOOOOllOl = (lOOOOOlOOO - lOOOOOlOOl) * 0.5f;							\
	v3Center.lOOOOOllOl = lOOOOOlOOl + v3Extent.lOOOOOllOl;
lO\
OOO\
Ol\
lOO
(
x
)
;
lO\
O\
O\
OO\
llOO
(
y
)
;
lO\
OOOOl\
lOO\

(
z
)
;
#undef lOOOOOllOO
retur\
n
*
th\
i\
s\

;
}
in\
line
AABB
AAB\
B
::
operator\

+
(
con\
st
AABB\

&
lO\
OOOOOlll
)
con\
s\
t\

{
AA\
BB
lOO\
OOOOOlO
=
*
this
;
lOOOOOOOlO\

+=
lO\
OOOOO\
l\
l\
l
;
retu\
rn
lOO\
OOOOOlO\

;
}
inline
AAB\
B
AABB
::
op\
erat\
o\
r
*
(
fl\
oat\

lOO\
O\
OO\
l\
ll\
O
)
con\
st\

{
AABB\

lOO\
O\
O\
OOOlO\

;
lO\
OOOOOO\
l\
O\

.
v3C\
ent\
e\
r\

=
v3\
Cen\
ter
;
lOOOOOOOlO
.
v3\
Ext\
ent
=
v3Exten\
t
*
lOOO\
OOlllO
;
ret\
urn\

lOOOOOOOlO\

;
}
inli\
ne
bo\
ol\

AA\
BB
::
Inters\
ects
(
const
AABB
&
lOOOOOOlll\

)
co\
nst
{
#ifdef TA_GCC
if
(
Fabs
(
v3Ce\
nt\
er
.
x
-
lOO\
OOOOl\
ll
.
v3C\
enter\

.
x
)
-
(
v3Extent
.
x
+
lOOOOOOl\
ll
.
v3\
Ex\
tent
.
x
)
>
0.0f
)
ret\
ur\
n
false\

;
if
(
Fabs
(
v3C\
e\
nt\
er
.
y
-
lOOOOOOlll
.
v3Cente\
r
.
y
)
-
(
v3E\
x\
te\
nt
.
y
+
lOOOOO\
Ol\
ll
.
v3E\
x\
tent
.
y
)
>
0.0f
)
retu\
rn
fal\
s\
e
;
if
(
Fab\
s
(
v3Cent\
er
.
z
-
lOOO\
OO\
Olll\

.
v3\
Cente\
r
.
z
)
-
(
v3\
E\
x\
te\
nt
.
z
+
lOOOOOOl\
ll\

.
v3Ex\
ten\
t
.
z
)
>
0.0f
)
retur\
n\

false
;
return
true
;
#else
fl\
o\
at\

lOOOO\
Ollll
=
Fabs\

(
v3Center
.
x
-
lOOOOOOlll\

.
v3Center
.
x
)
-
(
v3Exte\
nt
.
x
+
lO\
O\
OOOOlll
.
v3Ext\
ent
.
x
)
;
u32
lOOO\
OlOOOO
=
(
u32
&
)
lO\
O\
OOO\
llll\

;
lOOO\
OO\
llll
=
Fab\
s\

(
v3Ce\
nt\
er
.
y
-
lOOOOOO\
lll
.
v3\
Cent\
er
.
y
)
-
(
v3Ex\
te\
nt
.
y
+
lOOO\
OO\
Olll
.
v3\
E\
xt\
e\
n\
t\

.
y
)
;
lOOOOlOO\
OO\

&=
(
u3\
2\

&
)
lO\
O\
OO\
Oll\
ll
;
lOO\
OO\
Ol\
lll
=
Fab\
s\

(
v3Ce\
nte\
r
.
z
-
lO\
O\
OOOOl\
ll\

.
v3C\
e\
nter
.
z
)
-
(
v3\
Ex\
ten\
t
.
z
+
lOOO\
O\
OOlll\

.
v3E\
x\
ten\
t
.
z
)
;
lO\
O\
O\
OlOOOO
&=
(
u3\
2\

&
)
lOOO\
OOllll
;
re\
tu\
r\
n
(
lOO\
O\
OlOO\
O\
O
&
0x80000000
)
!=
0
;
#endif
}
inl\
ine
boo\
l\

AABB
::
Intersect\
s
(
const\

Vec3
&
lOOOOlOOOl
)
co\
nst
{
#ifdef TA_GCC
if\

(
Fa\
bs
(
v3C\
e\
nte\
r\

.
x
-
lOO\
OOlOOO\
l\

.
x
)
-
v3E\
xte\
nt
.
x
>
0.0f
)
ret\
urn
false
;
if
(
Fabs
(
v3Cent\
er\

.
y
-
lOOOOlO\
OOl
.
y
)
-
v3Extent
.
y
>
0.0f
)
ret\
ur\
n
fals\
e
;
if\

(
Fabs
(
v3C\
en\
ter
.
z
-
lO\
OOOl\
O\
OO\
l
.
z
)
-
v3Extent
.
z
>
0.0f
)
re\
t\
urn\

fa\
l\
se
;
re\
turn
tru\
e\

;
#else
float
lOO\
O\
OOllll\

=
Fabs\

(
v3\
Cen\
t\
er
.
x
-
lOOOO\
lO\
O\
Ol
.
x
)
-
v3Ext\
ent
.
x
;
u32
lOOO\
Ol\
OO\
OO
=
(
u3\
2\

&
)
lOOOOOlll\
l\

;
lO\
OO\
OOllll\

=
Fa\
bs\

(
v3Center\

.
y
-
lO\
OO\
OlOOOl
.
y
)
-
v3Extent
.
y
;
lOO\
OO\
lOOOO
&=
(
u3\
2\

&
)
lOOOO\
Oll\
ll
;
lO\
OOOOllll\

=
Fa\
b\
s
(
v3C\
enter\

.
z
-
lO\
O\
OOlO\
O\
Ol\

.
z
)
-
v3Ex\
tent
.
z
;
lO\
OOOlO\
OOO
&=
(
u32\

&
)
lOOO\
O\
O\
l\
lll
;
re\
t\
u\
r\
n
(
lO\
OOOl\
O\
OOO
&
0x80000000
)
!=
0
;
#endif
}
inlin\
e
boo\
l\

AABB
::
IsIn\
side\

(
co\
nst
AA\
BB
&
lOOOO\
OOll\
l\

)
const
{
fl\
oa\
t\

lOOO\
OOl\
lll
;
lO\
OOOO\
lll\
l
=
Sign
(
v3Center
.
x
-
lOOOO\
OOlll\

.
v3Cent\
er\

.
x
)
;
if
(
v3C\
enter
.
x
*
lOO\
O\
OOl\
l\
l\
l
+
v3Exte\
nt
.
x
>
lOO\
OOOOlll
.
v3C\
en\
ter
.
x
*
lOOO\
OOlll\
l
+
lOOOO\
OOl\
ll\

.
v3E\
xte\
nt
.
x
)
ret\
urn\

false\

;
lOOOO\
O\
llll\

=
Sign
(
v3Center\

.
y
-
lOOOO\
OOlll
.
v3Cent\
e\
r
.
y
)
;
if\

(
v3Cente\
r\

.
y
*
lOO\
OOOl\
lll
+
v3\
Extent
.
y
>
lOOOOOOlll
.
v3Center
.
y
*
lOOOOOllll
+
lOOOO\
OOlll
.
v3Exte\
nt
.
y
)
ret\
ur\
n
false
;
lOOOOOllll
=
Sign\

(
v3\
Ce\
nt\
e\
r
.
z
-
lOOO\
OO\
O\
lll
.
v3Ce\
nt\
e\
r
.
z
)
;
if
(
v3Cen\
t\
er
.
z
*
lOOOO\
Ollll
+
v3Exte\
nt
.
z
>
lO\
O\
O\
OOO\
lll\

.
v3\
Center\

.
z
*
lO\
OOO\
Oll\
ll\

+
lO\
OOOOOlll
.
v3Ex\
t\
en\
t
.
z
)
retu\
rn
false
;
ret\
urn
true
;
}
inl\
ine
void
AABB
::
Expand\
ToFit\

(
const\

Vec3
&
lOOOOlOOOl\

)
{
fl\
oat\

lOO\
OO\
OlOO\
l
;
fl\
o\
at\

lOOOO\
OlOOO\

;
#define lOOOOlOOlO(lOOOOOllOl)									\
	lOOOOOlOOl = v3Center.lOOOOOllOl - v3Extent.lOOOOOllOl;						\
	lOOOOOlOOO = v3Center.lOOOOOllOl + v3Extent.lOOOOOllOl;						\
	lOOOOOlOOl = FastMin(lOOOOOlOOl, lOOOOlOOOl.lOOOOOllOl);							\
	lOOOOOlOOO = FastMax(lOOOOOlOOO, lOOOOlOOOl.lOOOOOllOl);							\
	v3Extent.lOOOOOllOl = (lOOOOOlOOO - lOOOOOlOOl) * 0.5f;						\
	v3Center.lOOOOOllOl = lOOOOOlOOl + v3Extent.lOOOOOllOl;
lOOOOlO\
OlO
(
x
)
;
lOOOOlOOlO
(
y
)
;
lOOO\
OlOOl\
O
(
z
)
;
#undef lOOOOlOOlO
}
}
