//---------------------------------------------------------------------------------
// File Name: zpta006.cpp
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#ifdef lllOOOOlOlO
#include "../Physics/zpta004.h"
#ifndef TA_MFRAME_H
#include "../Common/MFrame.h"
#endif //
#ifndef TA_GEOMETRY_H
#include "../Common/Geometry.h"
#endif //
name\
space
TA\

{
void
lllOOO\
OlOl\
l
::
Initi\
a\
l\
i\
se\

(
const
Vec3
&
v3\
Center
,
con\
st
Vec\
3\

&
v3Extent
)
{
lllOOOOll\
O\
O
=
v3\
Center
;
lllO\
O\
OOllOl
=
v3Extent
;
}
vo\
id
lllO\
OOO\
lOll
::
Fin\
a\
lise\

(
)
{
lllOOOOllO\
O
.
Clear
(
)
;
lll\
OOO\
OllOl
.
Clear
(
)
;
}
stati\
c
bool\

lllOOOOlll\
O
(
con\
st\

Ve\
c3
&
llllO\
Ol\
lOl
,
co\
n\
st\

Ve\
c\
3\

&
llllOOlll\
O
,
const\

Ve\
c\
3
&
llll\
OOllll
,
const\

Vec3
&
llllOlOOOO
,
float\

&
lllOOO\
O\
l\
l\
ll
,
Vec3\

&
lOllllOO\
ll\

)
{
Ve\
c3
lllllOllOO\

=
ll\
l\
lOOlllO
-
llllOO\
llOl
;
in\
t\

llllOOlOll
[
3
]
;
lllllOl\
lOO\

.
GetAxi\
sOrde\
r
(
ll\
llOOlOll
)
;
TA_A\
SSER\
T
(
lll\
llOllOO
[
llllOOl\
O\
ll
[
1
]
]
==
0.0f
)
;
TA_ASSERT
(
ll\
l\
ll\
Ol\
l\
OO
[
ll\
l\
lOOl\
Oll\

[
2
]
]
==
0.0f
)
;
Vec2
lllOO\
OlOOOO\

(
llllOlOOOO
[
llllOO\
lOll\

[
1
]
]
-
lll\
lO\
Ollll
[
llllOO\
l\
Ol\
l
[
1
]
]
,
llllOl\
OOO\
O\

[
lll\
lO\
OlOll
[
2
]
]
-
lll\
lOOllll
[
llllO\
OlOll\

[
2
]
]
)
;
fl\
oat
ll\
lOOlOl\
ll
=
ll\
lO\
OOl\
OOO\
O
.
GetM\
agnitude\
Sqrd
(
)
;
if\

(
lll\
O\
OlO\
l\
ll
==
0.0f
)
retu\
rn
false
;
Vec2\

lllOO\
OlO\
OOl
(
llllO\
Ol\
lOl\

[
llllOOlOl\
l
[
1
]
]
-
lll\
lOOllll
[
llll\
OO\
lO\
ll
[
1
]
]
,
llllOO\
ll\
Ol
[
lll\
lOOl\
Oll
[
2
]
]
-
llllO\
Oll\
l\
l
[
llll\
OOl\
Oll
[
2
]
]
)
;
float
lOlll\
ll\
lO\
O
=
lll\
O\
OOlOOOO
.
Dot
(
ll\
lOOOlO\
O\
Ol\

)
/
lllO\
OlOlll
;
if
(
lOllllll\
OO
<
0.0f
||
lO\
lll\
lllOO
>
1.0f
)
retu\
rn
fal\
se
;
Vec3
lllO\
OO\
lOOlO
=
ll\
llOOllll\

+
(
llllOlOOOO
-
llllO\
O\
l\
lll\

)
*
lOllll\
ll\
OO\

;
if
(
(
lll\
OO\
OlO\
OlO
[
ll\
llOO\
lOll
[
0
]
]
<
llllO\
Ol\
l\
Ol
[
llll\
OOl\
Oll
[
0
]
]
&&
ll\
l\
OOOlOO\
lO
[
llllOO\
lO\
l\
l
[
0
]
]
<
llll\
O\
Oll\
lO
[
ll\
ll\
OOlOl\
l\

[
0
]
]
)
||
(
ll\
lOOOlOOl\
O
[
ll\
llOO\
lO\
ll
[
0
]
]
>
llll\
OOllOl
[
ll\
llOOlO\
ll
[
0
]
]
&&
lllOOOlO\
Ol\
O
[
ll\
llOOlOl\
l
[
0
]
]
>
llllOOl\
llO
[
lll\
lO\
OlOl\
l
[
0
]
]
)
)
retur\
n
fal\
s\
e
;
Vec3
ll\
lOOO\
l\
O\
Ol\
l
=
llllOOll\
Ol
;
lllOO\
Ol\
O\
Oll
[
llllO\
O\
lO\
l\
l
[
0
]
]
=
lllOOOlO\
OlO
[
llllOOl\
Oll
[
0
]
]
;
lll\
OOOOll\
l\
l
=
(
ll\
lOOO\
l\
OOlO\

-
ll\
lOO\
OlOO\
ll
)
.
GetMagn\
i\
t\
ud\
e
(
)
;
lOll\
llO\
O\
l\
l
=
lll\
OO\
OlOO\
lO
;
retur\
n
true
;
}
lllOOOOlOl\
l
::
lllOOO\
OlOll
(
)
:
Col\
li\
sionObje\
ctSim\
p\
le
(
Co\
l\
lisionO\
b\
ject
::
ll\
l\
OO\
OlOl\
OO
)
{
lll\
OO\
OOllOO
.
Cle\
ar\

(
)
;
lll\
OOOOll\
Ol
.
Clea\
r
(
)
;
}
lll\
O\
O\
O\
Ol\
Oll
::
~
lllOO\
OO\
lOll\

(
)
{
Finalis\
e\

(
)
;
}
}
#endif //
