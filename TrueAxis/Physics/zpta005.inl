//---------------------------------------------------------------------------------
// File Name: zpta005.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

if\

(
(
(
llOll\
l\
lOlll\

.
lO\
lOllOO\
ll\

&
Co\
llisi\
o\
n\

::
FLAG\
_\
F\
R\
ICT\
ION\

)
==
0
)
&&
(
lOOlOllOllOl\

||
!
lO\
OlO\
llOlllO
||
lOOlOllOllll\

<
0.0f
||
(
llOllllOlll
.
lOlO\
llO\
O\
ll\

&
Collisi\
on
::
FLA\
G_C\
ON\
STRA\
IN_IN_BO\
TH\
_\
DIR\
ECTIONS
)
)
)
{
if
(
(
ll\
OllllOlll
.
lO\
lO\
llOOll\

&
Coll\
ision
::
FLA\
G\
_\
ROTATION_C\
ONST\
RAINT
)
==
0
)
{
if\

(
!
lOO\
lOllOll\
Ol\

)
{
fl\
oa\
t\

lO\
O\
l\
Ol\
ll\
OO\
OO\

=
0.0f
;
if
(
!
lO\
OlOlllOOOl
)
{
#ifdef lOOlOlllOOlO
if
(
lO\
ll\
OOllOO\
O
.
w
==
0.0f
)
#endif
{
float
lO\
Ol\
OlllO\
Oll
=
lOOlOlllOlOO
(
(
Ve\
c\
3\

*
)
&
lOl\
lO\
Oll\
OOO
,
&
llO\
l\
l\
ll\
Olll\

.
lOOOOlllll
,
&
lOllOOOllOl
->
lO\
OlOlll\
OlOl
,
&
llOllllOl\
l\
l
.
lOOO\
lOO\
OOO
,
&
lOllOOOllOl
->
Ge\
tWo\
rldSpac\
eI\
nv\
er\
seI\
ne\
rt\
i\
a
(
)
,
lO\
llOOO\
l\
l\
O\
l
->
GetI\
nve\
rseMass
(
)
)
;
lOllOO\
ll\
O\
OO
.
w
=
lO\
Ol\
O\
l\
llOOll
;
}
lO\
OlOll\
lOOOO
+=
lOllOOll\
O\
OO
.
w
;
}
if
(
!
lOOlOlll\
OllO
)
{
#ifdef lOOlOlllOOlO
if\

(
lOllO\
Oll\
OOl\

.
w
==
0.0f
)
#endif
{
float\

lOOl\
OlllOlll
=
lO\
OlOlllOlOO
(
(
Ve\
c\
3
*
)
&
lOl\
l\
O\
OllOOl
,
&
llOl\
ll\
lO\
ll\
l
.
lO\
OO\
Ollll\
l
,
&
lO\
llOOOll\
lO
->
lOOl\
Olll\
O\
lO\
l
,
&
ll\
Ol\
lllOlll
.
lOOOl\
OOO\
OO
,
&
lOllOOOll\
l\
O
->
Ge\
tWorldS\
pac\
eInver\
se\
Inert\
ia
(
)
,
lOllOOOll\
lO
->
GetInvers\
eMass\

(
)
)
;
lOllOO\
llOOl\

.
w
=
lOO\
l\
Ol\
llOlll
;
}
lO\
OlOll\
l\
OO\
OO
+=
lOllOOllOO\
l
.
w
;
}
lOll\
OO\
l\
OlOO
=
lOOlOl\
lO\
ll\
l\
l
/
lOOlOl\
ll\
OOO\
O
;
}
if
(
!
lO\
OlOllO\
llOl
||
lOl\
lOO\
lOlOO
<
0.0f
||
(
ll\
O\
l\
lllOll\
l
.
lO\
lO\
llOOll
&
Collis\
ion
::
FLAG_CON\
S\
T\
R\
A\
IN_IN_BOTH\
_DI\
RECTIO\
N\
S
)
||
!
lO\
OlOllOlllO
)
{
lOllO\
OlOlOO
*=
lOOlOllllOOO
;
if
(
lOOlOllllOOl
)
llOl\
lllO\
lll
.
lOl\
lOOl\
OlOO
+=
Fa\
bs\

(
lO\
llO\
OlO\
l\
OO
)
;
if
(
!
lO\
O\
l\
OllOl\
lOl
)
{
if\

(
!
lOO\
lO\
lll\
OOO\
l
)
{
Vec\
3
lOOO\
Ol\
lOllO
=
(
Vec3
&
)
lOll\
OO\
l\
l\
OOO
;
#ifdef lOOlllllllO
lOO\
O\
Ol\
l\
O\
llO
.
lOlOOOO\
OOOl
=
0
;
#endif				
lO\
O\
l\
Ollll\
O\
l\
O\

(
&
lOll\
OOOllOl\

->
lO\
OlOllllO\
ll
,
&
llO\
l\
l\
llOlll
.
lO\
O\
O\
lOO\
OO\
O\

,
(
lO\
llOO\
O\
l\
lOl\

->
lOOlOl\
llllOO\

*
-
lOllOOlO\
lOO
)
)
;
lOO\
l\
O\
lll\
lO\
lO\

(
&
lO\
llOO\
O\
ll\
O\
l
->
lOOlOlllllOl
,
&
lOOOOl\
lOl\
lO
,
(
lOOlOlllll\
lO
*
-
lOllOO\
lOlO\
O
)
)
;
lO\
ll\
OO\
Ol\
lOl
->
lOO\
l\
Ollll\
lll
(
Fabs
(
lO\
llOOlOlOO
)
)
;
}
if\

(
!
lOOlOll\
lOllO\

)
{
Ve\
c3
lOOO\
O\
llOllO
=
(
Vec3
&
)
lO\
ll\
OOll\
OOl
;
#ifdef lOOlllllllO
lOOOOllOll\
O
.
lOlOO\
OOOOOl\

=
0
;
#endif				
lOOlOllll\
O\
lO\

(
&
lOll\
O\
OO\
lllO
->
lOOlOl\
l\
l\
lOll
,
&
llOl\
l\
llO\
l\
ll\

.
lOOOlO\
OOOO
,
(
lO\
ll\
O\
OOlllO
->
lOO\
l\
Olllll\
OO
*
lO\
ll\
O\
O\
lO\
lO\
O
)
)
;
lOOlO\
llllOlO
(
&
lOll\
OOOlllO\

->
lOO\
lOll\
lllO\
l
,
&
lOO\
OOll\
Ol\
lO
,
(
lOOlOlllll\
lO
*
lOl\
lOO\
l\
OlOO
)
)
;
lOllOOOlll\
O\

->
lOOl\
Ol\
l\
ll\
lll
(
Fabs
(
lOl\
l\
O\
OlOl\
O\
O
)
)
;
}
}
if
(
lOOlO\
llOlllO
)
{
if
(
lO\
Ol\
lO\
OOO\
OOO
||
(
llOlll\
l\
Ol\
l\
l
.
lOl\
Oll\
OOll
&
Collisio\
n\

::
FL\
AG\
_NO_\
FRI\
C\
T\
ION
)
!=
0
||
lO\
llOOlOlOO
>
-
lO\
OllO\
OOO\
OO\
l
*
Min\

(
lOllOOOl\
lOl
->
lOl\
O\
lOlOl\
OO
,
lOllO\
OO\
lllO
->
lO\
l\
Ol\
OlOl\
O\
O\

)
)
{
re\
tu\
rn
lOOl\
lOOOOOlO
;
}
}
float
lOOll\
OO\
OOOll\

=
Min
(
lOllOO\
Ol\
lOl
->
lOOl\
l\
OOO\
O\
lOO\

(
)
,
lOll\
OOOll\
lO\

->
lOOll\
O\
O\
OOlOO
(
)
)
;
Vec3\

lO\
OllOOOOl\
Ol
;
lOO\
llOO\
OOllO\

(
&
lOO\
l\
lOO\
OO\
lOl
,
&
llO\
l\
lll\
Olll\

.
lOOOOl\
l\
ll\
l
,
&
lOll\
O\
OOll\
Ol
->
GetLin\
ear\
V\
el\
o\
cit\
y
(
)
,
&
lOl\
l\
O\
OOl\
lOl
->
GetAngular\
Ve\
l\
oc\
it\
y
(
)
,
&
lOll\
OOOllOl\

->
GetCe\
nt\
e\
rO\
fMass\

(
)
,
&
lOllOOOll\
lO
->
Get\
LinearVelocity
(
)
,
&
lOl\
lOO\
Ol\
l\
lO\

->
GetA\
ngu\
lar\
V\
elocity
(
)
,
&
lOllOOOll\
l\
O\

->
GetC\
enter\
Of\
Ma\
ss
(
)
)
;
lOOll\
OOOOlO\
l
-=
llO\
l\
lll\
Oll\
l
.
lOOOl\
OO\
OOO\

*
llOlll\
lO\
lll\

.
lOOOlOOOO\
O
.
Do\
t
(
lOOll\
OOO\
OlOl
)
;
fl\
o\
at
lO\
OllOO\
O\
Olll\

=
lO\
O\
ll\
OOO\
Ol\
O\
l\

.
Get\
Magni\
tude
(
)
;
if\

(
lOOllOOOO\
ll\
l
<
0.001f
*
lOOllOOOOOll
)
{
ll\
O\
l\
ll\
lOlll\

.
lO\
lO\
ll\
O\
O\
l\
l\

|=
Col\
l\
is\
ion
::
FLAG_FRIC\
TION_GENERATING\
_IMPULS\
E2
;
lOOllOOOlOOO
(
)
;
retur\
n
lOOllOOOO\
OlO\

;
}
Vec\
3
lOOllOOOl\
OOl\

=
lO\
OllOO\
OOl\
O\
l
/
lO\
OllOO\
OOlll\

;
Vec\
3\

lOOllOOOl\
OlO\

;
Ve\
c3
lO\
OllOO\
O\
lOll
;
float
lOO\
lO\
l\
llOOO\
O
=
0.0f
;
if
(
!
lOOlOlll\
OOOl\

)
{
lO\
OlOl\
llOOOO
=
lOOl\
Ol\
ll\
O\
l\
O\
O
(
&
lOOllO\
OOlOlO
,
&
ll\
OllllOll\
l
.
lOOOOlllll
,
&
lOllOOOl\
lOl
->
lOOl\
Ol\
l\
l\
OlO\
l
,
&
lOO\
llOO\
O\
l\
OOl
,
&
lOllO\
O\
Ol\
lOl
->
Get\
WorldSp\
aceInv\
er\
seI\
ner\
t\
ia
(
)
,
lOllOOOl\
l\
O\
l\

->
GetInver\
s\
eMass
(
)
)
;
}
if\

(
!
lO\
OlOlllOll\
O
)
{
lOOlO\
lllO\
OOO
+=
lOOlO\
l\
l\
lOlOO
(
&
lOOllOOOlOl\
l\

,
&
llOllll\
O\
l\
ll
.
lOO\
O\
Olllll\

,
&
lO\
llOOOlllO\

->
lOO\
lOlllO\
lOl\

,
&
lOOllO\
O\
O\
lOOl
,
&
lOllO\
OOlllO\

->
Ge\
tWo\
rld\
Spac\
eInverse\
In\
ert\
ia
(
)
,
lOllOOOlllO
->
Ge\
tIn\
ver\
seMass
(
)
)
;
}
TA_AS\
S\
ERT\

(
lOOlO\
ll\
lOOOO\

!=
0
)
;
floa\
t
lO\
OllOOO\
l\
lOO
=
lO\
O\
llOOOO\
lll\

/
lO\
O\
lO\
lllOOOO
;
if\

(
lOOlO\
llOl\
llO
&&
(
ll\
OllllOl\
ll
.
lOl\
O\
llOOll
&
Co\
l\
lision
::
FLA\
G_\
FR\
ICT\
I\
ON_\
G\
ENERATING_IM\
P\
ULS\
E
)
==
0
&&
(
(
llOlll\
lO\
lll
.
lOlOl\
lOOll\

&
Coll\
ision
::
FLAG_F\
RICTI\
ON_GENER\
AT\
IN\
G\
_IMPULS\
E\
2\

)
==
0
||
lOOllOOOO\
ll\
l
>
1.0f
*
lOOllOOOOOll
)
)
{
TA_\
ASSERT\

(
lO\
l\
lOOlOl\
OO
<
0.0f
)
;
float
lOOll\
O\
O\
Ol\
lOl\

=
-
lOllOOlOlOO
*
ll\
Ol\
l\
ll\
Olll\

.
lOll\
OOlO\
l\
lO
;
if
(
lOOl\
lOOOllOO\

>
lOOllOO\
O\
l\
lOl
)
{
lOOll\
OOO\
l\
lOO
=
lO\
OllOOOllOl
;
}
el\
se
{
llOll\
llOlll
.
lOl\
OllOOll
|=
Coll\
ision
::
FLAG_\
FRI\
CTIO\
N_G\
E\
NERAT\
ING_IM\
PULSE2
;
lO\
Ol\
lOOO\
l\
OOO
(
)
;
}
}
TA_ASSERT\

(
Fl\
o\
a\
tIs\
OK\

(
lOOllO\
OOllOO
)
)
;
lO\
OllOOOllOO
*=
lOO\
llOOOlllO\

;
if
(
!
lO\
O\
lOlllO\
OOl
)
{
lO\
O\
lOllllOlO
(
&
lO\
llO\
OOllO\
l
->
lOO\
lOll\
llOll
,
&
lOO\
l\
l\
OOOl\
O\
Ol
,
(
lOllO\
OOll\
Ol
->
lOOlOlll\
llOO\

*
-
lOOl\
lO\
OOllOO
)
)
;
lOOlO\
llllOlO\

(
&
lOllOOOllOl
->
lOOlOlllllOl\

,
&
lO\
Ol\
l\
OOOlOlO\

,
(
lO\
OlOll\
ll\
llO
*
-
lO\
O\
ll\
OO\
O\
llOO
)
)
;
lOll\
O\
O\
O\
llO\
l
->
lO\
O\
lOll\
l\
llll\

(
Fa\
bs\

(
lOO\
llOO\
Oll\
O\
O
)
)
;
}
if
(
!
lO\
OlOll\
lO\
l\
l\
O
)
{
lOOlOllllO\
l\
O
(
&
lOl\
l\
OOOlllO\

->
lOOl\
Ollll\
Oll\

,
&
lOO\
llOOO\
lOOl
,
(
lO\
ll\
OO\
Oll\
lO
->
lOOlOlllllOO
*
lOOllOOOllO\
O
)
)
;
lO\
OlOllll\
Ol\
O
(
&
lO\
llOO\
O\
lll\
O
->
lOO\
lOlllllOl
,
&
lOOllO\
OOlOll
,
(
lOO\
l\
Ol\
lllll\
O
*
lO\
O\
llOOOll\
OO\

)
)
;
lO\
l\
lO\
O\
Oll\
lO
->
lO\
OlOllll\
ll\
l
(
Fabs
(
lOOllOOOl\
lOO
)
)
;
}
}
}
else
{
if\

(
lO\
OlOllOllOl\

)
{
re\
turn
lO\
OllOOOOOl\
O
;
}
fl\
oat
lOOlOlll\
OO\
O\
O
=
0
;
{
if\

(
!
lOOlOl\
llOOOl
)
{
co\
nst
Vec3\

lOOl\
l\
OOOll\
ll
=
lOllOOOll\
Ol
->
lOO\
lOlllO\
lOl
-
ll\
Oll\
llOlll
.
lOOOOll\
ll\
l
;
Vec3
lOOOOllOllO
=
llOlll\
lOlll\

.
lO\
OOl\
O\
OOO\
O
.
Cr\
o\
ss
(
lO\
OllO\
O\
Ollll
)
*
llO\
llll\
Ol\
l\
l\

.
lOll\
O\
OOll\
Ol
->
GetWo\
rldS\
pace\
I\
nverseI\
ne\
rti\
a
(
)
;
lOO\
lO\
lllO\
OO\
O\

+=
-
llOllllOll\
l
.
lOOOlOOOOO
.
Do\
t
(
lOOO\
O\
ll\
Ol\
lO\

.
Cross\

(
lOOl\
lOOO\
llll
)
)
;
}
if
(
!
lOO\
lOll\
lOll\
O
)
{
co\
ns\
t
Vec3\

lOOllO\
OlOOO\
O\

=
lOll\
OO\
O\
lllO
->
lO\
OlOlllOlOl
-
llO\
ll\
llOl\
ll
.
lOOOO\
lllll
;
Vec3
lOOOOl\
lOl\
lO
=
llOl\
l\
ll\
Oll\
l
.
lOOOl\
OO\
OOO\

.
Cross\

(
lOOllOO\
lOOO\
O
)
*
lO\
l\
lOO\
Oll\
lO
->
Ge\
tWo\
rldSpa\
c\
eInver\
seInert\
ia
(
)
;
lOOlOll\
lO\
OOO
+=
-
ll\
Ollll\
Olll
.
lOOOl\
OOO\
OO\

.
Dot\

(
lOOOOllOll\
O
.
Cro\
ss
(
lO\
O\
l\
lOO\
lOOOO
)
)
;
}
}
flo\
at\

lOl\
lOOlO\
lO\
O
=
lOOlOll\
Ol\
lll
/
lOOlOlll\
OOO\
O
;
if\

(
lOll\
OOlOlOO
<
0.0f
||
(
ll\
O\
llllOlll
.
lO\
lO\
llOOll\

&
Co\
ll\
isio\
n\

::
FLAG_\
CO\
NSTRA\
IN\
_I\
N_\
BOTH_DI\
R\
EC\
TIONS\

)
)
{
lOllOOlO\
lOO
=
-
lO\
l\
lOO\
l\
Ol\
OO
;
llOllllOlll\

.
lOllOOlOlOO
+=
lOll\
OOlOl\
OO
;
lO\
l\
lOOlOlO\
O
=
-
lO\
llO\
Ol\
O\
lOO
;
if
(
!
lOOlOlllO\
O\
Ol\

)
{
lOl\
lOOO\
l\
lO\
l
->
lO\
OlO\
l\
l\
lllO\
l\

-=
(
llOll\
l\
l\
Oll\
l
.
lOOOl\
OOOO\
O
*
lO\
llOO\
lO\
lOO
)
.
Cross
(
lOllOOOllOl
->
Ge\
t\
C\
enter\
OfMass
(
)
-
llOll\
ll\
Olll\

.
lOOOO\
ll\
l\
ll
)
*
lOllOOOllOl\

->
GetWorl\
d\
SpaceInvers\
e\
Ine\
r\
tia
(
)
;
}
if
(
!
lOOlOll\
l\
OllO
)
{
lOl\
lO\
OOlll\
O\

->
lOOlOlllllOl\

+=
(
ll\
Oll\
llOlll
.
lO\
OOlOOOOO\

*
lOll\
OO\
l\
OlOO
)
.
Cros\
s
(
lO\
ll\
OO\
Oll\
lO
->
GetCe\
nterO\
fMa\
ss
(
)
-
llO\
llllOlll
.
lOO\
OOllll\
l
)
*
lOll\
OO\
Oll\
lO\

->
Ge\
t\
Wor\
l\
dSpaceI\
n\
verseInerti\
a
(
)
;
}
}
}
}
