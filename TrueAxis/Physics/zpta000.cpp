//---------------------------------------------------------------------------------
// File Name: zpta000.cpp
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#include "CarTemplate.h"
#ifndef TA_GEOMETRY_H
#include "../Common/Geometry.h"
#endif //
#ifndef TA_COLLISIONOBJECTCOMBO_H
#include "CollisionObjectCombo.h"
#endif //
#ifndef TA_COLLISIONOBJECTLINELIST_H
#include "CollisionObjectLineList.h"
#endif //
#ifndef TA_COLLISIONOBJECTCAPSULE_H
#include "CollisionObjectCapsule.h"
#endif //
#ifndef TA_COLLISIONOBJECTCONVEX_H
#include "CollisionObjectConvex.h"
#endif //
#ifndef lOlOlOOOOll
#include "CollisionObjectCylinder.h"
#endif //
#ifndef TA_COLLISIONOBJECTSPHERE_H
#include "CollisionObjectSphere.h"
#endif //
namespace
TA\

{
Ca\
r\
T\
em\
p\
l\
ate
::
Wheel\

::
Whe\
el
(
)
{
Clear
(
)
;
}
void\

Ca\
rTemp\
late
::
Wheel\

::
Cle\
ar
(
)
{
lO\
lOl\
O\
OO\
l\
OO\

.
lOlOlOOO\
lOl
=
false\

;
lOlOlOO\
OlOO
.
lO\
lOlO\
OOllO\

=
false
;
lOl\
O\
lOOO\
l\
OO
.
lOlO\
lOOOlll
=
fals\
e\

;
lOlOlOOlOOO
=
k_v3UnitZ
;
lOlO\
l\
O\
O\
lOOl
=
-
k_v3U\
ni\
tY\

;
lOlOlOOlO\
lO
=
0.35f
;
lOl\
OlOOlOll\

=
4.1f
;
lO\
lOlOO\
ll\
OO
=
4000.0f
;
lO\
lOlOOllOl\

=
0.0f
;
lOlO\
l\
O\
O\
lllO
=
40000.0f
;
lO\
lOl\
OO\
llll
=
9000.0f
;
lOlO\
lOlOOOO\

=
Standa\
rdSlipRa\
t\
io\
ToNo\
rmalisedTrac\
tion
;
lO\
lOl\
O\
lOOOl
=
Stan\
d\
ardSlipAngleToL\
at\
eralForce
;
}
void
Ca\
rT\
em\
plate
::
Be\
g\
in\
In\
itia\
lis\
e\

(
)
{
if
(
lOlOlOlOOl\
O
)
{
lOOOll\
lOlO
(
0
,
"CarTemplate::BeginInitialise. Already Initialised")
;
Fi\
nali\
se\

(
)
;
}
lOOOO\
OO\
llO
(
!
lOl\
OlOlO\
Oll
,
"CarTemplate::BeginInitialise. Already called CarTemplate::BeginInitialise, waiting for CarTemplate::EndInitialise.")
;
lOlOlO\
lOO\
l\
O
=
Col\
lisionO\
b\
jectC\
om\
b\
o
::
Cr\
e\
a\
t\
eNew
(
)
;
lO\
l\
OlOlO\
O\
l\
O
->
Initial\
ise
(
)
;
lOl\
OlOlOOll
=
tru\
e
;
lOl\
OlOlOl\
O\
O
=
1500.0f
;
lOlOlOlOl\
Ol\

=
1.0f
;
lOl\
OlOl\
Oll\
O
=
Sta\
n\
da\
rdTorqu\
eCurv\
e
;
lOlOlOlOlll\

=
0.7f
;
lO\
lOlO\
ll\
OOO\

.
Initiali\
se
(
7
,
7
)
;
lO\
lOl\
O\
llOOO\

[
0
]
=
-
2.9f
;
lOlOlOllOOO
[
1
]
=
2.66f
;
lO\
l\
O\
lOllO\
OO\

[
2
]
=
1.78f
;
lOlOlOllO\
OO
[
3
]
=
1.3f
;
lOlOlOllOOO
[
4
]
=
1.0f
;
lOlOlOllO\
O\
O
[
5
]
=
0.74f
;
lOlOlOllOOO
[
6
]
=
0.5f
;
lO\
l\
OlOllOOl
=
4.4f
;
lOlOlOllO\
l\
O
=
0.3f
*
2.2f
*
1.29f
;
lOlOlOl\
lOll\

=
4.0f
;
lOl\
OlOlll\
O\
O\

=
0.0f
;
}
vo\
id\

CarT\
empl\
a\
te\

::
EndI\
nitialise
(
)
{
if
(
!
lOlOl\
Ol\
OOll\

)
{
lOO\
OO\
OO\
llO
(
!
lOl\
OlOlOOll
,
"CarTemplate::EndInitialise. No call to CarTemplate::BeginInitialise was made.")
;
return
;
}
int
lOlOlOll\
lOl\

=
lOlOlO\
l\
ll\
lO\

.
lOO\
Ol\
llOO\
l
(
)
;
if
(
lOlOlOl\
llOl
>
0
)
{
lOOOOlOllO
<
Vec3\

,
false
>
lOllO\
lO\
O\
O\
O
;
lOl\
l\
OlOOOO
.
Init\
iali\
se
(
lOlOlOlllOl
*
2
,
lOlOlOll\
lOl
*
2
)
;
List
<
Wheel
>
::
lOOO\
O\
OlO\
Oll\

lO\
lOOlOOlO\

=
lOlOlOll\
llO
.
lO\
OOO\
O\
llOO\
O
(
)
;
for\

(
int
lOl\
OlOlllll
=
0
;
!
lOlOOl\
OOlO\

.
AtEn\
d
(
)
;
++
lOlOO\
lOOl\
O\

,
++
lO\
l\
OlOllll\
l
)
{
const
Whe\
el
&
lOl\
Oll\
OOOOO
=
*
lOlOO\
l\
O\
OlO
;
lOllOlOOOO\

[
lOlO\
lOlllll
*
2
]
=
lOlOl\
lOOOOO
.
GetSu\
sp\
e\
nsionT\
op\

(
)
;
lOl\
lO\
lOOOO\

[
lOlO\
lOlllll
*
2
+
1
]
=
lOlOllOOOOO\

.
GetSusp\
e\
nsio\
n\
Bottom
(
)
;
}
Colli\
si\
onObjectL\
i\
n\
eLi\
st
*
lO\
lO\
l\
lO\
OOO\
l
=
Collis\
ion\
Ob\
je\
ctL\
ineLi\
st
::
Cr\
e\
ateNew
(
)
;
lOlOllOOOOl\

->
Ini\
t\
iali\
se\

(
&
lOllOl\
O\
OO\
O
[
0
]
,
lO\
lOl\
OlllOl
)
;
lOlOlO\
l\
OOlO
->
Ad\
dC\
ol\
l\
isi\
o\
nObjec\
t
(
lOlOllOOOOl\

)
;
lO\
lOllOOOO\
l
->
Rel\
ea\
se
(
)
;
lO\
lO\
ll\
OO\
OOl\

=
0
;
lO\
llOlOOOO
.
Fi\
n\
a\
l\
i\
se\

(
)
;
}
}
void
Car\
Templat\
e
::
Finali\
s\
e
(
)
{
lOlOlOlOOll
=
false
;
lOlOlO\
lll\
lO
.
Clea\
r
(
)
;
if
(
lOlOlOlOOlO
)
{
lOlOlO\
l\
OO\
lO
->
Rele\
ase
(
)
;
lOlOlOlO\
Ol\
O
=
0
;
}
lOl\
OllOOOlO
(
)
;
}
void
CarTemplate
::
AddColl\
i\
si\
onObje\
c\
t
(
Coll\
is\
io\
nObj\
ectConvex
*
lOlOllOOOll
)
{
lOOOO\
OOl\
lO\

(
lOl\
Ol\
OlOO\
ll\

,
"CarTemplate::AddCollisionObject. Only allowed between calls to BeginInitialise and EndInitialise")
;
if
(
lO\
lO\
l\
O\
l\
OOll
)
{
TA_ASS\
E\
R\
T
(
lO\
l\
OlO\
lO\
Ol\
O\

)
;
lOlOlOl\
OOl\
O
->
AddC\
ollis\
ionObj\
ect
(
lOlOllOOOll
)
;
}
}
void
CarTe\
mp\
lat\
e
::
AddC\
o\
llisionObje\
ct
(
Collision\
O\
bject\
Capsule
*
lOlOllOO\
Oll
)
{
lOO\
OO\
OOl\
lO
(
lOl\
OlO\
lOO\
ll
,
"CarTemplate::AddCollisionObject. Only allowed between calls to BeginInitialise and EndInitialise")
;
if
(
lOlOlOlOOll\

)
lOlOlOlO\
OlO
->
AddCollis\
i\
on\
Ob\
j\
ec\
t
(
lOlOllO\
O\
Oll\

)
;
}
void
CarTe\
m\
p\
l\
ate
::
AddC\
ol\
li\
sio\
nObject\

(
Co\
l\
li\
si\
o\
nObje\
ctCylind\
er
*
lO\
l\
Oll\
O\
OOl\
l
)
{
lOOOOOOll\
O
(
lO\
lOl\
OlOOl\
l
,
"CarTemplate::AddCollisionObject. Only allowed between calls to BeginInitialise and EndInitialise")
;
if
(
lOlOlO\
lOOl\
l
)
lOl\
Ol\
OlOOl\
O
->
Ad\
dCollis\
ionO\
bj\
ec\
t\

(
lOlO\
llOOOl\
l
)
;
}
void
Ca\
rTemp\
la\
t\
e
::
AddCollision\
Object\

(
CollisionO\
bje\
c\
t\
S\
phere
*
lOlO\
llOOOll\

)
{
lOO\
O\
OO\
Oll\
O
(
lOlOlO\
l\
O\
O\
l\
l
,
"CarTemplate::AddCollisionObject. Only allowed between calls to BeginInitialise and EndInitialise")
;
if\

(
lOlOlOlOOl\
l\

)
lOlOlOlOOlO
->
Add\
Col\
lis\
ionObject
(
lOlO\
llOOO\
ll\

)
;
}
vo\
id
Ca\
rT\
emplate\

::
Add\
Wh\
e\
el\

(
const
Whee\
l\

&
lOlOllOOOOO\

)
{
lOOOOOOllO\

(
lOlOlOlO\
Oll\

,
"CarTemplate::AddCollisionObject. Only allowed between calls to BeginInitialise and EndInitialise")
;
if
(
lOlOlO\
lO\
Ol\
l\

)
lOlOlOl\
lll\
O
.
lOOOlllOO\
O\

(
lOlOll\
OOOOO
)
;
}
voi\
d
Car\
T\
em\
p\
l\
at\
e
::
SetO\
rien\
tatio\
n
(
co\
ns\
t
Vec3
&
lOlOll\
OOlOO
,
const
Ve\
c3
&
lOlO\
l\
l\
OOl\
Ol
)
{
lOO\
OOOOllO
(
lOlOllOO\
lO\
O
.
IsN\
orm\
al\
i\
sed
(
)
,
"CarTemplate::SetOrientation. v3Forward must be normalised.")
;
lO\
OO\
OOOl\
lO\

(
lO\
lOll\
O\
O\
lOl
.
IsNormalised
(
)
,
"CarTemplate::SetOrientation. v3Up must be normalised")
;
lOOOOOO\
ll\
O\

(
lOlO\
ll\
OOlOO
.
Cros\
s\

(
lOlOll\
O\
OlOl
)
.
IsNormalis\
ed\

(
)
,
" CarTemplate::SetOrientation. v3Forward and v3Up must be orthogonal.")
;
lOlOllO\
OllO
=
lOl\
Oll\
OOlOO
;
lOl\
Ol\
lOOlll
=
lOl\
O\
l\
lOO\
lOl
;
}
void
CarTemplate\

::
Se\
t\
NumG\
ears
(
int
lOlOllOlOOO
)
{
wh\
i\
l\
e
(
lOlOl\
OllOOO\

.
lO\
OOll\
lOO\
l
(
)
>
lOlOll\
OlO\
OO
)
lOlOlO\
l\
lOOO
.
lO\
Ol\
llllll
(
lOl\
OlO\
llO\
OO
.
lOO\
Ol\
llOO\
l\

(
)
-
1
)
;
}
CarT\
emplate
*
TAC_CALL\

Car\
Template
::
Cre\
at\
eNe\
w
(
)
{
Car\
T\
em\
pla\
te\

*
lO\
lOl\
lOlOO\
l
;
lOO\
OOOll\
OlO
(
lO\
lO\
llOlOOl
,
Ca\
rTemp\
late
)
;
return
lOlOl\
l\
OlOOl\

;
}
floa\
t
CarTe\
mplate\

::
Stand\
ardT\
orqueCurve
(
flo\
at\

lOlOllOl\
OlO
)
{
flo\
at
lOl\
O\
l\
lO\
lO\
l\
l
=
lOl\
OllOlOlO\

*
60.0f
/
(
2.0f
*
k_fP\
i
)
;
if
(
lOlOll\
O\
l\
Ol\
l
<
0.0f
)
lOl\
Oll\
OlOl\
l\

=
0.0f
;
if
(
lOl\
Oll\
OlOl\
l
>
9000.0f
)
lOlOllOlOll
=
9000.0f
;
flo\
at
ll\
lOOllO\
Ol
=
(
lOlO\
llOlO\
l\
l
*
(
0.22f
*
0.001f
)
)
;
lllO\
OllOOl
*=
lllOOll\
OOl\

;
ll\
l\
OO\
l\
lOOl\

-=
0.9f
;
lllOO\
ll\
OOl
*=
lllO\
OllOOl
;
return\

(
4.75f
-
lllO\
OllO\
Ol
)
*
100.0f
;
}
flo\
at
TAC_C\
ALL
Ca\
rT\
e\
mp\
la\
t\
e\

::
Sta\
n\
da\
r\
dSl\
ipRati\
oT\
oN\
ormalise\
dTr\
ac\
t\
i\
on
(
flo\
at
lOl\
OllOllOO\

,
co\
nst
Surfa\
ceAttr\
i\
bute
&
lOlOllOllOl
)
{
cons\
t
float
lOlOl\
lO\
l\
llO
=
7.0f
;
const
float
lOlO\
llOllll
=
-
0.2f
;
const
float
lOlO\
l\
llO\
O\
OO
=
1.2f
;
cons\
t
flo\
at\

lOlOlll\
OOOl
=
0.12f
;
con\
st
float\

lOl\
OlllOO\
lO
=
0.25f
;
co\
ns\
t
flo\
at
lOlOll\
lOOll
=
lOl\
Ol\
l\
OlllO
*
lOlOlllO\
OOl
;
co\
ns\
t
float
lO\
lOlllOlOO
=
lOlOllO\
llll
*
lOl\
O\
lllOOl\
O\

+
lOlOlllOO\
O\
O\

;
con\
st
float
lOlOlllO\
l\
Ol
=
1.0f
/
(
lO\
l\
O\
lll\
O\
OlO
-
lOl\
Ol\
llOOOl
)
;
con\
st\

float
lOlOll\
l\
OllO
=
lO\
lOl\
l\
Oll\
lO
*
(
lOlOlll\
OOlO\

-
lO\
lOl\
llOOO\
l
)
;
co\
ns\
t\

float
lOlOll\
lOll\
l
=
lOl\
Oll\
O\
llll\

*
(
lOlOll\
l\
O\
O\
lO\

-
lOlOl\
llOOOl
)
;
fl\
oat
lO\
OO\
OOl\
lll
=
Si\
g\
n
(
lOlOll\
OllOO\

)
;
lOlO\
l\
l\
Ol\
lOO
*=
lO\
O\
OOO\
l\
l\
l\
l
;
lOOO\
O\
Olll\
l
*=
8.0f
;
if
(
lOlOl\
l\
O\
llOO\

<
lOl\
OlllOOOl
)
{
return
lOOOO\
Ol\
lll
*
lOl\
OllOl\
llO
*
lOl\
Ol\
lOllO\
O
;
}
else
if\

(
lO\
lOl\
l\
Ol\
lOO
<
lOlO\
lllOOl\
O
)
{
return
lOO\
O\
OOllll\

*
Geomet\
ry
::
Cu\
bi\
cIn\
ter\
polate\

(
lOlOlllO\
Oll
,
lO\
lOll\
lO\
lOO\

,
lOlOlllOllO
,
lO\
l\
Oll\
lOll\
l
,
(
lOlOl\
l\
Ol\
l\
O\
O
-
lOl\
O\
lllOOOl
)
*
lOl\
Ol\
llOlOl
)
;
}
else
{
float
lOO\
OlOOllO
=
lO\
lO\
llO\
ll\
ll
*
lOlOl\
lOllOO
+
lO\
l\
OlllOO\
OO
;
if
(
lOO\
OlOO\
l\
lO
<
0.0f
)
lOOOl\
OO\
llO\

=
0.0f
;
return
lOOOOO\
ll\
ll\

*
lOOO\
lO\
Oll\
O
;
}
}
fl\
o\
a\
t
TAC\
_CAL\
L
CarTempl\
ate
::
Standar\
dSli\
pAngleToLat\
eralForc\
e
(
float
lOlOl\
lllOOO
,
fl\
oat
lOlOll\
ll\
OOl
,
co\
n\
st
Surfac\
eA\
tt\
ribut\
e
&
lOlOll\
OllOl
)
{
con\
s\
t
float\

lOl\
OllOlllO\

=
14.0f
;
const
flo\
at
lOl\
Ol\
lO\
lll\
l\

=
-
0.1f
;
co\
ns\
t
floa\
t
lO\
l\
Oll\
lO\
OO\
O
=
2.0f
;
const
float
lOlOll\
lOOOl
=
0.08f
;
con\
st\

fl\
oat
lOl\
OlllOOlO
=
0.27f
;
cons\
t
flo\
at\

lOl\
Ol\
l\
lOO\
l\
l
=
lO\
lOl\
lO\
lllO
*
lO\
lO\
lllOO\
Ol
;
co\
nst
float
lOlO\
lllOl\
OO
=
lOl\
OllO\
llll
*
lOlOlllOOlO\

+
lOlO\
lllOO\
OO
;
co\
nst
fl\
oat\

lO\
lOlllOlO\
l
=
1.0f
/
(
lO\
lOll\
lOOlO\

-
lOlOlll\
O\
OOl\

)
;
con\
st
float
lO\
lOlllOll\
O
=
lOlOllOlllO
*
(
lOlOlll\
OOlO\

-
lOl\
OlllOOOl\

)
;
con\
st
float
lOl\
Ol\
ll\
Olll
=
lOlOllOllll
*
(
lOl\
OlllOOlO
-
lOlOl\
ll\
OO\
Ol\

)
;
fl\
oat
lOO\
O\
OOllll
=
Sign
(
lOlOlll\
lO\
OO
)
;
lOlOllllOOO
*=
lOOO\
O\
Ollll
;
flo\
at\

lOlOl\
lllOlO
;
if
(
lOlOl\
ll\
lO\
OO
<
lOlOlll\
OO\
Ol
)
{
lOlOllllOl\
O
=
lOOOO\
Ol\
lll
*
lOlOllOlllO
*
lOl\
OllllOOO
;
}
else\

if
(
lOl\
Ol\
ll\
lOOO\

<
lOlOlllO\
O\
lO
)
{
lOl\
O\
llllO\
l\
O
=
lO\
O\
OOOllll
*
Ge\
ometr\
y\

::
Cu\
b\
i\
cI\
nterpol\
ate
(
lOl\
O\
l\
llOOl\
l
,
lOlOl\
llOlO\
O
,
lOl\
OlllO\
l\
lO
,
lOlOlllO\
lll\

,
(
lOlOllllOO\
O
-
lOl\
Olll\
OO\
Ol
)
*
lOlOll\
lOlO\
l\

)
;
}
else
{
float
lOOO\
lOOl\
lO
=
lOlOl\
lO\
l\
lll\

*
lOlO\
lll\
lOO\
O\

+
lOlO\
lllOOOO
;
if
(
lOOO\
l\
OOll\
O
<
0.0f
)
lO\
O\
O\
l\
O\
O\
llO
=
0.0f
;
lOlOl\
lllOlO
=
lOOOO\
Ollll\

*
lOOO\
lO\
Ol\
lO
;
}
lOlOll\
ll\
O\
lO
*=
2.5f
;
lOlOll\
ll\
O\
lO
/=
(
Fabs
(
lOlOllllO\
O\
l
)
*
8.5f
+
1.0f
)
;
return\

lOlOlll\
lOl\
O\

;
}
Car\
Te\
m\
p\
late\

::
Ca\
rT\
emplate\

(
)
{
lOl\
OlOlO\
Oll\

=
false
;
lOl\
O\
l\
O\
lOOlO\

=
0
;
lOlOll\
OOllO
=
k_\
v3UnitZ
;
lOlOl\
lOOll\
l
=
k_\
v3Uni\
tY\

;
lO\
lOl\
lO\
OO\
l\
O
(
)
;
}
Ca\
r\
Temp\
la\
t\
e\

::
~
CarTem\
p\
lat\
e
(
)
{
Finali\
se\

(
)
;
}
void
CarTemplate\

::
lOl\
Ol\
l\
OOOl\
O
(
)
{
lO\
l\
OlOlOlOO
=
0.0f
;
lO\
lO\
lOlOlll
=
0.0f
;
lOlOl\
O\
lOlOl
=
0.0f
;
lOl\
OlO\
lOllO
=
0
;
lO\
l\
O\
lO\
l\
lOlO\

=
0.0f
;
}
}
