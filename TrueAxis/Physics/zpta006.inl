//---------------------------------------------------------------------------------
// File Name: zpta006.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

nam\
espace
TA\

{
in\
l\
i\
ne
floa\
t
Dynamic\
Ob\
je\
c\
t\

::
LineInte\
rsect\
ion\

::
GetInte\
r\
se\
ct\
io\
nDe\
pth
(
)
const\

{
ret\
u\
r\
n\

lOllOOlO\
Ol\
l\

;
}
inl\
ine
DynamicOb\
j\
ect
*
Dyna\
micO\
bject
::
Line\
Interse\
ction
::
Ge\
tDynamicO\
b\
j\
e\
ct
(
)
const\

{
re\
turn
lOl\
l\
lOO\
lOOO
;
}
inline\

Co\
llisionObje\
c\
t
*
Dyna\
micObject
::
Lin\
eI\
nters\
ectio\
n
::
Ge\
tCol\
lisionObjec\
t\

(
)
con\
st
{
re\
t\
urn
lOlO\
llO\
OOll
;
}
in\
line
int
Dyn\
amic\
Objec\
t\

::
LineIn\
t\
ers\
ection
::
Ge\
tAttr\
i\
bute\

(
)
cons\
t
{
re\
t\
urn
llO\
lllO\
lOOO\

;
}
inl\
in\
e
const\

Vec3
&
Dyna\
micO\
bject
::
Lin\
eIn\
terse\
c\
ti\
on\

::
GetPosi\
ti\
o\
n
(
)
co\
n\
st
{
ret\
urn
lOOOOll\
l\
ll
;
}
in\
line
con\
st
Vec3
&
Dyna\
micObject\

::
LineIn\
tersec\
tion\

::
Get\
No\
rmal\

(
)
const
{
re\
turn\

lOO\
O\
lOOO\
OO
;
}
inli\
n\
e
const
MF\
ra\
m\
e
&
Dynami\
c\
Obje\
ct
::
GetFrame
(
)
const
{
re\
tu\
rn\

lOOllOlOOlll
;
}
inl\
ine
const
MFrame\

&
Dynamic\
Ob\
ject
::
GetNextFrame
(
)
const
{
retu\
rn\

lOOl\
l\
OlOlOO\
O
;
}
inl\
i\
ne\

const
MF\
ram\
e
&
Dyna\
m\
ic\
Object\

::
GetPrevi\
ousFr\
ame
(
)
co\
ns\
t\

{
return\

lOOllOllllll
;
}
in\
l\
i\
ne
const\

MFr\
ame
&
Dynamic\
Ob\
j\
ec\
t\

::
GetGraphic\
s\
Fr\
am\
e
(
)
cons\
t
{
re\
t\
urn\

lOO\
llOlOOlll
;
}
inli\
n\
e\

co\
nst\

Vec3
&
DynamicO\
bj\
e\
ct
::
Get\
Posi\
tion\

(
)
cons\
t\

{
re\
turn
lOOl\
l\
O\
lOOl\
ll\

.
v3T\
rans\
lati\
o\
n\

;
}
inline
cons\
t
Vec3
&
Dynamic\
Ob\
je\
ct
::
Ge\
tC\
enter\
O\
f\
M\
ass
(
)
co\
n\
st\

{
re\
turn
lOO\
lOl\
l\
lOlOl
;
}
inline
const
Vec3\

&
Dy\
nami\
cObjec\
t
::
Ge\
tNe\
xtCen\
te\
rOfMass\

(
)
co\
nst
{
return\

lOO\
l\
lOlOOll\
O
;
}
inl\
i\
n\
e
const
Ve\
c3
&
Dy\
na\
micOb\
je\
ct
::
Ge\
tC\
enterOffset
(
)
con\
st
{
retur\
n
lO\
Ol\
lOlO\
O\
lOl
;
}
inl\
ine
voi\
d
Dyn\
am\
icO\
b\
ject
::
Se\
t\
F\
rameDirec\
t\

(
co\
nst\

MF\
rame\

&
lOllOlllllO
)
{
lO\
OllOlOOlll
=
lO\
llO\
ll\
lllO\

;
lOOlOl\
llOlOl
=
lO\
O\
llO\
l\
OOlOl\

*
lO\
OllOlOO\
lll
;
}
in\
line\

float
Dy\
namicObj\
ect
::
GetMass\

(
)
co\
n\
s\
t\

{
ret\
urn
lOlOlOlOlO\
O
;
}
inline
float
DynamicO\
b\
ject
::
Ge\
t\
I\
n\
ve\
rseMass
(
)
cons\
t\

{
re\
turn
lOOlOl\
lll\
l\
OO\

;
}
inlin\
e
cons\
t\

Ma\
t\
33\

&
Dynami\
c\
Obje\
ct
::
GetInertia
(
)
cons\
t
{
re\
turn
lOOl\
lOOll\
OOO
;
}
inline\

con\
st
Mat\
33
&
DynamicOb\
je\
ct\

::
GetInv\
erse\
Iner\
t\
ia
(
)
const\

{
re\
turn\

lOOllO\
O\
ll\
O\
Ol
;
}
inline
const\

Ma\
t33
&
Dynami\
c\
O\
b\
j\
e\
ct
::
GetWorldS\
pac\
eIne\
rt\
ia
(
)
const
{
return
lOOl\
lO\
OlllOl\

;
}
inli\
ne\

co\
nst
Mat33
&
Dy\
na\
micOb\
j\
ect
::
GetW\
or\
ldSp\
ac\
e\
I\
nv\
erse\
In\
ertia
(
)
co\
nst\

{
return\

lO\
Ol\
l\
OOllllO
;
}
inline\

vo\
i\
d\

Dy\
na\
m\
icObj\
ect
::
SetFricti\
on\

(
float\

lOl\
Ol\
OO\
OOlll\

)
{
lOOl\
lO\
Ol\
llll\

=
lOlOl\
O\
O\
OOlll
;
}
inl\
i\
n\
e\

float\

Dy\
nami\
cObject
::
Ge\
tFr\
i\
ct\
ion
(
)
co\
nst
{
re\
tu\
rn
lOO\
llO\
Ol\
l\
lll\

;
}
inl\
ine
void\

Dynami\
cO\
bjec\
t\

::
SetR\
estitution\

(
fl\
oa\
t
lOllOOlOlO\
l
)
{
lO\
OllOl\
OOOOO
=
lOllOOlOlOl\

;
Cl\
amp\

(
lOOl\
lOlO\
OO\
O\
O
,
-
1.0f
,
1.0f
)
;
}
in\
li\
ne
fl\
oa\
t\

Dyna\
mic\
Obje\
ct
::
Ge\
t\
Res\
ti\
tuti\
on
(
)
const
{
retu\
rn
lOOllO\
lO\
O\
OO\
O
;
}
inline
void
Dy\
n\
amic\
Ob\
je\
c\
t
::
Se\
t\
Gr\
av\
ityMu\
l\
t\

(
flo\
at\

lOlO\
lOOOlO\
OO
)
{
lOOlllOlOlO\
l
=
lO\
lOlOOOl\
OO\
O
;
}
inli\
ne\

fl\
o\
at
Dyn\
a\
mi\
c\
Obj\
ect
::
Ge\
tGr\
av\
ityM\
ul\
t
(
)
co\
n\
st
{
re\
t\
ur\
n
lOO\
l\
llO\
lO\
lOl
;
}
inline\

bool
DynamicOb\
j\
ect
::
Ro\
tationD\
isabl\
ed
(
)
const
{
re\
t\
urn
lll\
Oll\
OOl\
l
(
lllOllOOOO\

,
lO\
Ol\
llOO\
lO\
O\
O
)
;
}
inlin\
e
bool\

Dynami\
c\
Obj\
ect\

::
Movem\
entDis\
able\
d
(
)
con\
st
{
return
lllO\
llOOll
(
lllOll\
OOO\
O
,
lOO\
lllOOlOO\
l
)
;
}
inl\
ine
void\

Dy\
n\
ami\
cObjec\
t
::
SetFor\
c\
eF\
ast\
Sol\
v\
erEna\
ble\
d
(
bool
lllO\
ll\
OOlO\

)
{
ll\
lOlOllll
(
ll\
lOllOOO\
O\

,
lOlO\
l\
OOOOlOO
,
ll\
lOllOOlO
)
;
}
in\
line
bool\

Dynam\
ic\
Object
::
IsForc\
eFastSol\
ve\
r\
Enabled
(
)
cons\
t
{
return
lllOll\
O\
Oll\

(
ll\
lO\
llOO\
O\
O
,
lOlO\
lO\
OOOl\
OO
)
;
}
inl\
in\
e
void
DynamicO\
bjec\
t
::
Set\
A\
llDamp\
ing\
Disable\
d\

(
bo\
ol
lllOllOOlO\

)
{
lllOlO\
lll\
l\

(
ll\
l\
Ol\
lOOOO
,
lOlOlO\
OOOlOl
,
lllOllOOlO\

)
;
}
inl\
in\
e
bool
Dyna\
mic\
O\
bje\
ct
::
IsAll\
Da\
mping\
Dis\
abl\
e\
d
(
)
co\
n\
st
{
ret\
urn
ll\
lOllOOll
(
lllOllO\
OO\
O
,
lOlOlO\
OO\
O\
lO\
l
)
;
}
inli\
ne
voi\
d
DynamicOb\
ject
::
Set\
Ex\
tr\
aSta\
bility
(
bool\

lllOllOOl\
O
)
{
lll\
OlOl\
l\
ll
(
lllO\
l\
lOO\
OO
,
lOlOOlll\
ll\
lO
,
lllO\
llOO\
lO
)
;
}
inlin\
e
bo\
ol
Dyn\
a\
m\
icObject
::
ExtraS\
t\
ab\
ility
(
)
const
{
return\

lll\
OllOOll
(
lllOl\
lO\
OO\
O\

,
lOlOOll\
l\
lll\
O
)
;
}
inline
void\

Dynam\
icObject
::
SetRig\
idFri\
ctio\
nDisable\
d
(
bool\

lllOll\
OO\
lO
)
{
lllO\
lOllll
(
lllO\
l\
l\
OOO\
O
,
lOl\
O\
Oll\
lllO\
l
,
lllOllO\
O\
l\
O
)
;
}
inli\
ne\

bool
Dyn\
a\
mi\
cObjec\
t\

::
Rigi\
d\
Fri\
c\
tionD\
isa\
ble\
d
(
)
co\
ns\
t
{
retur\
n
lllO\
l\
lOOll
(
ll\
lOll\
OOOO\

,
lOlOOlllll\
Ol\

)
;
}
inli\
n\
e\

vo\
id\

Dyn\
a\
mi\
c\
O\
bje\
c\
t
::
Set\
Co\
llision\
Disab\
l\
ed
(
bool
lll\
Ol\
lOO\
l\
O
)
{
lll\
OlOll\
ll
(
lll\
O\
l\
lOOOO
,
lOlOOlll\
llll
,
ll\
l\
OllOO\
l\
O
)
;
}
in\
lin\
e
boo\
l\

Dyn\
amic\
Object
::
Co\
llision\
Disabl\
ed
(
)
co\
n\
st\

{
retu\
r\
n\

lllOl\
lO\
O\
l\
l
(
lllOl\
lOOOO
,
lOlOOlll\
llll
)
;
}
inli\
ne\

void
Dyna\
micO\
bject\

::
SetU\
pdateDi\
sa\
bl\
ed
(
bo\
ol
ll\
lOllO\
OlO
)
{
lll\
OlOllll
(
lllOl\
lO\
OO\
O
,
lOl\
OlOOO\
OOOl\

,
ll\
lOll\
OO\
l\
O
)
;
}
inline\

bo\
ol\

Dyna\
mic\
Obje\
ct
::
Upd\
ateDisa\
bled
(
)
co\
nst\

{
re\
turn
lll\
Ol\
lOOll
(
lll\
Oll\
OO\
O\
O
,
lO\
lOl\
OOOOOO\
l\

)
;
}
inline
vo\
id\

Dyn\
amic\
Ob\
j\
ect
::
Set\
G\
hos\
t
(
bo\
o\
l\

lll\
OllOOlO
)
{
ll\
l\
OlO\
llll
(
ll\
l\
Ol\
lO\
OOO\

,
lOlO\
lOOOOOOO
,
lllO\
llOOl\
O
)
;
}
inl\
ine
bool
Dynami\
c\
Obje\
ct
::
Ghost
(
)
const
{
return
lll\
OllOOll
(
lllOllOOO\
O
,
lOlO\
l\
OOO\
O\
OO\
O
)
;
}
inl\
ine
bool
Dynami\
c\
O\
b\
j\
e\
ct
::
Infinit\
eMass
(
)
co\
ns\
t\

{
ret\
urn
lll\
OllOO\
ll
(
lllOll\
OOOO
,
lO\
Olll\
OOlOll
)
;
}
inlin\
e
void
Dynam\
icObject
::
SetFindVelocityFromNextF\
r\
am\
e\

(
boo\
l
lllOllOOl\
O
)
{
lll\
Ol\
Olll\
l
(
lllOllO\
OOO\

,
lOlO\
lOO\
OOO\
ll
,
ll\
lO\
llOOlO
)
;
}
inline\

bo\
ol\

Dynam\
i\
cO\
b\
jec\
t\

::
Ge\
tFi\
n\
d\
VelocityF\
rom\
Nex\
tF\
r\
a\
me\

(
)
co\
n\
st
{
ret\
u\
rn
lllO\
llOOl\
l
(
lllOllOOOO
,
lOlOlOOO\
O\
O\
ll\

)
;
}
inline
bo\
ol
Dyna\
micObject
::
IsWorl\
d\
O\
bjec\
t
(
)
const
{
retu\
rn
lllO\
llOOll
(
lll\
O\
l\
lOOOO
,
lOl\
OOlOOlOOO
)
;
}
in\
l\
ine
voi\
d
Dy\
na\
micO\
bj\
e\
ct
::
Set\
Re\
stTimeMu\
lt\
ipli\
er
(
fl\
oat\

lOl\
OlOO\
OlOOl\

)
{
lO\
OllOlO\
OOlO
=
lO\
l\
OlO\
OOlO\
Ol\

;
}
inlin\
e
floa\
t
Dyn\
amic\
Ob\
je\
c\
t
::
GetR\
es\
t\
Ti\
m\
e\
Mult\
ip\
l\
i\
e\
r\

(
)
cons\
t
{
retur\
n
lO\
Ol\
lO\
lO\
OO\
lO
;
}
inl\
ine
void
Dynamic\
Object
::
Set\
I\
D\

(
int
lO\
lOlOO\
O\
lOlO
)
{
lOlO\
OOllOlll
=
lOlOlOOOlOlO
;
}
in\
l\
ine
int
Dynami\
cOb\
j\
e\
ct
::
GetID\

(
)
const
{
ret\
urn\

lO\
l\
OOO\
llO\
lll
;
}
inlin\
e
bool\

Dynam\
icO\
bje\
ct\

::
Is\
InM\
o\
v\
in\
g\
List
(
)
const
{
return\

lOO\
llOlOl\
Ol\
l\

!=
0
;
}
inl\
i\
ne
const\

Vec3
&
DynamicObje\
ct\

::
Ge\
tLi\
nea\
rVelo\
ci\
ty
(
)
con\
st\

{
retur\
n
lOOlOlll\
lOll
;
}
in\
l\
ine
void
Dynamic\
O\
bje\
ct
::
Se\
t\
LinearVelocity
(
con\
s\
t
Vec3\

&
lO\
lOlO\
OOlO\
ll
)
{
lOOlOl\
lllO\
ll
=
lOlOlOOOlOl\
l\

;
}
in\
l\
ine
const
Vec3
&
Dynami\
c\
Object\

::
Ge\
t\
AngularVelocit\
y
(
)
const\

{
retur\
n
lOO\
lOlllllO\
l
;
}
inlin\
e
void
Dy\
na\
micObj\
ect\

::
SetAngula\
rVeloci\
ty
(
const
Ve\
c3\

&
lOl\
OlOO\
Oll\
OO
)
{
lOOlO\
ll\
lllOl
=
lOlOl\
OOOllOO
;
}
inline\

vo\
id
Dy\
nam\
icObje\
ct
::
ApplyLinearIm\
pulse\

(
const
Ve\
c3
&
lOl\
OlOOOl\
lOl\

)
{
if
(
lOOlll\
Ol\
O\
Oll\

(
)
)
{
lOO\
l\
O\
llll\
O\
ll
+=
lOl\
Ol\
OOOl\
lOl
*
lOOl\
O\
l\
llllO\
O\

;
}
}
in\
lin\
e\

void
Dynami\
cObje\
ct\

::
App\
ly\
AngularImpuls\
e\

(
con\
s\
t
Vec3
&
lOl\
OlO\
OO\
lllO
)
{
if
(
lOOlllOl\
OOll
(
)
)
{
lO\
OlOlll\
ll\
Ol\

+=
lOlO\
lOOOl\
llO\

*
GetI\
nv\
erse\
I\
nerti\
a
(
)
;
}
}
in\
li\
ne
void
Dy\
namic\
Objec\
t
::
Assert\
For\
ceA\
ndTorq\
ueC\
lear\
e\
d\

(
)
const
{
TA_ASSE\
R\
T\

(
lOOll\
lOlO\
l\
OO
.
IsZero\

(
)
)
;
TA\
_AS\
SERT
(
lO\
OlllOlOl\
ll
.
Is\
Zer\
o\

(
)
)
;
}
inli\
ne
co\
ns\
t
AABB
&
Dynami\
cObject
::
Ge\
tW\
orld\
A\
ABB
(
)
{
return
lO\
O\
l\
lO\
l\
OllOl
;
}
#ifndef TA_WRAPPER	
in\
l\
ine
Col\
lisio\
nOb\
je\
ct
&
Dyna\
m\
ic\
Ob\
je\
ct
::
Ge\
tColli\
si\
on\
O\
b\
j\
ect
(
)
{
TA_A\
SSE\
RT
(
lOO\
llO\
OlO\
ll\
O
)
;
retur\
n\

*
lOOll\
OO\
lO\
llO
;
}
#endif //
inline\

Co\
llisio\
nObje\
c\
tCombo
*
Dyna\
mi\
cObj\
ect
::
Get\
C\
ol\
lisi\
onOb\
je\
ct\
Co\
m\
bo\

(
)
{
TA\
_\
A\
S\
S\
E\
RT
(
lOOllOOl\
OllO
)
;
retur\
n
lOOllOOl\
O\
llO\

->
GetCol\
lisi\
on\
Object\
Type\

(
)
==
Collisio\
nOb\
ject
::
TYPE_CO\
MBO
?
(
Collisio\
nO\
bje\
ctC\
ombo
*
)
lOOllO\
OlOllO
:
0
;
}
inlin\
e
Coll\
isionO\
bjectC\
om\
plex
*
Dynam\
i\
cO\
bj\
ect
::
GetC\
ol\
li\
sion\
Ob\
jectC\
om\
plex
(
)
{
TA\
_ASSERT
(
lOOl\
lOOlOllO
)
;
retu\
rn
lOOll\
OOl\
O\
l\
l\
O
->
GetCo\
l\
l\
isi\
onO\
bj\
ect\
Ty\
pe
(
)
==
Collisio\
n\
Object
::
TYPE_COM\
PLEX\

?
(
CollisionO\
b\
jec\
tC\
o\
mpl\
ex
*
)
lOOllOOl\
O\
llO
:
0
;
}
#ifndef TA_WRAPPER
inline\

DynamicObject
::
Co\
ll\
is\
i\
o\
nIt\
erat\
o\
r
Dyn\
ami\
cObje\
ct
::
GetCo\
llis\
ionIter\
ator\

(
)
{
retu\
rn
Dy\
na\
mic\
Ob\
jectCo\
l\
lisionItera\
tor
(
this
,
lOO\
llOl\
lO\
lOO
)
;
}
#ifndef TA_REMOVE_DEPRECATED
inlin\
e
void
Dynam\
icObject
::
Set\
Coll\
is\
ionLi\
stEnabled
(
boo\
l
lllOllOOlO
)
{
lllOlOl\
lll
(
lllOll\
OOOO
,
lOlO\
lO\
OOOOl\
O
,
lll\
O\
llOOlO
)
;
}
inline
bool
DynamicOb\
jec\
t
::
Collisio\
nLi\
st\
E\
nabl\
ed\

(
)
const\

{
ret\
u\
rn\

lllOll\
O\
O\
l\
l
(
ll\
lOll\
OOOO
,
lO\
lO\
lOO\
O\
OOlO\

)
;
}
#endif
#endif //
in\
l\
in\
e\

int
Dynam\
icObje\
ct
::
Get\
NumLine\
Coll\
isions
(
)
{
ret\
urn
lOO\
ll\
Ol\
llOOO
.
lOOOlllOOl
(
)
;
}
inline
const
Dyna\
micObject
::
Lin\
eInt\
ersection
&
Dynami\
cO\
bj\
e\
ct
::
GetLi\
neCol\
li\
si\
o\
n
(
int
lOO\
OlOOlll
)
const
{
return
lOOllO\
lllOOO\

[
lOOO\
lOOlll
]
;
}
#ifndef TA_WRAPPER
inlin\
e
DynamicObj\
e\
c\
t
::
Join\
tI\
te\
rato\
r\

Dynam\
ic\
Ob\
j\
ect
::
GetJ\
o\
intIter\
a\
tor
(
)
{
retu\
rn
lOOl\
lOlllOOl\

.
lOl\
OOO\
OlOO
(
)
;
}
#endif //
in\
line
vo\
id\

DynamicObj\
ect
::
SetU\
s\
er\
Grou\
p
(
int
lOl\
OlOOOl\
l\
l\
l
)
{
lO\
OllOlOlllO
=
lOlOlOOOll\
l\
l
;
}
inl\
ine
int
DynamicObje\
c\
t\

::
GetU\
serGr\
ou\
p\

(
)
const
{
ret\
urn
lOO\
l\
lOlOl\
llO
;
}
inl\
ine
int
DynamicObj\
e\
ct\

::
Ge\
tU\
serGroupItem\
Id\

(
)
const
{
return
lOOllOl\
Ollll
;
}
#ifndef TA_REMOVE_DEPRECATED
inli\
ne
void\

DynamicObjec\
t\

::
Set\
Coll\
isi\
on\
UserData
(
void
*
lO\
Ol\
llOO\
OO
)
{
lOO\
l\
l\
OllOOll\

=
lOOlllOOO\
O
;
}
in\
li\
ne\

void
*
Dyn\
am\
icO\
bject
::
Ge\
tC\
ollisio\
nUse\
rData\

(
)
co\
nst
{
retur\
n
lOOll\
OllOOll\

;
}
#endif //
inlin\
e\

voi\
d
Dyna\
mi\
cObje\
ct\

::
Set\
UserData\

(
void
*
lOOlllOOOO
)
{
lOOl\
lO\
l\
lO\
Oll\

=
lOO\
l\
llOOOO\

;
}
inli\
ne
vo\
id\

*
Dynam\
icO\
b\
j\
ect
::
GetUs\
er\
Data
(
)
cons\
t
{
return\

lOOllOllOOll
;
}
}
