//---------------------------------------------------------------------------------
// File Name: zpta031.cpp
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#define TA_PHYSICS_INTERNAL
#include "StaticObject.h"
#ifndef TA_PHYSICS_H
#include "Physics.h"
#endif //
#ifndef TA_COLLISIONOBJECTCOMPLEX_H
#include "CollisionObjectComplex.h"
#endif //
#ifndef TA_DYNAMICOBJECT_H
#include "DynamicObject.h"
#endif //
namespac\
e
TA
{
voi\
d
StaticObje\
ct
::
Initialis\
e
(
CollisionObjectC\
omplex
*
lO\
OllOOlOl\
ll
)
{
if
(
lOlOl\
llOO\
OO\
O
)
{
lO\
OOll\
l\
OlO\

(
0
,
"StaticObject::Initialise. Already Initialised")
;
Fin\
ali\
s\
e
(
)
;
}
lO\
l\
OlllOOOOO
=
Dyn\
amicObje\
ct\

::
Cr\
eat\
e\
Ne\
w
(
)
;
lOlOlll\
O\
O\
OOO
->
Initialis\
e
(
lO\
OllO\
O\
l\
Olll
)
;
}
void
StaticO\
b\
j\
e\
c\
t
::
Fi\
nalise
(
)
{
if
(
lOlOlllOOOOO
)
{
lOlOl\
l\
lOOOO\
O
->
Re\
le\
ase
(
)
;
lOlOl\
llOO\
O\
O\
O
=
0
;
}
}
vo\
i\
d
StaticObje\
ct
::
Set\
Fr\
am\
e
(
con\
st
MF\
ram\
e
&
lOllOll\
lllO
)
{
lOlOlll\
OO\
OOO\

->
Se\
tFram\
e
(
lOllO\
lllllO
)
;
}
vo\
i\
d
Sta\
ticObject
::
Se\
t\
NextFrame
(
con\
st
MFrame
&
ll\
l\
OOOlO\
ll\
OO
)
{
lOOO\
O\
OO\
llO\

(
lOlO\
lllOOOO\
O
,
"StaticObject::SetNextFrame: StaticObject is uninitialised.")
;
if
(
lllO\
O\
O\
l\
OllO\
O
==
lOlOl\
llOO\
O\
OO
->
GetF\
r\
ame\

(
)
)
{
lOl\
OlllOOOO\
O\

->
SetM\
ovem\
en\
t\
Di\
sa\
bled
(
tru\
e\

)
;
}
else\

{
lOl\
O\
lllOO\
O\
OO
->
Se\
tM\
o\
vemen\
t\
Di\
sab\
l\
ed
(
false\

)
;
lO\
lOll\
lO\
OOO\
O
->
SetTo\
M\
ovin\
g
(
)
;
lOlOlllOOOOO
->
Se\
tFindVelocityFromN\
extFr\
ame\

(
true\

)
;
if\

(
lOlOlll\
OOO\
OO
->
IsIn\
Mov\
in\
g\
List
(
)
)
lOlOll\
lOOOOO
->
Se\
tNe\
xtFrame
(
lll\
OO\
OlOllOO\

)
;
}
}
void
St\
a\
ticObj\
e\
c\
t
::
Test\
LineF\
orC\
oll\
ision\

(
con\
st
Vec3
&
lO\
OlOlOll\
l
,
cons\
t
Vec3
&
lO\
O\
Ol\
OOOOO\

,
floa\
t\

lOO\
lOl\
lO\
OO
,
Col\
lis\
ion\

&
ll\
O\
ll\
llO\
ll\
l
)
{
lOlOll\
lO\
OOOO
->
Tes\
t\
Lin\
eForCollisi\
on
(
lO\
OlOl\
Olll
,
lOOOlO\
OOO\
O
,
lOOlO\
llO\
OO
,
llO\
llllOl\
ll
)
;
}
Stat\
i\
cO\
bject
*
TAC_CAL\
L
StaticObject
::
Cr\
eateNew
(
)
{
StaticOb\
ject
*
lOl\
OllOl\
OOl
;
lOOOOOllOlO
(
lO\
lOllOlOOl
,
St\
ati\
cObject
)
;
retu\
rn
lOlOll\
Ol\
OOl\

;
}
St\
aticObjec\
t
::
St\
aticOb\
ject
(
)
:
PhysicsObject
(
)
{
lOl\
Oll\
lOOOO\
O
=
0
;
}
Static\
O\
bject
::
~
St\
ati\
c\
Ob\
ject
(
)
{
Fi\
n\
al\
i\
se
(
)
;
}
}
