//---------------------------------------------------------------------------------
// File Name: zcta015.h
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#ifndef llOlllllOl
#define llOlllllOl
#ifndef TA_TYPES_H
#include "Types.h"
#endif //
#ifndef TA_COMMON_H
#include "Common.h"
#endif //
#ifndef TA_MATHS_H
#include "Maths.h"
#endif //
nam\
e\
space
TA
{
cl\
as\
s\

Ser\
i\
a\
liser\

;
cla\
ss
TACOM\
MON_C\
L\
A\
S\
S
llOl\
ll\
lll\
O
{
pu\
b\
l\
ic
:
llOlll\
lllO\

(
)
;
llOllll\
l\
lO\

(
const
Char\

*
lllOOO\
l\
l\
ll\

)
;
llO\
llll\
llO
(
con\
st
llOll\
ll\
ll\
O
&
lOOl\
ll\
O\
lO\
Ol
)
;
llOll\
l\
lllO
(
con\
st
Char
*
ll\
l\
OOOllll\

,
in\
t
lO\
OlllOllO
)
;
ll\
Ol\
lllllO
(
in\
t\

lOOl\
lOl\
O\
OOO\

)
;
llOlll\
ll\
l\
O
(
floa\
t\

lOOOO\
OlllO
)
;
~
ll\
Olllll\
lO\

(
)
;
voi\
d
Se\
rialise
(
Ser\
i\
alis\
er
&
lOOOl\
Ol\
lOl
)
;
void
lO\
Ol\
llO\
lOl\
l\

(
Serialiser
&
lOOOlOll\
Ol
)
;
bool\

ope\
rator
==
(
co\
nst
llO\
llllllO\

&
lOOl\
llOlOO\
l\

)
;
bool
oper\
ator
==
(
const
Char\

*
lllOOOl\
l\
l\
l
)
;
boo\
l
ope\
rator
!=
(
con\
st
llO\
lllll\
lO
&
lOOl\
l\
lO\
lOOl
)
;
bool\

ope\
rat\
or
!=
(
const\

Char
*
lllOOOl\
lll\

)
;
llOl\
ll\
lllO
&
oper\
a\
to\
r
=
(
cons\
t
llOllllllO
&
lOOll\
lO\
l\
OOl
)
;
ll\
O\
ll\
ll\
ll\
O
&
ope\
ra\
tor
=
(
const
Char\

*
lll\
OO\
Ollll
)
;
llOlll\
lllO
&
operat\
or
+=
(
co\
ns\
t
llOl\
l\
ll\
llO\

&
lO\
O\
lll\
OlOOl
)
;
llO\
ll\
llllO
&
operator\

+=
(
con\
st
Char\

*
lllO\
OOllll\

)
;
llOllllllO
&
op\
e\
rat\
o\
r
+=
(
int
lOOllOlO\
OOO\

)
;
llOllll\
llO
&
operato\
r
+=
(
floa\
t
lOO\
OO\
OlllO
)
;
llOlll\
l\
llO
operato\
r
+
(
const
llOlll\
lllO
&
lOO\
l\
l\
lOlO\
O\
l
)
co\
nst
;
llO\
lllll\
lO
oper\
ator
+
(
llOl\
lllll\
O
&
lOOlllOlO\
Ol
)
{
ret\
urn
(
co\
n\
st
llO\
lllll\
lO
&
)
*
this
+
(
cons\
t
llO\
lll\
ll\
lO
&
)
lO\
Oll\
lOlOOl
;
}
llO\
llllllO\

ope\
r\
ator
+
(
con\
st
Ch\
ar
*
ll\
lOO\
Ollll\

)
cons\
t
;
llOllllll\
O
op\
era\
tor
+
(
int
lOOll\
OlOO\
O\
O
)
const
;
llOll\
lll\
lO
operator\

+
(
float
lOOOOOll\
lO
)
co\
nst
;
fr\
iend
llO\
l\
lllll\
O\

oper\
at\
or
+
(
co\
n\
s\
t
Cha\
r
*
ll\
l\
O\
Oll\
l\
OO\

,
llO\
l\
lll\
llO
&
lllO\
lOOOO\
O\

)
;
st\
atic
ll\
Ollllll\
O\

lOOl\
lll\
O\
O\
OO
(
const
Char
ll\
lOlOl\
OOO
)
{
Ch\
ar
lOOllllOO\
Ol
[
2
]
;
lOO\
llllO\
OOl
[
0
]
=
ll\
l\
Ol\
O\
lOOO
;
lOOllllOO\
Ol
[
1
]
=
'\0';
llOllll\
l\
lO
lO\
O\
llllOO\
lO\

(
lOOlll\
lO\
OOl
)
;
ret\
urn
lOOll\
llOO\
lO
;
}
ope\
ra\
tor
cons\
t
Char
*
(
)
const
{
ret\
u\
rn
lOOlllOlO\
OO
;
}
cons\
t
Cha\
r
*
lO\
Ol\
ll\
l\
O\
Oll\

(
)
co\
n\
st
{
re\
turn
lOO\
lllO\
lOO\
O\

;
}
int\

lOO\
O\
ll\
lOOl
(
)
cons\
t
{
ret\
ur\
n\

Abs
(
lO\
lO\
OOl\
OOl
)
;
}
vo\
i\
d\

Clear
(
)
;
void
lOOlllO\
llOl
(
)
;
void\

lO\
O\
lllOl\
ll\
O
(
)
;
pri\
v\
a\
t\
e\

:
int\

lOl\
OOO\
lO\
O\
l\

;
Char
*
lOOlllOlOO\
O\

;
friend\

llO\
llllllO
TA\
C_CAL\
L\

operat\
o\
r
+
(
co\
n\
st
Char
*
lllO\
OlllOO
,
con\
s\
t
ll\
OllllllO
&
lllOl\
OO\
O\
OO\

)
;
voi\
d\

lOOl\
l\
lOlOlO
(
int
lO\
OlllOllO
)
;
}
;
llOllll\
ll\
O
TAC_CA\
L\
L\

op\
erator
+
(
cons\
t
Char
*
lll\
OOl\
llOO
,
co\
nst
llO\
ll\
ll\
l\
l\
O
&
ll\
l\
Ol\
OOO\
OO\

)
;
cons\
t\

llOl\
l\
l\
lllO\

lO\
Ol\
lllO\
lOO\

;
}
;
#endif //
