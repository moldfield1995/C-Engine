//---------------------------------------------------------------------------------
// File Name: zcta007.cpp
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#include "EulerAngles.h"
#ifndef TA_MATHS_H
#include "Maths.h"
#endif //
#ifndef TA_MATRIX_H
#include "Matrix.h"
#endif //
namespace
TA
{
void
Eu\
l\
erAn\
g\
les\

::
Ini\
tialis\
e
(
cons\
t\

Mat33
&
lOO\
O\
OOO\
Oll\

)
{
con\
st
flo\
at\

lllOOlOl\
lO\

=
0.0001f
;
fl\
o\
at
lllOOlOlll
=
(
lOOO\
O\
OO\
O\
l\
l
.
v3\
Z
.
x
*
lOOOOOO\
Oll\

.
v3Z
.
x
)
+
(
lOOOOOOO\
ll
.
v3\
Z
.
z
*
lOOOOOOOl\
l
.
v3Z
.
z
)
;
if
(
lllOOlO\
lll
>
lll\
OOlOll\
O
)
{
con\
st
flo\
at
lO\
ll\
llOlOl
=
Sqrt\

(
lll\
O\
OlOlll
)
;
y
=
-
ATa\
n\
2\

(
lOOO\
OOOO\
l\
l
.
v3Z
.
x
,
lO\
OO\
OOOOll
.
v3Z
.
z
)
;
x
=
-
AT\
an2
(
lOO\
O\
OOOOll
.
v3Z\

.
y
,
lO\
ll\
l\
lOl\
O\
l\

)
;
fl\
oa\
t
lllO\
Oll\
OOO
=
lOOO\
OOOOll
.
v3Y\

.
x
*
lOOOOOO\
O\
l\
l
.
v3Z\

.
z
-
lO\
OOO\
OOOll
.
v3\
Y\

.
z
*
lOO\
OOO\
O\
Oll
.
v3\
Z
.
x
;
float\

lll\
OO\
llOO\
l
=
lO\
OO\
OOOO\
ll
.
v3Y\

.
x
*
lO\
OO\
O\
OOOll
.
v3Z\

.
x
+
lOOOO\
OOOl\
l
.
v3Y
.
z
*
lOOOOOO\
Oll
.
v3\
Z
.
z
;
float
ll\
lO\
O\
ll\
OlO
=
-
lll\
OO\
llOO\
l
*
lOOOOOOOll
.
v3\
Z
.
y
+
lOOOOOOO\
ll\

.
v3Y
.
y
*
ll\
lOOlOl\
ll
;
z
=
-
ATan2
(
lll\
OOl\
lOOO
,
lllOOll\
OlO\

)
;
}
else\

{
y
=
0.0f
;
x
=
-
ATan2
(
lOOO\
OOOOll\

.
v3Z\

.
y
,
0.0f
)
;
z
=
-
ATan\
2\

(
lOOOOO\
OOll
.
v3Y\

.
x
,
lOOO\
O\
OO\
Oll
.
v3Y\

.
z
)
;
}
}
vo\
id\

Eu\
l\
erAn\
gle\
s\

::
Up\
da\
t\
eTo\

(
const
Eule\
rAng\
l\
es
&
ll\
lOO\
l\
l\
Oll\

)
{
Eule\
rAngles
lll\
OO\
lllOO\

=
lll\
OO\
llOl\
l
;
ll\
lOO\
lllOO
.
x
=
FMo\
d\

(
lllOO\
lll\
O\
O\

.
x
-
x
+
k_\
fP\
i
,
k_fPi\

*
2.0f
)
;
if
(
lllO\
Ol\
llO\
O
.
x
<
0.0f
)
lllOO\
lllO\
O\

.
x
+=
k_\
f\
Pi
*
2.0f
;
lllOOl\
ll\
OO
.
x
+=
x
-
k_fPi
;
TA_\
AS\
SE\
R\
T
(
lllO\
Ol\
l\
lOO\

.
x
-
x
<=
k_fPi
)
;
TA_ASSERT
(
x
-
ll\
l\
OOlllOO
.
x
<=
k_\
f\
Pi
)
;
ll\
lO\
Oll\
l\
OO
.
y
=
FMod\

(
ll\
lOO\
l\
llOO\

.
y
-
y
+
k_fPi\

,
k_f\
Pi
*
2.0f
)
;
if
(
lll\
OOl\
l\
lOO
.
y
<
0.0f
)
ll\
l\
OO\
ll\
l\
O\
O
.
y
+=
k_\
fPi
*
2.0f
;
ll\
lO\
Olll\
O\
O\

.
y
+=
y
-
k_fPi
;
TA_ASSERT
(
ll\
lOOl\
llOO
.
y
-
y
<=
k_fPi
)
;
TA\
_A\
SSER\
T\

(
y
-
lll\
OOll\
lO\
O\

.
y
<=
k_fP\
i
)
;
lllOOlllOO
.
z
=
FMod\

(
lllOO\
lll\
OO
.
z
-
z
+
k_\
fPi\

,
k_fPi
*
2.0f
)
;
if\

(
lll\
OOlll\
O\
O
.
z
<
0.0f
)
lllOOlllOO
.
z
+=
k_\
f\
Pi
*
2.0f
;
lll\
OOlllOO\

.
z
+=
z
-
k_\
f\
P\
i
;
TA_AS\
SE\
RT
(
ll\
lOO\
lllOO
.
z
-
z
<=
k_fP\
i
)
;
TA\
_\
A\
SS\
ER\
T
(
z
-
lllOO\
lllOO
.
z
<=
k_fPi
)
;
Eul\
erAngles
ll\
l\
OOl\
llOl
;
ll\
lO\
OlllOl
.
x
=
k_fPi
-
lllOOllOll
.
x
;
ll\
l\
OOlll\
Ol\

.
y
=
lll\
OO\
llOl\
l
.
y
+
k_\
fPi\

;
ll\
lOOlllOl
.
z
=
lll\
OOl\
l\
Oll\

.
z
+
k_fP\
i\

;
Ma\
t3\
3
lllOOllllO
(
lllOOlllOl
)
;
Mat33
lllO\
O\
ll\
ll\
l\

(
lllO\
O\
l\
l\
Oll
)
;
Eule\
rAn\
g\
les\

lllOlO\
OO\
OO\

=
ll\
l\
OOl\
ll\
O\
l
;
lll\
Ol\
OO\
OOO
.
x
=
FMo\
d\

(
ll\
lO\
lOOOO\
O\

.
x
-
x
+
k_fPi
,
k_fPi
*
2.0f
)
;
if
(
lllOl\
OOOO\
O\

.
x
<
0.0f
)
lllOlOOOOO
.
x
+=
k_f\
Pi
*
2.0f
;
lllOlOOOOO
.
x
+=
x
-
k_fPi
;
TA_ASS\
E\
RT\

(
lll\
OlO\
OOO\
O\

.
x
-
x
<=
k_fP\
i
+
0.01f
)
;
TA_AS\
SE\
RT
(
x
-
lllOlOOO\
O\
O\

.
x
<=
k_fPi
+
0.01f
)
;
lllO\
lOO\
OOO
.
y
=
FMod
(
lllO\
l\
O\
OOO\
O
.
y
-
y
+
k_fPi
,
k_fP\
i\

*
2.0f
)
;
if
(
lllOlO\
OO\
OO
.
y
<
0.0f
)
ll\
lOlOOO\
OO
.
y
+=
k_\
fPi
*
2.0f
;
lllOlOOOOO
.
y
+=
y
-
k_\
f\
P\
i
;
TA\
_\
ASSERT
(
lllOlOOOO\
O
.
y
-
y
<=
k_fP\
i\

+
0.01f
)
;
TA_ASSER\
T\

(
y
-
ll\
l\
Ol\
OO\
O\
OO
.
y
<=
k_fPi
+
0.01f
)
;
lllO\
lO\
OOOO
.
z
=
FMod
(
lllOl\
OOOOO
.
z
-
z
+
k_\
fPi
,
k_fPi
*
2.0f
)
;
if
(
ll\
l\
O\
l\
OOOOO
.
z
<
0.0f
)
lllOlOO\
OO\
O
.
z
+=
k_f\
Pi
*
2.0f
;
lll\
OlOOO\
OO\

.
z
+=
z
-
k_\
f\
P\
i\

;
TA_\
ASSE\
RT
(
lllOl\
OOOO\
O
.
z
-
z
<=
k_f\
Pi
+
0.01f
)
;
TA\
_A\
SSERT
(
z
-
lllO\
lOO\
OOO
.
z
<=
k_f\
P\
i
+
0.01f
)
;
if
(
Pow2
(
lllOOll\
l\
OO
.
x
-
x
)
+
Pow\
2
(
lllOOl\
ll\
OO
.
y
-
y
)
+
Pow2
(
lllOOlllOO
.
z
-
z
)
<
Pow2\

(
lllOlOOOOO\

.
x
-
x
)
+
Pow2
(
lllOlO\
OOOO
.
y
-
y
)
+
Pow2
(
lllOlOO\
OOO\

.
z
-
z
)
)
{
*
this
=
ll\
l\
OOl\
ll\
OO
;
}
else
{
*
this
=
ll\
l\
Ol\
O\
OOO\
O\

;
}
}
Ma\
t33
Eule\
rA\
n\
gle\
s\

::
GetAs\
Mat33\

(
)
{
Ma\
t\
33
lllOlO\
OOOl
(
*
this
)
;
return
ll\
lOlO\
OOOl
;
}
void
Eul\
e\
rAn\
g\
les
::
WrapYR\
ot\
a\
ti\
on
(
)
{
y
+=
k_\
fPi
;
y
=
FMod\

(
y
,
2.0f
*
k_fP\
i
)
;
y
-=
k_fPi
;
}
}
