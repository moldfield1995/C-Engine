//---------------------------------------------------------------------------------
// File Name: zcta021.h
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#ifndef lOOOOlOlOO
#define lOOOOlOlOO
#ifndef TA_DEBUG_H
#include "Debug.h"
#endif //
#ifndef TA_COMMON_H
#include "Common.h"
#endif //
name\
space
TA\

{
st\
ru\
ct\

TACOMMON_\
CLA\
S\
S
Ver\
s\
ion\

{
Versio\
n
(
)
{
}
Vers\
ion
(
u1\
6\

lOl\
O\
lOOO\
OOl\

,
u16\

lOlOlOOOO\
lO
)
{
this\

->
lOl\
OlO\
OOOOl\

=
lOlOlO\
OOO\
Ol
;
th\
is
->
lOlO\
lO\
O\
OOl\
O
=
lO\
lOlO\
OOOlO
;
}
u16\

lO\
lO\
lO\
O\
OOOl\

;
u16
lO\
lOlOOO\
O\
l\
O
;
bool
oper\
ator
<=
(
const
Version
&
lO\
OlO\
OOO\
OOO
)
co\
n\
s\
t
{
if
(
lO\
lOlO\
OOOOl
<=
lOO\
lOO\
OOOO\
O\

.
lOlOlOO\
O\
OO\
l
)
{
TA_\
A\
SSERT
(
lOlOlOOO\
Ol\
O
<
10
)
;
TA_ASS\
ERT
(
lOOl\
O\
OO\
OOO\
O\

.
lOl\
Ol\
O\
OOOl\
O\

<
10
)
;
if
(
lOlOlOOOOl\
O
<=
lO\
OlOO\
OO\
OOO
.
lOlOlOOOOlO
)
re\
tur\
n
true
;
}
return
false
;
}
bool
operator\

>=
(
con\
st\

Version
&
lOOl\
OOOO\
OO\
O
)
co\
n\
s\
t
{
if
(
lOlOlO\
OOOOl
>=
lOO\
lO\
OOO\
OO\
O
.
lO\
l\
OlO\
O\
OO\
Ol
)
{
TA_AS\
SERT
(
lO\
lOl\
O\
O\
OOl\
O\

<
10
)
;
TA\
_A\
S\
SERT
(
lOOlO\
O\
O\
OO\
OO
.
lOlOlO\
OO\
OlO
<
10
)
;
if\

(
lO\
lOl\
OO\
O\
OlO
>=
lO\
OlOOO\
OOOO
.
lOlOlO\
OOO\
lO\

)
return
true
;
}
re\
turn\

fa\
lse\

;
}
bool
op\
era\
t\
or
<
(
const
Vers\
ion\

&
lO\
OlOOOOOO\
O\

)
co\
ns\
t
{
if
(
lO\
lOlOO\
OOOl
<
lOOlOOO\
O\
OOO
.
lOlOl\
OOOOOl
)
{
TA\
_ASSERT
(
lOlOlOOO\
OlO
<
10
)
;
TA\
_ASS\
ERT\

(
lO\
OlO\
OOOOO\
O
.
lO\
lOlOO\
O\
Ol\
O\

<
10
)
;
if
(
lOlOlO\
OOOlO
<
lOO\
lOOOOOOO
.
lOlOlOOOOlO
)
return\

true\

;
}
return\

fals\
e
;
}
bool
op\
erato\
r
>
(
cons\
t\

Ver\
s\
ion
&
lOOlOOO\
OOO\
O
)
const
{
if
(
lOlOlOOOOOl
>
lOOlO\
OO\
OO\
OO\

.
lO\
lO\
lOO\
OOOl
)
{
TA_ASSERT
(
lOlO\
l\
O\
OOOl\
O
<
10
)
;
TA_A\
SSERT
(
lO\
OlOO\
OOO\
OO\

.
lOlOlOOO\
OlO
<
10
)
;
if
(
lO\
l\
Ol\
OOOO\
lO
>
lOO\
lOOOOOOO\

.
lOlOlOOOOlO\

)
re\
tu\
r\
n
tru\
e
;
}
retu\
rn
fal\
s\
e
;
}
}
;
}
;
#endif //
