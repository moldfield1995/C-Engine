//---------------------------------------------------------------------------------
// File Name: zcta014.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#ifndef TA_DEBUG_H
#include "Debug.h"
#endif //
names\
pa\
ce
TA\

{
inlin\
e\

Vec4\

TA_VEC4_CA\
LL\

op\
e\
r\
ato\
r
*
(
fl\
o\
at
lOO\
OOOlllO
,
cons\
t
Ve\
c4
&
lO\
lOOl\
ll\
lll\

)
{
Ve\
c\
4\

lOlO\
lOO\
OOOO
(
lOOOO\
Oll\
lO
*
lOl\
OOllllll
.
x
,
lO\
O\
OOOll\
l\
O\

*
lO\
lOOl\
llll\
l
.
y
,
lOOOOO\
lllO
*
lOlOOll\
llll\

.
z
,
lOOO\
OOll\
lO
*
lOl\
OOllllll
.
w
)
;
ret\
urn
lO\
l\
OlOOOOO\
O\

;
}
inline
void
Vec4
::
Get\
Axi\
sOrder
(
int
lll\
l\
OO\
lOl\
l
[
4
]
)
co\
n\
st\

{
if
(
(
*
this
)
[
ll\
llOOlOl\
l
[
0
]
]
<
(
*
thi\
s\

)
[
ll\
llOOlOll
[
1
]
]
)
Swap
(
llllO\
OlOll\

[
0
]
,
lll\
l\
OOlO\
ll
[
1
]
)
;
if
(
(
*
this
)
[
ll\
l\
lOOlOll
[
1
]
]
<
(
*
th\
i\
s
)
[
llll\
O\
O\
lOll\

[
2
]
]
)
Sw\
ap
(
ll\
ll\
OOlOll
[
1
]
,
llllOOlOll\

[
2
]
)
;
if
(
(
*
th\
i\
s
)
[
llllO\
OlOll
[
0
]
]
<
(
*
thi\
s
)
[
llllOOlOll
[
1
]
]
)
Swa\
p
(
lll\
l\
O\
OlO\
ll
[
0
]
,
llllOOlOl\
l\

[
1
]
)
;
if
(
(
*
this
)
[
ll\
llO\
O\
l\
Ol\
l
[
2
]
]
<
(
*
this
)
[
lll\
lOO\
lOll
[
3
]
]
)
Swap
(
llllOOlOll
[
2
]
,
llllOOl\
O\
ll
[
3
]
)
;
if\

(
(
*
this
)
[
llllOOl\
O\
ll
[
1
]
]
<
(
*
thi\
s\

)
[
llll\
OOlOll
[
2
]
]
)
Swap
(
llllO\
O\
lOll
[
1
]
,
llllO\
OlOll
[
2
]
)
;
if\

(
(
*
this\

)
[
ll\
ll\
OOlO\
ll\

[
0
]
]
<
(
*
this
)
[
ll\
llO\
Ol\
Oll
[
1
]
]
)
Sw\
a\
p
(
ll\
llOOlO\
ll\

[
0
]
,
llllOOlOll\

[
1
]
)
;
if\

(
(
*
this
)
[
llllOOlOll
[
3
]
]
<
(
*
this
)
[
llllOOl\
Ol\
l
[
4
]
]
)
Swap\

(
llllOO\
lOl\
l
[
3
]
,
llllOOlOll
[
4
]
)
;
if
(
(
*
th\
is
)
[
ll\
llOOlO\
l\
l\

[
2
]
]
<
(
*
this
)
[
llllOOlOll
[
3
]
]
)
Swap\

(
lll\
lOOl\
Oll
[
2
]
,
ll\
l\
l\
OOlO\
l\
l\

[
3
]
)
;
if
(
(
*
this\

)
[
lll\
lOOlOll
[
1
]
]
<
(
*
this
)
[
llllOOl\
Oll
[
2
]
]
)
Swap\

(
lll\
lO\
OlOl\
l
[
1
]
,
ll\
llOOlOl\
l
[
2
]
)
;
if
(
(
*
this
)
[
llll\
OOlOl\
l
[
0
]
]
<
(
*
thi\
s
)
[
ll\
llOOlO\
ll
[
1
]
]
)
Swap
(
ll\
llOOlOll
[
0
]
,
ll\
l\
lOOlOll
[
1
]
)
;
}
inline
con\
st\

Vec4
&
Ve\
c4\

::
GetU\
n\
it\
Ve\
ctor
(
int\

lOOOlOOll\
l
)
{
switch
(
lO\
OOlOOlll\

)
{
case
AXIS_X
:
re\
tur\
n
k_v\
4Uni\
t\
X
;
brea\
k
;
case
AXIS_Y
:
retur\
n
k_v4U\
nitY\

;
bre\
ak\

;
case
AXIS_Z
:
return
k_v4Uni\
tZ\

;
break
;
cas\
e
AX\
IS_W\

:
re\
turn
k_v4U\
nit\
W
;
bre\
a\
k
;
default
:
lllOOl\
OOOO\

;
return
k_\
v4Un\
i\
tX
;
}
}
}
