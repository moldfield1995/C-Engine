//---------------------------------------------------------------------------------
// File Name: zcta005.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

namesp\
a\
ce
TA
{
inline
MFra\
me
::
MFrame
(
)
{
}
inl\
ine
MFr\
a\
me
::
MFram\
e\

(
co\
nst
MF\
r\
ame
&
lOOOOOO\
OOl
)
{
v3Tr\
ansl\
atio\
n
=
lOOOOOO\
OOl\

.
v3Transla\
tion
;
m33Rotation
=
lO\
O\
OOOOOO\
l\

.
m33\
R\
o\
tati\
on
;
}
in\
lin\
e\

MFram\
e
::
MFr\
a\
me
(
cons\
t
Vec3\

&
lOOOl\
l\
llOlO
)
{
v3Translation
=
lOOOllllO\
lO
;
m3\
3\
Rot\
at\
ion\

.
SetToIdenti\
ty\

(
)
;
}
inl\
i\
ne
MFram\
e
::
MFrame
(
co\
nst\

Mat33
&
lOOOll\
llOl\
l
)
{
v3T\
ranslation
.
Cle\
ar\

(
)
;
m3\
3Rotat\
io\
n\

=
lOOOl\
lllOll
;
}
inl\
ine
void
MFrame
::
Clear
(
)
{
v3Tra\
nsla\
tion
.
Cl\
e\
a\
r\

(
)
;
m33\
Rota\
tion
.
Se\
tTo\
Ident\
ity
(
)
;
}
inl\
in\
e
MFr\
a\
me\

::
MF\
r\
ame\

(
co\
nst
Vec\
3
&
lOOOll\
ll\
OlO\

,
con\
st
Mat33
&
lO\
OOl\
ll\
lO\
ll
)
{
v3T\
ranslatio\
n
=
lOOOllllOlO
;
m33R\
otati\
o\
n
=
lOO\
O\
l\
l\
l\
lOll
;
}
in\
l\
ine\

void
MFrame\

::
In\
terpola\
t\
e
(
MFra\
me
&
lllO\
Oll\
lOO\

,
MF\
ram\
e
&
lllOl\
O\
OO\
O\
O
,
fl\
oat
lO\
ll\
llllOO\

)
{
v3Tr\
anslat\
ion\

=
ll\
lO\
OlllOO
.
v3Tr\
ansl\
ati\
on\

+
(
lllOlOOO\
O\
O
.
v3Translation
-
lll\
OO\
l\
llO\
O
.
v3Translat\
ion
)
*
lOllll\
llOO
;
m33R\
otat\
ion
.
Int\
erpo\
lat\
e
(
lllO\
O\
lll\
OO\

.
m33\
R\
ota\
tion
,
ll\
lOlOOOO\
O
.
m33\
Rotatio\
n
,
lO\
llllll\
OO
)
;
}
inli\
ne\

MFrame
&
MF\
ra\
me
::
operator\

*=
(
co\
nst\

MFra\
me
&
lOOOOO\
OOO\
l
)
{
m33Rotation
*=
lOOOOOOOO\
l
.
m33R\
otat\
ion
;
v3T\
ranslatio\
n
*=
lO\
OOOO\
OOOl\

.
m3\
3R\
ot\
ation
;
v3Trans\
lation
+=
lO\
OOOOOO\
Ol
.
v3T\
ranslation
;
ret\
urn\

*
thi\
s
;
}
inl\
ine
MFrame
&
MFra\
me
::
ope\
ra\
t\
or
*=
(
co\
nst
Mat33
&
lOOOOll\
lOll\

)
{
m33\
Rota\
t\
io\
n
*=
lO\
OOO\
lllOll
;
v3T\
r\
ansla\
tion
*=
lOOOOlll\
Oll
;
re\
tur\
n
*
thi\
s
;
}
inlin\
e
MF\
rame
&
MFra\
m\
e
::
operator
/=
(
const
MF\
r\
ame
&
lOOOll\
lllOO\

)
{
TA_ASSER\
T
(
lO\
OOlllllO\
O
.
m33R\
ot\
a\
ti\
on\

.
IsOr\
thogon\
a\
l
(
)
)
;
(
*
th\
is\

)
=
(
*
this\

)
/
lOOO\
l\
ll\
l\
lOO
;
retu\
rn
(
*
th\
is
)
;
}
in\
line
MFrame
MFra\
me
::
oper\
at\
or
*
(
co\
nst
MFram\
e
&
lO\
OOO\
OOOOl
)
cons\
t
{
MF\
r\
ame
lOO\
Olll\
llOl
;
lOOOlllllOl
.
m33\
Rot\
ation
=
m3\
3R\
ot\
ati\
on
*
lO\
O\
OOOO\
OOl
.
m33Ro\
t\
at\
i\
o\
n
;
lOOO\
l\
lll\
lOl
.
v3Translat\
io\
n\

=
v3Tr\
a\
nslat\
ion
*
lOO\
O\
O\
OOOOl
.
m33Rotati\
on
;
lOOOl\
ll\
llOl
.
v3T\
rans\
lation
+=
lOO\
O\
O\
OOO\
O\
l
.
v3Tran\
s\
la\
t\
ion
;
re\
turn
lO\
OOllll\
lOl\

;
}
inli\
n\
e
MFrame
MF\
ra\
m\
e
::
operat\
or
*
(
co\
n\
s\
t
Ma\
t3\
3
&
lOOO\
O\
lllOll
)
con\
st
{
MFrame
lOO\
Oll\
ll\
lO\
l
;
lO\
O\
Ol\
llll\
Ol
.
m33Rot\
ati\
o\
n
=
m33Ro\
t\
ati\
on
*
lO\
O\
OOlllOll
;
lOO\
Ol\
l\
ll\
l\
Ol
.
v3\
Translation
=
v3Translati\
on
*
lOOOOl\
l\
lOll
;
return
lOOOlll\
llOl\

;
}
inline\

MFr\
a\
me
MFra\
me
::
operator
/
(
co\
nst\

MFram\
e
&
lOOO\
l\
llllOO
)
const
{
TA_ASSE\
RT
(
lOOOlllll\
OO
.
m3\
3R\
ot\
at\
i\
o\
n
.
IsO\
r\
t\
hogo\
n\
a\
l\

(
)
)
;
MFra\
me\

lOOOllll\
l\
Ol\

;
Mat3\
3
::
Mul\
ByT\
ranspose
(
m3\
3R\
ota\
tion
,
lO\
OOl\
llll\
OO\

.
m33\
Rotation
,
lOOOlllllOl
.
m33Rotatio\
n\

)
;
Mat\
33\

::
MulByTrans\
pose\

(
v3T\
ra\
nslation\

-
lOOO\
l\
l\
lllOO
.
v3T\
ransl\
a\
ti\
on
,
lOOOl\
lll\
lOO
.
m3\
3Rot\
a\
tion
,
lOOOl\
l\
lllOl
.
v3Trans\
lati\
on
)
;
ret\
u\
rn
lOOOlll\
llOl
;
}
inline
Ve\
c3
ope\
rator\

*
(
con\
st\

Vec3
&
lllll\
l\
ll\
l
,
const
MFr\
ame
&
lOO\
O\
lllllOO
)
{
Vec3
lOOO\
l\
OlOl\
ll
;
lOOOlOlO\
lll\

=
ll\
l\
lllll\
l
*
lOOOlll\
ll\
OO
.
m33R\
ota\
tion
;
lOOO\
l\
O\
l\
Olll
+=
lOOOl\
llllO\
O
.
v3Trans\
la\
ti\
on
;
retu\
rn
lOO\
Ol\
OlOl\
l\
l
;
}
in\
li\
n\
e
Vec3\

op\
er\
a\
t\
or
/
(
con\
st
Vec\
3\

&
llllll\
lll\

,
const
MF\
ra\
me
&
lOO\
Ol\
llllOO
)
{
Ve\
c3\

lOO\
OlOlOlll
;
Ve\
c3
lOOOOllOllO
;
lOOOOllOllO
=
lllllllll
-
lOOOl\
llllO\
O\

.
v3Translation
;
lOOO\
O\
OOllO
(
lOOOlllll\
OO
.
m33Rota\
tion
.
Is\
O\
rthogo\
nal
(
)
,
"Vec3 / MFrame. m33Rotation isn't orthogonal")
;
Mat33
::
Mu\
lByTranspose
(
lOO\
OOl\
lOll\
O\

,
lO\
OOll\
lllOO
.
m33\
Rotation\

,
lOOOlO\
lOlll
)
;
return
lOOOlOlO\
lll
;
}
inlin\
e\

Vec3\

&
ope\
rato\
r
*=
(
Vec\
3\

&
llllllll\
l
,
const
MFr\
am\
e
&
lO\
OOl\
l\
lll\
OO\

)
{
ll\
l\
l\
llll\
l\

*=
lOO\
Olll\
ll\
OO
.
m33\
R\
otat\
io\
n\

;
ll\
llllll\
l
+=
lOOOlllllOO\

.
v3\
T\
ranslat\
i\
on
;
return
lllll\
l\
lll
;
}
in\
line
Vec3
&
operat\
o\
r
/=
(
Vec3
&
lllll\
llll
,
con\
s\
t
MF\
rame\

&
lOOOlll\
l\
lOO
)
{
lll\
llllll\

=
llllll\
ll\
l
/
lOOO\
ll\
ll\
lOO
;
return
llll\
lllll\

;
}
inline
boo\
l
MFr\
a\
me\

::
opera\
t\
or
==
(
const
MFr\
ame\

&
lOOOOOO\
O\
Ol
)
co\
ns\
t
{
re\
turn
v3\
Tr\
anslation
==
lOOO\
OOOO\
Ol
.
v3T\
ranslation
&&
m33Rotation
==
lOO\
O\
OOOOO\
l
.
m33Ro\
t\
ation
;
}
inlin\
e
bo\
ol
MFram\
e
::
op\
e\
r\
a\
to\
r
!=
(
const
MFr\
ame
&
lOO\
OOO\
OOOl
)
const
{
re\
tu\
rn
v3Tran\
slation\

!=
lOOOOOOOOl\

.
v3Transl\
ati\
on\

||
m33\
Rota\
t\
ion
!=
lOOO\
OOOOO\
l
.
m33Rotat\
ion
;
}
inline
void
MFrame\

::
Inve\
rt\

(
)
{
*
th\
is
=
Ge\
tInvers\
e\

(
)
;
}
inl\
in\
e\

MFr\
am\
e
MFrame
::
Get\
Inve\
rse
(
const
MFr\
am\
e
&
lOOOOOOOOl
)
{
re\
t\
urn
lOOO\
OOO\
OO\
l
.
Get\
I\
nverse\

(
)
;
}
in\
l\
ine
MFrame
MFrame
::
Ge\
t\
Invers\
e\

(
)
cons\
t
{
MFram\
e
lO\
O\
Olll\
ll\
lO
;
lOO\
OllllllO
.
m33\
Rotati\
on
=
m33R\
ot\
a\
tion\

.
GetTransposeA\
sInvers\
e\

(
)
;
lOO\
O\
l\
lllllO\

.
v3\
T\
ra\
ns\
lat\
ion
=
-
(
v3Tr\
ans\
la\
ti\
on
*
lOO\
Ol\
ll\
lllO
.
m3\
3Rot\
ati\
on
)
;
retu\
r\
n
lOO\
Ol\
lllllO\

;
}
inline
Vec3
MFrame
::
Ge\
tTra\
n\
s\
form
(
const
Vec3
&
lll\
lOOlOOl\

)
{
return
llll\
O\
O\
l\
OOl
*
(
*
this
)
;
}
in\
lin\
e\

Vec3
MFrame
::
Get\
Inver\
s\
eTr\
a\
nsf\
o\
rm
(
co\
nst\

Ve\
c3
&
llllOOlOOl\

)
{
re\
t\
urn
ll\
llOOlOOl
/
(
*
thi\
s
)
;
}
}
