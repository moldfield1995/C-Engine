//---------------------------------------------------------------------------------
// File Name: zpta009.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

namespa\
ce\

TA\

{
inline
bool
Ph\
ysi\
csJo\
i\
n\
t
::
IsObject\
ASol\
id\

(
)
const\

{
ret\
urn
lllO\
llOOll
(
lll\
O\
l\
lO\
OOO\

,
FLAG\
_OBJ\
E\
C\
TA_\
SOLID\

)
;
}
inli\
ne\

void
Phy\
si\
csJ\
o\
in\
t\

::
Se\
t\
ObjectAS\
olid\

(
bool
lll\
Ol\
lO\
Ol\
O
)
{
lll\
O\
lOllll\

(
lllOl\
lOOOO
,
FL\
A\
G_\
OBJE\
CT\
A_\
SOLID
,
ll\
l\
OllOOlO
)
;
}
inl\
in\
e
bool\

Phys\
ic\
s\
Joi\
nt\

::
IsO\
b\
jectB\
S\
olid
(
)
co\
nst\

{
re\
turn\

ll\
lOllOO\
ll
(
ll\
l\
O\
llOOO\
O
,
FL\
AG_OBJECTB_SOLID\

)
;
}
inl\
in\
e
vo\
id
PhysicsJo\
int\

::
SetObjec\
tBSolid
(
bool
lll\
OllOOlO
)
{
lllOlOllll
(
lllO\
llOOOO
,
FLAG_OBJEC\
TB\
_SOLID\

,
ll\
lOllO\
Ol\
O
)
;
}
inl\
in\
e
bool
Physi\
csJ\
o\
int
::
Is\
Coll\
isi\
on\
Disabled\
Bet\
we\
enOb\
jec\
ts
(
)
const
{
retu\
rn
lll\
Oll\
OOll\

(
ll\
lO\
llOOOO
,
llOlOO\
lOl\
O\
Ol
)
;
}
inl\
i\
ne\

void
Phys\
icsJoint
::
SetC\
ollisi\
onDisabl\
e\
dBetween\
Obje\
c\
ts
(
bo\
o\
l\

lll\
O\
llO\
O\
lO
)
{
lllOlOll\
ll
(
lll\
O\
llO\
O\
O\
O
,
llOl\
OOl\
OlO\
Ol\

,
ll\
lO\
ll\
OO\
l\
O\

)
;
}
inline
floa\
t
PhysicsJoi\
nt
::
GetBreak\
F\
orce
(
)
con\
s\
t
{
ret\
urn
llOlOOOOO\
Oll\

;
}
inli\
ne
void\

Ph\
y\
si\
cs\
Joi\
nt
::
Set\
Br\
eak\
Force\

(
floa\
t\

llOlOO\
lO\
lO\
ll
)
{
llO\
l\
OO\
OO\
O\
Oll
=
ll\
OlOOlO\
l\
Oll\

;
}
inline
voi\
d
Phys\
i\
cs\
Joi\
n\
t
::
SetBr\
ea\
kable
(
bool\

ll\
l\
Oll\
OO\
lO
)
{
lllO\
lOlll\
l
(
lllOllOOO\
O
,
ll\
OlOOl\
OlOl\
O
,
lllOllOOl\
O\

)
;
}
inl\
in\
e
bool
PhysicsJ\
oin\
t
::
IsBreakabl\
e
(
)
const
{
return\

lllOl\
lO\
Oll
(
lllO\
ll\
OOOO
,
ll\
OlOOlOlOlO
)
;
}
inline
voi\
d
Phy\
s\
i\
csJ\
oi\
nt\

::
SetBr\
o\
ken
(
bo\
ol
lll\
OllOOl\
O
)
{
lllOlOlll\
l\

(
ll\
lOl\
lOO\
OO\

,
llOOl\
ll\
lOllO
,
lllO\
llOOlO
)
;
}
inline
bo\
ol\

PhysicsJoi\
nt
::
Is\
Br\
oken
(
)
const
{
retur\
n
lllOllOOll
(
ll\
lOllOOOO\

,
ll\
OOlll\
lOllO
)
;
}
in\
l\
i\
ne
void
*
Physi\
c\
sJo\
i\
n\
t
::
Ge\
tUserDa\
t\
a
(
)
const\

{
ret\
urn
lOOll\
OllOO\
l\
l
;
}
inli\
ne\

voi\
d
Physic\
sJoi\
nt\

::
Se\
t\
U\
s\
erData
(
void\

*
llO\
l\
OOlOllO\
O
)
{
lOOllOllOO\
l\
l\

=
llOlO\
O\
l\
O\
llOO
;
}
inline
Physi\
csJ\
oint
::
Type
PhysicsJ\
o\
in\
t
::
Ge\
tT\
ype
(
)
con\
st
{
re\
turn\

(
Type
)
llOlO\
O\
OOl\
OO\
l\

;
}
inlin\
e\

Dyn\
amicObj\
ect
*
Physics\
J\
oint
::
Ge\
t\
ObjectA
(
)
{
re\
t\
ur\
n
llOOllll\
lOOl
;
}
inl\
ine\

DynamicObject\

*
PhysicsJoint
::
Get\
Obj\
e\
ct\
B
(
)
{
return\

ll\
OOlllllOl\
O
;
}
inl\
ine
const
Vec3\

&
PhysicsJoin\
t
::
Get\
PosOnO\
b\
je\
ct\
A
(
)
co\
nst\

{
return
llOO\
lll\
lOlll
;
}
inli\
n\
e\

con\
st
Vec\
3\

&
Ph\
y\
sicsJo\
int
::
GetPo\
s\
On\
Obje\
ctB
(
)
const
{
ret\
urn\

ll\
O\
OlllllOOO
;
}
in\
l\
ine
const
Ve\
c3\

&
Ph\
ysic\
s\
Joint
::
GetLimit\
Nor\
malOnO\
bjec\
t\
A
(
)
const
{
return
llOOl\
llllOll
;
}
in\
li\
ne
co\
ns\
t
Ve\
c3\

&
Phys\
ic\
s\
J\
oint
::
GetLimitNo\
rm\
alOn\
Obj\
ect\
B
(
)
con\
s\
t\

{
re\
tu\
rn
llOOllll\
ll\
OO
;
}
inline
con\
st
Vec3
&
Physics\
Jo\
i\
nt
::
Ge\
tCenterD\
irectionOnObject\
A
(
)
co\
nst\

{
return\

llOOlll\
ll\
Oll
;
}
inli\
ne
con\
st
Vec3
&
Physics\
Joi\
nt\

::
GetCe\
n\
t\
e\
r\
D\
irect\
ionOnObjec\
tB
(
)
const
{
return
llOOlllll\
lOO
;
}
inline\

float
Physics\
Join\
t
::
GetM\
a\
xAn\
gle
(
)
const
{
return
llOO\
l\
l\
l\
l\
ll\
Ol
;
}
inlin\
e
co\
ns\
t
Mat33\

&
Ph\
ysics\
Jo\
i\
n\
t\

::
GetJointOrientation\
A
(
)
{
retu\
r\
n
ll\
OOllll\
lllO
;
}
inli\
n\
e
cons\
t
Mat\
33
&
Physi\
csJo\
i\
nt
::
Ge\
tJoin\
tOr\
ientati\
o\
nB\

(
)
{
retu\
rn\

llOOlllll\
ll\
l\

;
}
inli\
n\
e
cons\
t\

Eul\
er\
An\
g\
l\
e\
s
&
Ph\
ysi\
csJoint
::
GetMinA\
ng\
les
(
)
{
retur\
n
ll\
OlOOOO\
OOOO\

;
}
inlin\
e
con\
st
EulerAn\
gles\

&
Phys\
ic\
s\
Joint
::
GetM\
axAngle\
s
(
)
{
re\
t\
u\
rn
llOl\
OOOOOOOl
;
}
inli\
ne
const
Vec3
&
Phy\
s\
icsJoint
::
GetSlide\
rP\
o\
s\
0
(
)
const
{
return
llO\
Ol\
l\
lllOOO\

;
}
in\
line
co\
nst
Vec3
&
Phy\
sicsJoint
::
GetSlider\
P\
os1\

(
)
co\
nst
{
retur\
n
ll\
O\
Oll\
ll\
lOll\

;
}
}
