//---------------------------------------------------------------------------------
// File Name: zpta012.cpp
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#define llOllOlOOll
#define lOllOllOOlO
#include "CollisionObjectCylinder.h"
#ifndef TA_MFRAME_H
#include "../Common/MFrame.h"
#endif //
#ifndef TA_GEOMETRY_H
#include "../Common/Geometry.h"
#endif //
#ifndef llOllOOlOOO
#include "../Physics/zpta013.h"
#endif //
#ifndef TA_COLLISIONOBJECTSPHERE_H
#include "CollisionObjectSphere.h"
#endif //
#ifndef TA_COLLISIONOBJECTCAPSULE_H
#include "CollisionObjectCapsule.h"
#endif //
#ifndef TA_COLLISIONOBJECTCACHEDPOLYDATA_H
#include "CollisionObjectCachedPolyData.h"
#endif //
#ifndef TA_COLLISIONOBJECTLINELIST_H
#include "CollisionObjectLineList.h"
#endif //
#ifndef TA_PHYSICSRENDER_H
#include "PhysicsRender.h"
#endif //
#ifndef TA_COLLISION_H
#include "Collision.h"
#endif //
#ifndef lllOOOllOOO
#include "../Physics/zpta007.h"
#endif //
name\
s\
pac\
e
TA
{
void
Collis\
ionObje\
ctCyl\
ind\
er
::
Ini\
tialise
(
const
Vec3\

&
ll\
lOl\
OlO\
OOO\

,
cons\
t\

Vec3
&
ll\
l\
OlO\
lO\
OOl
,
fl\
oat
lllllO\
OOOl
)
{
lllOl\
OlOOlO
=
lll\
OlO\
lOOOO\

;
lllO\
lOlOOll\

=
ll\
l\
OlOlO\
O\
Ol
;
lOlO\
l\
OOl\
Ol\
O
=
lll\
llOOOOl\

;
lOOOOOOl\
lO
(
lll\
llOOO\
Ol\

>=
0.0f
,
"CollisionObjectCylinder::Initialise. fRadius is < 0.")
;
lOO\
OOOOllO
(
(
lll\
OlOlO\
Oll
-
ll\
lOl\
OlOOlO
)
.
Get\
M\
agnitude\

(
)
>
k_\
fM\
i\
nFl\
oat
,
"CollisionObjectCylinder::Initialise. The cylinder length is equal to zero")
;
}
vo\
id
Co\
lli\
sionO\
bjectCylin\
d\
er
::
Fi\
nal\
is\
e
(
)
{
lllOlOlOOlO
.
Cl\
ear\

(
)
;
lllO\
l\
OlOOll
.
Clear
(
)
;
lOlOlO\
Ol\
O\
l\
O
=
0.0f
;
}
void
CollisionO\
bject\
Cy\
lind\
er
::
Se\
r\
ial\
is\
e\

(
Seria\
l\
i\
ser
&
lOO\
Ol\
O\
llOl
,
const\

Ve\
rs\
ion
&
lll\
Ol\
OOlO\
O
)
{
lO\
OOO\
OOllO
(
lllOl\
OOl\
OO
<=
llO\
ll\
OOllO\
O
,
"CollisionObjectCylinder::Serialise. The version number is too new.")
;
lOO\
OlO\
llOl
.
Se\
rial\
i\
s\
e\

(
lllOlOl\
O\
OlO
)
;
lOOOlOllO\
l
.
Serial\
i\
se\

(
ll\
l\
Ol\
OlOOll
)
;
lOO\
O\
lOllO\
l
.
Seriali\
s\
e
(
lO\
l\
O\
l\
OOlOlO
)
;
}
voi\
d\

Col\
l\
isionOb\
j\
ect\
Cyl\
i\
nd\
er
::
Rende\
r\

(
const\

MFrame
&
lO\
OOOO\
OOOl
)
{
cons\
t
int
lllOl\
O\
l\
O\
lOO
=
16
;
const
int
lllO\
l\
OlO\
lOl
=
1
;
Mat33
lllOlOl\
OllO
;
ll\
lOl\
O\
lOllO\

.
Set\
ToLoo\
kDownV\
ector
(
(
lllOlOlOOll\

-
lllOlOlO\
OlO
)
.
Ge\
tNormal
(
)
)
;
for
(
int
lll\
OlO\
l\
Oll\
l
=
0
;
lll\
O\
lOl\
Olll
<
lll\
O\
lOl\
O\
lOO\

;
lll\
Ol\
OlOlll
++
)
{
flo\
a\
t
lOO\
OOl\
lOOll
;
float\

lOOOO\
ll\
O\
lOO
;
SinAndC\
os
(
(
fl\
o\
at
)
ll\
lO\
l\
O\
lOlll
/
(
floa\
t\

)
lllO\
lOlOlO\
O
*
(
k_f\
Pi
*
2.0f
)
,
lOOO\
O\
l\
lOO\
ll
,
lOOOOllOlOO\

)
;
Vec3
lllOlO\
l\
lOOO
=
(
lllOlOlO\
llO
.
v3\
X
*
lOOOO\
llOlOO
+
lll\
Ol\
OlOllO
.
v3Y\

*
lOOOOl\
lOO\
l\
l
)
;
SinAndC\
os
(
(
fl\
oat
)
(
ll\
lO\
l\
OlO\
ll\
l
+
1
)
/
(
float
)
lllOlOlO\
lO\
O
*
(
k_fPi\

*
2.0f
)
,
lOOOOllOO\
l\
l
,
lOOOOll\
OlOO\

)
;
Vec\
3
lll\
O\
l\
OllOOl\

=
(
lll\
Ol\
OlO\
llO
.
v3X
*
lOOOOllOlOO\

+
lllOlOlOllO
.
v3Y
*
lO\
OO\
OllOOll\

)
;
{
co\
ns\
t
Vec3\

ll\
lO\
l\
Ol\
l\
Ol\
O
[
4
]
=
{
(
lllOlOlOOl\
O\

+
lll\
OlO\
llOO\
O
*
lO\
lO\
lOO\
l\
Ol\
O\

)
*
lOOOOOOOOl
,
(
lll\
O\
lO\
l\
OOlO
+
lllO\
lOl\
l\
O\
Ol
*
lO\
lOl\
O\
OlOlO
)
*
lOOOOOO\
OOl
,
(
lllOl\
OlO\
Oll
+
lllOlOl\
lO\
Ol
*
lOlOl\
OOlOlO\

)
*
lO\
OOOOO\
OOl
,
(
lllOlO\
lO\
Oll
+
lllOlO\
llOOO
*
lOlOlO\
Ol\
Ol\
O
)
*
lO\
OOO\
O\
O\
O\
Ol
,
}
;
const\

Ve\
c\
3
lllOlOll\
Oll
[
4
]
=
{
lllOlOllOO\
O\

*
lOO\
OOO\
O\
O\
Ol\

.
m33\
Rotatio\
n\

,
lll\
O\
lOllOOl\

*
lO\
O\
OOOOO\
O\
l
.
m33Rot\
ati\
on
,
lll\
Ol\
Oll\
OOl
*
lOOOOOO\
OOl
.
m33\
R\
otati\
on
,
lllOl\
OllOOO
*
lOOOO\
O\
OO\
Ol
.
m33R\
o\
tati\
on
,
}
;
Phys\
ic\
s\
Rende\
r
::
RenderPol\
ygon
(
4
,
ll\
lOlOllOlO\

,
ll\
lOlO\
llOll\

)
;
}
for
(
in\
t
lll\
O\
lOlllO\
O
=
0
;
lllOl\
O\
l\
llO\
O\

<
lllO\
lOlOlOl
;
lllOlOlllOO
++
)
{
Sin\
AndCos
(
(
flo\
a\
t
)
lllOlO\
lllOO\

/
(
float
)
lllOlOlOlOl\

*
(
k_f\
P\
i
)
,
lOOOOllOO\
l\
l
,
lOOOOllOlOO
)
;
Ve\
c3
lllOl\
Oll\
lOl
=
lllOlOllOOO
*
lOOOOllOlOO
+
lllOlO\
lO\
llO\

.
v3Z
*
lOOOOllO\
Oll\

;
Vec\
3
lll\
OlO\
llllO
=
lllO\
l\
OllOOl
*
lOOOOllOl\
O\
O
+
lllOlOlOllO
.
v3Z
*
lO\
OOOll\
OOl\
l
;
SinAn\
d\
Cos
(
(
float\

)
(
lllOlO\
lll\
OO\

+
1
)
/
(
floa\
t
)
lllOlO\
lOlOl
*
(
k_fPi
)
,
lOOOOllO\
O\
ll
,
lOOOOllOlOO
)
;
Vec\
3
lllOlOll\
l\
ll
=
lllOlOllOOO
*
lO\
OO\
O\
llOl\
O\
O
+
ll\
lOl\
O\
lOllO
.
v3Z\

*
lOOOOllOOll
;
Vec\
3
ll\
lOll\
OOO\
OO
=
ll\
l\
OlO\
l\
lOOl\

*
lO\
OO\
OllOlO\
O\

+
ll\
lOlOlOllO
.
v3\
Z
*
lOOOO\
ll\
OOll\

;
{
const
Ve\
c3\

lllOlOllOl\
O
[
4
]
=
{
(
lllOlOlOOlO
-
lllOlO\
l\
llOl
*
lOl\
OlOOl\
OlO
)
*
lOO\
O\
OO\
OOOl
,
(
lll\
Ol\
OlOOl\
O
-
lllO\
lOll\
l\
ll
*
lOlOlOOl\
OlO
)
*
lO\
OOOOOOOl
,
(
lll\
OlOlOOl\
O\

-
lllOll\
OOOOO
*
lO\
lOlOO\
lOl\
O\

)
*
lOOOOO\
OO\
Ol
,
(
ll\
lOlOl\
OOl\
O
-
lll\
OlOllllO
*
lOlOlOOlOlO
)
*
lOO\
OOOOO\
O\
l
,
}
;
con\
st
Vec3
ll\
lO\
lO\
llO\
ll
[
4
]
=
{
-
ll\
lOl\
Ol\
llOl
*
lOO\
OOOO\
OOl
.
m33R\
otatio\
n
,
-
ll\
lOlOlllll
*
lOO\
O\
OOOOO\
l
.
m3\
3Rot\
ation
,
-
lll\
O\
llO\
O\
OOO
*
lOOO\
OOO\
OOl
.
m33R\
otation
,
-
ll\
l\
Ol\
O\
llllO
*
lOOO\
O\
OOOOl
.
m33R\
otation\

,
}
;
Phy\
sicsR\
en\
d\
er
::
Re\
nd\
er\
P\
olygo\
n
(
4
,
ll\
lO\
lOllOlO
,
lllO\
lOll\
Ol\
l
)
;
}
{
const\

Vec3
lll\
O\
lOllO\
l\
O\

[
4
]
=
{
(
lllOlO\
l\
OOll
+
ll\
lO\
lOl\
llOl
*
lOlO\
lO\
O\
lO\
lO
)
*
lOOOOOOOOl
,
(
lllO\
lO\
lOOll
+
lll\
OlOll\
ll\
l\

*
lOlO\
lOOlO\
lO
)
*
lOOO\
O\
OOOO\
l
,
(
lllOlO\
lOO\
ll\

+
ll\
l\
OllOO\
OOO\

*
lOlOl\
OO\
lOlO
)
*
lOOO\
OOOOOl\

,
(
ll\
l\
OlOlOOll
+
lllOlO\
ll\
l\
lO
*
lOlOlOO\
lO\
lO\

)
*
lOOO\
OOOOOl
,
}
;
co\
nst
Vec3
lllOlOl\
lOll
[
4
]
=
{
lll\
OlOl\
llOl\

*
lOOOO\
OOOOl\

.
m33\
Ro\
tation
,
lllO\
lOl\
llll
*
lOOO\
OO\
OOO\
l
.
m33\
Ro\
tation
,
lllOll\
O\
OOOO
*
lOO\
OO\
OOO\
O\
l
.
m33Ro\
tati\
on\

,
lllOl\
Olll\
lO
*
lOOOOOO\
OOl
.
m33Ro\
ta\
tion
,
}
;
Phy\
s\
i\
csR\
en\
d\
er
::
Re\
nder\
P\
o\
lyg\
on
(
4
,
ll\
lOlOl\
lO\
lO
,
lllOlOll\
Oll
)
;
}
}
}
}
AABB
Coll\
isi\
onObject\
Cylinder
::
Calcu\
lateBo\
un\
d\
ing\
Box
(
)
cons\
t
{
AABB\

lOO\
O\
OOO\
l\
ll
;
lO\
OOOO\
Olll\

.
Ini\
t\
ia\
li\
seTo\
Fit2Po\
int\
s
(
lllO\
lOlOOl\
O
,
lll\
Ol\
O\
lOOll
)
;
Vec3
lOOOlO\
OOO\
O\

=
lllO\
lOlO\
O\
ll
-
lllOlOl\
O\
OlO
;
TA_ASSE\
RT
(
lOOO\
lO\
OOO\
O
.
Get\
Mag\
ni\
tu\
d\
e
(
)
>
k_\
fMinFloat
)
;
lOO\
OlOOOO\
O
.
Nor\
m\
a\
l\
is\
e
(
)
;
lO\
OO\
OOOlll
.
v3Exten\
t
.
x
+=
lOOOlO\
OOOO
.
CrossW\
i\
t\
hUnit\
X
(
)
.
Ge\
tMagnitu\
de
(
)
*
lOl\
OlO\
O\
l\
OlO
;
lOOOOOOll\
l
.
v3Ex\
t\
e\
nt
.
y
+=
lOOOlOOO\
OO
.
Cr\
ossWit\
hUnit\
Y
(
)
.
Ge\
tMag\
nitu\
de
(
)
*
lO\
lOl\
OOlO\
l\
O
;
lO\
O\
OOOOlll
.
v3Ext\
ent
.
z
+=
lO\
OO\
l\
OOOOO
.
Cross\
With\
Un\
itZ
(
)
.
Get\
Mag\
nit\
u\
de
(
)
*
lOl\
O\
lOOlO\
lO
;
return
lOOOO\
O\
Olll\

;
}
void\

Collis\
ionO\
bje\
c\
tCy\
lind\
er
::
Calcu\
lateMass
(
floa\
t\

ll\
lOllOOOOl
,
flo\
at\

&
lOl\
lOOOO\
llO\

,
Vec3\

&
lllOllOOOlO
,
Ma\
t33
&
ll\
lOllO\
OOll\

)
const\

{
flo\
at
lOOlOl\
lOOO
=
(
lllOlO\
lOOlO
-
lllOlOlOOll
)
.
GetMagnitud\
e
(
)
;
lOl\
lO\
OOO\
llO
=
lOO\
lO\
l\
lO\
OO
*
k_fPi
*
lOl\
OlOOlOlO
*
lOlO\
l\
OO\
l\
O\
lO
*
lllO\
llO\
OOOl
;
lllOllOOO\
ll\

.
Set\
ToIde\
n\
t\
ity
(
)
;
lll\
Ol\
l\
O\
O\
O\
l\
l\

.
M11
(
)
=
lOllOO\
OO\
l\
l\
O\

*
(
0.25f
*
lOlO\
lOOlOlO
*
lOlOl\
O\
O\
lO\
lO\

+
(
1.0f
/
12.0f
)
*
lOOlOllOO\
O
*
lOOlOllO\
OO
)
;
lllOl\
l\
O\
OOl\
l
.
M22
(
)
=
lllO\
llOOO\
ll
.
M11
(
)
;
lllOllO\
OOll
.
M33
(
)
=
lO\
l\
lO\
O\
OOllO
*
0.5f
*
lOlO\
lO\
OlOl\
O
*
lOlOlOO\
lOlO
;
Ma\
t3\
3\

lllOlOlO\
l\
lO
;
lllO\
lOlOllO
.
SetToL\
o\
okDownVector
(
(
lll\
O\
lOlOOll
-
lll\
O\
l\
O\
l\
O\
Ol\
O
)
/
lOOl\
OllOOO
)
;
Mat33
ll\
lO\
llOOllO
;
ll\
l\
O\
ll\
OO\
O\
ll
=
ll\
lOl\
O\
lOllO\

.
GetTra\
n\
spo\
s\
eAsInver\
se\

(
)
*
lllOllOOOl\
l
*
lllOlO\
lO\
llO
;
lllOll\
O\
OO\
l\
O
=
(
lll\
O\
l\
OlOO\
lO\

+
lllOl\
O\
lOOl\
l\

)
*
0.5f
;
}
boo\
l
Colli\
sio\
n\
ObjectC\
y\
linde\
r
::
Te\
stLi\
neF\
o\
rC\
olli\
s\
ion
(
co\
n\
s\
t
Vec\
3
&
lOOlOlOlll
,
const
Vec3
&
lOOOlOOO\
OO
,
float
lOOlOllOOO
,
Co\
llision
&
llOl\
lllOlll
)
co\
nst
{
Vec3
lOOlOllOOl
=
lOOlOl\
Oll\
l
+
lOOOlOOOOO
*
lOOlOllOO\
O\

;
floa\
t\

lll\
lOlOOll
;
Vec3
lOllllOO\
l\
l
;
Vec3\

lO\
lll\
lO\
lOO
;
co\
nst
Vec\
3
llllOOOOOlO
=
lllOlOlOOll
-
lllO\
lO\
lOOl\
O
;
const
float
lOOOl\
OO\
O\
lOl\
O
=
lOl\
OlOO\
lOlO
*
lOlOlOOlOlO
;
bool
ll\
lOllO\
Olll
=
false\

;
float\

lO\
O\
OlOOO\
lO\
ll
=
llll\
OOOO\
OlO
.
Dot
(
lO\
OlOl\
O\
l\
ll
-
lllOl\
Ol\
O\
Ol\
l
)
;
fl\
o\
at\

lOOOl\
O\
OO\
l\
lOO
=
lll\
lOOOO\
OlO
.
Dot
(
lOOlO\
llOOl
-
lllOlOlO\
Oll
)
;
if
(
lOO\
O\
lOO\
OlOll
>
0.0f
&&
lOO\
O\
lOOO\
ll\
OO
<
0.0f
)
{
llllOlO\
Oll\

=
lOOOlOO\
OlOll
/
(
lOOOl\
OOO\
lOll
-
lO\
OOlOOOllO\
O
)
;
lO\
ll\
l\
lOOll
=
lOOlOl\
O\
l\
l\
l
+
(
lOOlOll\
OOl
-
lOO\
lOl\
Ol\
ll\

)
*
llll\
OlOOll\

;
fl\
o\
at\

lllOOl\
O\
lll
=
(
lOl\
lllOO\
ll\

-
lllO\
l\
Ol\
OOl\
l
)
.
GetM\
a\
gni\
tudeSqrd\

(
)
;
if
(
ll\
lOOl\
Olll\

<
lOO\
O\
lOOO\
l\
OlO\

)
{
float
lOlOlllOOl
=
lO\
O\
OlOOOO\
O
.
Dot\

(
lOllll\
OOll\

-
lO\
OlOlOl\
l\
l
)
;
if
(
lOlOlllOOl
<
llOlll\
lOlll
.
lOllOOl\
OOll
)
{
Ve\
c3\

lllOllOlOOO
=
lOOlOl\
O\
l\
l\
l
+
lOl\
O\
lll\
OO\
l
*
lOOOlOOOOO
;
llOllllOlll
.
Init\
i\
al\
is\
e\

(
0
,
0
,
lOl\
Ol\
llOOl
/
lOO\
lOllOOO\

,
lO\
l\
Oll\
lOOl\

,
lOllll\
OOll
,
llllOOOO\
Ol\
O
.
GetN\
orma\
l
(
)
)
;
ll\
OllllOlll
.
SetCol\
l\
i\
si\
on\
Obje\
ctA
(
cons\
t_c\
as\
t\

<
Coll\
isi\
o\
nOb\
jectC\
yl\
inder
*
>
(
this\

)
)
;
ll\
lOllO\
Olll\

=
tru\
e
;
}
}
}
lO\
OOlOO\
OlO\
ll
=
llllOOOOO\
l\
O
.
Dot\

(
lOO\
lOl\
Olll
-
ll\
lOl\
OlOO\
lO
)
;
lO\
OOlOOOl\
l\
O\
O
=
llllOO\
O\
OO\
lO\

.
Do\
t\

(
lOO\
l\
Oll\
OOl
-
lllOl\
Ol\
OOl\
O
)
;
if
(
lO\
OOlOOO\
lOll\

<
0.0f
&&
lOOOlOOOllO\
O
>
0.0f
)
{
llllOlOOll\

=
lOO\
Ol\
OOOlO\
ll
/
(
lO\
OO\
l\
OOOlOll
-
lOO\
OlOOOllOO
)
;
lOllll\
OO\
ll\

=
lOOl\
OlOl\
ll
+
(
lOOlOllOOl
-
lOO\
lOlOll\
l
)
*
llllOl\
OOll
;
float
lllOOlOlll
=
(
lOllll\
O\
Ol\
l\

-
lllO\
lOlOOlO
)
.
Ge\
tMa\
gnitu\
deSqrd\

(
)
;
if
(
ll\
lOOlOlll\

<
lOO\
O\
l\
OOOl\
OlO
)
{
float
lOlOlllOO\
l\

=
lO\
OOlOO\
OOO
.
Dot\

(
lOl\
lllOOll
-
lOO\
lOl\
Oll\
l
)
;
if
(
lOl\
O\
ll\
l\
OOl\

<
llO\
llll\
Ol\
ll
.
lOl\
lO\
OlOOll
)
{
Vec3
ll\
lOll\
Ol\
O\
OO
=
lO\
Ol\
O\
l\
O\
lll
+
lOl\
OlllOOl
*
lOOOlOOOO\
O
;
llOllllOlll
.
Ini\
tial\
ise
(
0
,
0
,
lOlOll\
lOO\
l
/
lOOl\
O\
ll\
OOO\

,
lOl\
OlllOOl
,
lOlll\
lOOl\
l
,
-
llll\
OOOOOlO
.
GetNo\
rmal\

(
)
)
;
ll\
OllllOl\
ll
.
SetC\
ollisionObj\
ect\
A
(
const_cas\
t
<
CollisionO\
bjec\
t\
C\
ylinde\
r
*
>
(
th\
is
)
)
;
ll\
lOllO\
Olll\

=
tr\
ue\

;
}
}
}
if
(
Geo\
metry
::
Te\
stSph\
ereMovementAgains\
t\
Line\

(
lOOlO\
l\
O\
lll
,
lOOl\
OllO\
O\
l\

,
lllO\
l\
O\
lO\
O\
lO
,
ll\
lO\
lOlO\
Oll
,
lOlOlOOlOlO\

,
ll\
llOlOOll
,
lOlll\
lOOll\

,
lO\
llllO\
lO\
O\

)
)
{
lO\
llllO\
Ol\
l
+=
lOllllOlOO
*
lOl\
OlOOlO\
l\
O\

;
flo\
at
lOlO\
ll\
lOOl
=
lOO\
O\
lOOOOO
.
Dot\

(
lOlll\
lO\
O\
l\
l\

-
lOO\
lOl\
Olll
)
;
if
(
lO\
lOlll\
OOl
<
llOllllOl\
ll
.
lOl\
l\
OO\
lOOl\
l
)
{
llOllllO\
l\
ll
.
In\
itialise
(
0
,
0
,
lO\
l\
OlllOOl
/
lOOlOllOOO
,
lO\
lOlllOOl
,
lOlll\
lO\
Oll
,
lOll\
l\
lOlOO
)
;
llO\
llllOl\
ll
.
SetC\
ollis\
i\
onObje\
c\
tA
(
const\
_\
ca\
st
<
Colli\
sio\
nOb\
je\
ctCylin\
der
*
>
(
this
)
)
;
lllOllO\
O\
lll
=
tr\
ue
;
}
}
re\
tu\
rn\

lllOllOOlll
;
}
Colli\
sio\
nObjec\
tCyli\
nder
*
TAC_CALL
Colli\
s\
ion\
Ob\
j\
ec\
tCyl\
i\
n\
der
::
CreateN\
ew
(
)
{
Co\
l\
li\
sio\
n\
O\
b\
je\
ctCylinder
*
lO\
l\
Ol\
lOlOOl\

;
lOOO\
O\
O\
ll\
OlO
(
lOlOllOl\
O\
Ol
,
Colli\
si\
o\
nO\
bjectCyli\
n\
der\

)
;
retur\
n
lOlO\
llOlOOl\

;
}
Co\
l\
lis\
ion\
ObjectCylinder\

::
Col\
lis\
i\
onObjec\
t\
Cylinder
(
)
:
Coll\
is\
io\
nObjectSi\
mp\
le\

(
CollisionO\
bj\
ect
::
TYPE_CY\
LINDER
)
{
lllO\
lO\
lOO\
l\
O
.
Cle\
a\
r
(
)
;
lll\
OlOlOOll
.
Cl\
ea\
r
(
)
;
lO\
l\
OlO\
Ol\
OlO\

=
0.0f
;
}
Coll\
isionObjectCy\
l\
i\
nde\
r
::
~
Co\
l\
lisionObje\
ct\
Cyl\
inder
(
)
{
Fin\
alise
(
)
;
}
#ifndef DOXYGEN
inl\
ine\

float
TA\
C\
_CALL\

lOOOlOO\
OllOl
(
co\
n\
st\

Vec3
&
lOlll\
Ollll
,
co\
nst
Ve\
c3
&
ll\
OlOO\
O\
llOO
,
fl\
oa\
t
lO\
OOlOOOll\
lO
,
con\
st
Vec\
3
&
lOl\
lllOOOl
,
const
Ve\
c\
3
&
llO\
lOOl\
OOl\
O
)
{
Ve\
c3\

ll\
OO\
l\
lOllOO\

=
lOlllOllll\

.
Cr\
oss
(
lO\
llllOOO\
l
)
;
float
lO\
OOl\
OO\
Ol\
O\
OO\

=
lOllllOO\
Ol
.
Do\
t
(
llOlOOOllO\
O
-
llO\
l\
O\
O\
lOOlO
)
+
lOOO\
l\
OOOll\
lO
*
llOO\
ll\
OllOO\

.
Get\
Mag\
ni\
t\
ude
(
)
;
return
lOOOl\
O\
OOlOOO\

;
}
inlin\
e
bool
TAC_CA\
LL
lOOOlOOOllll\

(
const
Vec3
&
lOOOOlllll
,
con\
st
Vec3
&
lOOOlOO\
O\
OO\

,
const
Vec3
&
v3Cen\
ter
,
float\

llll\
lO\
OOOl
,
float
&
lOOOlOOl\
OOOO
,
flo\
at
&
lOOOl\
OOl\
O\
OOl
)
{
flo\
at
lOlOOOlO\
lOO
=
(
v3\
Center
-
lOOOOl\
llll
)
.
Do\
t
(
lO\
O\
O\
lOOOOO
)
;
Vec3
ll\
OlOOl\
lOll
=
lOOOOl\
llll
+
lOlOOOlOlOO
*
lOOO\
l\
O\
O\
OOO
;
float
lO\
lllOOlll
=
(
llOlOOl\
lO\
ll
-
v3\
C\
en\
te\
r
)
.
Get\
Ma\
gni\
tu\
de\
S\
qrd\

(
)
;
if
(
lOlll\
OOlll\

>
llll\
lOOOOl\

*
ll\
lllOOOOl
)
re\
turn
fals\
e
;
fl\
oat
llO\
l\
OOll\
lOO\

=
Sq\
rt\

(
ll\
lllOOOO\
l\

*
lllllOO\
OOl\

-
lOll\
lOOlll
)
;
lO\
OOlOOl\
OOOO
=
lO\
lOOOl\
Ol\
OO\

-
llO\
l\
O\
Olll\
OO
;
lOO\
OlOOlOOOl
=
lOlO\
OO\
lOlOO
+
llOlO\
OlllOO
;
ret\
u\
rn
true
;
}
inline
void
TA\
C\
_\
C\
ALL\

lOOOl\
OO\
l\
OO\
lO
(
co\
ns\
t
Vec\
3
&
lO\
OOlOOl\
OO\
ll
,
Vec\
3
&
lOOOlOOlOlOO\

,
cons\
t
Vec3
&
lOl\
lO\
OlOO\
O
,
cons\
t\

Ve\
c3\

&
lO\
O\
OlOO\
lOlOl\

,
con\
s\
t
Vec\
3\

&
llOOllO\
llOl\

,
floa\
t\

lOOOlOOlOl\
l\
O\

)
{
con\
st
fl\
oat
lOllOl\
Olll\

=
0.0001f
;
if\

(
(
1.0f
-
Fa\
b\
s\

(
lOll\
OOlOOO
.
Do\
t\

(
llO\
Ol\
lO\
llO\
l
)
)
)
<
lOl\
lO\
lO\
lll
)
ret\
urn
;
Vec3
ll\
lllOllOO
=
lOOO\
lOO\
l\
OlOO
-
lOO\
O\
lOOlOOll
;
Ve\
c3
lOll\
lll\
O\
OO\

=
Vec3
::
Cross
(
lllllOllOO\

,
llOOllOl\
lOl\

)
;
Vec3
lOlll\
llOOl
=
lOll\
ll\
lOO\
O
.
Cross
(
llOOllO\
llOl
)
;
fl\
oat
lO\
l\
lll\
lO\
lO
=
lO\
lll\
llOOl
.
Dot\

(
lOOO\
lOO\
lOOll
-
lO\
OOlOO\
lOlO\
l
)
;
float
lO\
lllllO\
ll
=
lOlllllOO\
l
.
Do\
t
(
lOO\
O\
lOO\
l\
OlOO
-
lO\
OOlOOl\
O\
lOl
)
;
float
lOlllll\
l\
OO
;
if\

(
Fa\
bs
(
lOlllll\
O\
ll\

-
lOll\
ll\
lOlO
)
<
lO\
llOlOl\
ll
)
return
;
els\
e
lOlll\
lll\
O\
O
=
lOlll\
llO\
l\
O\

/
(
lOlllllO\
lO
-
lOll\
ll\
lOll
)
;
Vec3
lll\
llOlOOl\

=
lOOOlOO\
lO\
Oll
+
lll\
llOllOO
*
lO\
llllll\
OO
;
lOlllllOlO
=
llOO\
llOll\
Ol\

.
Do\
t
(
lll\
llOl\
OOl
-
lO\
OO\
lOO\
lOlOl
)
;
Vec3
lllllOllll\

=
lOO\
O\
lOO\
lO\
lOl
+
llO\
O\
llOl\
lOl\

*
lO\
lll\
llO\
l\
O
;
float
lOlllOO\
lll\

=
(
ll\
lll\
Ol\
lll
-
lll\
llOlOO\
l
)
.
GetM\
a\
g\
nitudeS\
qr\
d
(
)
;
if
(
lOl\
ll\
O\
O\
lll
>
lOOOlOO\
lOllO
*
lO\
OOlOO\
lOllO
)
return
;
float\

llOlOO\
lllOO
=
Sq\
r\
t
(
lOOOlO\
OlO\
llO
*
lOOOlOOlOllO\

-
lOlllOO\
lll
)
;
float
lO\
OOlOOlOlll
=
lOllO\
OlOOO
.
Cro\
ss
(
llOO\
llO\
llO\
l
)
.
Ge\
tMa\
g\
nitu\
de
(
)
;
if\

(
Fabs
(
lO\
OOlO\
O\
lOlll
)
<
lOl\
lOlOl\
ll
)
ret\
u\
r\
n
;
ll\
OlO\
O\
l\
llOO
/=
lO\
OOlOOlO\
ll\
l\

;
Vec3
lOOO\
lOOll\
OOO
=
lllllOlO\
Ol
+
lO\
l\
lOO\
lOOO
*
llOlOOlllOO
;
if\

(
lOl\
l\
OOl\
OOO
.
Dot\

(
lOOO\
lO\
Ol\
lOOO
-
lO\
OOlO\
OlOlOO
)
>
0.0f
)
return
;
lOOOl\
OOlOlOO
=
lOOOlOOllOO\
O
;
}
inline
float
TAC\
_CALL
lO\
OOlOOOllO\
l
(
con\
st
Vec3
&
lO\
lll\
Ollll
,
cons\
t
Vec3
&
llO\
l\
O\
OOll\
OO
,
float
lOOOlOOOlllO
,
cons\
t\

Ve\
c3
&
lO\
lll\
lOOOl\

,
const
Vec3
&
llOlOOlOO\
l\
O
,
float
lO\
OO\
lOOllOOl
,
Vec3
&
lOlllOllOO
,
Vec3
&
lO\
lll\
lOlOO
)
{
if
(
lOlllO\
llll
.
Dot
(
lOl\
lllOO\
O\
l\

)
>
0.1f
)
retur\
n
-
1.0f
;
Vec3
lOO\
OlO\
Oll\
OlO\

=
lOll\
lO\
llll\

.
Cross\

(
lOl\
lllOO\
O\
l
)
;
fl\
oat\

lOOOl\
O\
OlOlll\

=
lO\
OOl\
OOll\
O\
lO
.
Ge\
t\
M\
agn\
itude\

(
)
;
if
(
Fab\
s
(
lOOOlO\
Ol\
Olll
)
<
0.000000001f
)
return\

-
1.0f
;
lO\
OOl\
O\
OllOlO\

/=
lOOOlOOlOlll\

;
Vec3
lll\
OlOll\
OOO\

=
-
lO\
l\
l\
lOll\
l\
l
.
Cr\
oss
(
lO\
O\
Ol\
OOll\
OlO\

)
*
lOll\
llOOOl
.
Dot\

(
llOl\
OOlOOlO
-
llOlO\
OOl\
lOO
)
/
lO\
OO\
lOO\
lOll\
l\

;
Ve\
c3
lOOOlOO\
llOll
=
llO\
lOO\
Ol\
lO\
O\

+
ll\
lOlO\
llOO\
O
;
float
lOOOlOOlllOO
;
floa\
t
lOOOl\
O\
O\
lllOl
;
if
(
!
lOOO\
lOOOllll
(
lO\
OOlO\
OllOll
,
lOO\
OlOOllOlO\

,
llOlO\
OO\
ll\
OO
,
lOOOlOOOlllO\

,
lOOOl\
OOlll\
OO
,
lOOOlO\
Ol\
llOl\

)
)
ret\
urn
-
1.0f
;
flo\
at
lOOO\
lOO\
l\
lllO
;
flo\
at
lO\
O\
Ol\
OOl\
llll
;
if
(
!
lOOOl\
OOOllll
(
lOOOlOOllOll
,
lOOOlOOl\
lOl\
O
,
llOlO\
OlOO\
lO
,
lO\
OOlOO\
l\
lO\
Ol\

,
lO\
O\
O\
lO\
O\
ll\
llO
,
lOOOlO\
O\
ll\
l\
l\
l
)
)
retur\
n\

-
1.0f
;
if
(
lOOO\
lO\
O\
lllO\
l\

>
lO\
OO\
lOOllllO
&&
lOO\
O\
lOO\
llll\
l
>
lOOOl\
OOl\
l\
lOO
)
{
fl\
o\
at
lO\
OllO\
OOOl\

=
lOO\
OlOOlllOO\

>
lO\
OOlO\
Ollll\
O
?
lOOOl\
OOlll\
OO
:
lOOOl\
OOl\
ll\
lO
;
floa\
t
lOO\
llOOOlO
=
lOO\
Ol\
OOll\
lO\
l
<
lOO\
O\
l\
O\
Olllll
?
lOOOlO\
OlllOl
:
lOOO\
l\
OOl\
ll\
l\
l\

;
float
lOOOlOlOO\
O\
OO
;
flo\
at
lO\
O\
OlOlOOOO\
l
;
fl\
oat\

lO\
O\
O\
lO\
lOOO\
lO
=
(
lOOl\
lOO\
OO\
l
+
lOO\
ll\
OO\
OlO\

)
*
0.5f
;
Vec3\

llO\
llOO\
llO
=
lOOO\
lOOllOll
+
lOO\
OlOOl\
lOlO\

*
lOOOlOlO\
OOl\
O
;
Ve\
c3
llOOll\
lO\
OlO
=
lOOOlOO\
llOl\
O
.
Cr\
oss
(
lOl\
ll\
Ollll
)
;
if
(
llOO\
lllOOlO
.
Do\
t
(
lOl\
lllO\
OOl
)
<
0.0f
)
llO\
Ol\
llOOlO\

=
-
llOOlllOOlO
;
float\

lOO\
OlOlO\
OOll
=
k_fMa\
xFloat
;
Ve\
c3
llllO\
OO\
lOO
;
if
(
lO\
OO\
lOOOllll
(
ll\
Oll\
OOllO\

,
llOO\
ll\
lOOl\
O
,
llOl\
OOOl\
lOO\

,
lO\
OOlOOOl\
llO
,
lOO\
O\
lOl\
OOO\
OO
,
lOOOlOlO\
OOOl
)
)
{
llllOOOlOO\

=
llO\
llO\
OllO\

+
llOOlll\
OOlO
*
lOOOlOl\
OO\
OOl\

;
lOOO\
lOOl\
OOlO\

(
llOllOO\
l\
l\
O
,
ll\
l\
lOO\
O\
l\
OO\

,
llO\
O\
lllOOl\
O
,
ll\
O\
lO\
Ol\
OOl\
O\

,
lOll\
llO\
O\
O\
l
,
lOOOl\
O\
Ol\
lOOl
)
;
lOO\
Ol\
OlOOO\
l\
l\

=
-
lOl\
l\
llO\
O\
Ol\

.
Do\
t
(
ll\
O\
lOOlOO\
l\
O\

-
lll\
lOOOlOO
)
;
}
llOOl\
llO\
Ol\
O
=
lOO\
OlOOl\
l\
OlO\

.
Cross
(
lOl\
lllO\
OO\
l\

)
;
if
(
ll\
OOlll\
OOl\
O\

.
Dot
(
lOll\
lOllll
)
<
0.0f
)
llOOl\
llOOlO
=
-
llO\
Oll\
l\
OOlO
;
float
lO\
OOlOlOO\
lOO
=
k_fMa\
xFl\
oat\

;
Ve\
c\
3\

llllOOOOl\
l
;
if
(
lOOO\
l\
O\
OO\
lll\
l
(
llOllOO\
llO\

,
llOOl\
l\
lOOlO\

,
llOlO\
OlOOlO
,
lOOOlO\
OllOOl
,
lOOOl\
OlOOOOO
,
lOO\
O\
lOl\
OO\
OOl
)
)
{
ll\
ll\
OOOOll
=
llO\
l\
l\
OOll\
O\

+
llO\
O\
ll\
l\
OOlO
*
lOOOlO\
l\
OO\
OOl\

;
lO\
O\
OlO\
Ol\
OOl\
O
(
llOl\
l\
OO\
llO
,
llllOO\
OOl\
l
,
llOOlllO\
OlO\

,
llO\
lOOO\
llO\
O
,
lOl\
llO\
ll\
ll
,
lOOOl\
OOOl\
llO\

)
;
lOO\
Ol\
O\
l\
OOlOO
=
-
lOlll\
Ollll
.
Dot
(
ll\
OlOO\
OllOO\

-
llll\
O\
OOOll
)
;
}
if
(
lO\
OOl\
OlOO\
lOO
<
lOOOlOl\
OO\
Oll
)
{
if
(
lOOOlO\
lOOl\
OO
==
k_fMaxFl\
oat
)
retu\
rn
-
1.0f
;
lO\
lllOllO\
O\

=
lll\
lOOOOll\

;
lOllllOlOO\

=
lOlll\
O\
l\
ll\
l
;
retu\
rn
lO\
OOl\
O\
lO\
OlO\
O
;
}
else
{
if
(
lOOOlOlOOOll\

==
k_\
fMaxFloa\
t
)
return
-
1.0f
;
lOlllOl\
l\
O\
O
=
llllO\
OOlOO
;
lOllllOlOO
=
-
lOlll\
lO\
O\
O\
l
;
ret\
u\
rn
lO\
O\
OlO\
lO\
OOll
;
}
}
el\
se
{
ret\
urn
-
1.0f
;
}
}
bool
TA\
C_CAL\
L
lOO\
O\
lO\
l\
O\
O\
l\
Ol
(
co\
n\
s\
t
Vec\
3
&
llllO\
Ol\
l\
Ol
,
const
Ve\
c3\

&
lll\
lOOlllO
,
cons\
t
Vec3
&
llllOOl\
ll\
l\

,
const
Vec3\

&
llllOlO\
OOO\

,
Vec3
&
lllllOlOOl\

,
Vec\
3\

&
lll\
llOll\
l\
l\

)
{
co\
n\
s\
t
float\

lOllO\
lO\
lll
=
0.0001f
;
Vec3
lllllOll\
OO
=
ll\
llO\
Olll\
O
-
ll\
l\
lOOll\
Ol
;
Vec3
lllll\
O\
llO\
l
=
ll\
l\
lOl\
OO\
OO
-
lll\
lOOllll
;
Vec3
lOlllllOOO
=
Vec3
::
Cross
(
ll\
ll\
lOllOO
,
lllllO\
llOl
)
;
Vec3\

lOlllllOOl\

=
lOlll\
llOOO
.
Cr\
oss
(
llll\
lOllOl
)
;
floa\
t
lOl\
l\
l\
l\
lOl\
O\

=
lOll\
lllOOl\

.
Dot
(
llll\
OOllOl\

-
lll\
lOOl\
lll
)
;
flo\
at
lOlllllOll
=
lOl\
llllOOl
.
Dot
(
ll\
llOOlllO
-
llll\
OOllll
)
;
floa\
t\

lOll\
llll\
OO\

;
if
(
Fabs\

(
lOlllllOll
-
lOll\
l\
l\
lOlO
)
<
lOllO\
l\
Olll
)
{
float\

lOll\
llOl\
O\
l
=
lllll\
O\
llOl
.
GetM\
agni\
t\
ude
(
)
;
if\

(
lOllllOlOl
<
lOl\
lO\
lOlll\

)
{
retu\
r\
n\

fals\
e
;
}
else\

{
re\
turn
fals\
e\

;
lll\
llOl\
lOl\

/=
lOll\
l\
lO\
l\
Ol
;
Ve\
c3\

llllO\
lOOOl
;
Vec3
ll\
llOlOOlO
;
if
(
lllllO\
llO\
O
.
Do\
t\

(
ll\
lll\
Oll\
Ol
)
<
0.0f
)
{
lllll\
OllOl\

=
-
lllll\
OllO\
l
;
lll\
lOlOO\
Ol
=
ll\
llOl\
OOOO
;
ll\
llOlOOlO
=
llllOOlll\
l\

;
}
el\
se
{
llllOlOO\
Ol
=
lll\
lO\
Oll\
ll\

;
ll\
llOl\
OOlO
=
llll\
Ol\
OOO\
O
;
}
lOlll\
llOl\
O
=
lllll\
OllOl\

.
Dot
(
lll\
lOOlllO
-
llllOlOOOl\

)
;
if
(
lO\
lllllO\
lO
<
0.0f
)
re\
turn
false\

;
lOl\
llllO\
l\
l
=
lllll\
OllOl\

.
Dot
(
llllOOll\
Ol
-
llllOlO\
Ol\
O
)
;
if\

(
lOllll\
lOl\
l
>
0.0f
)
re\
tu\
rn
false\

;
lOll\
ll\
l\
O\
lO
=
lllllOll\
Ol
.
Do\
t
(
llll\
O\
OllOl\

-
lll\
lO\
lOO\
O\
l
)
;
if
(
lOl\
llllOlO
<
0.0f
)
lOllll\
lOlO\

=
0.0f
;
lO\
lll\
l\
lOll
=
lll\
l\
lOllOl
.
Dot
(
ll\
llOOlll\
O
-
ll\
llOlOO\
Ol
)
;
if
(
lOlllllOll
>
lOl\
lllO\
lO\
l
)
lOl\
llll\
Oll\

=
lOl\
lllO\
lOl
;
ll\
lllOl\
l\
ll
=
llllO\
lOOOl
+
lll\
llOll\
Ol
*
(
(
lOllll\
lO\
lO
+
lOl\
ll\
l\
lOll
)
*
0.5f
)
;
lOll\
lll\
OlO\

=
lllll\
OllO\
O
.
Dot
(
ll\
l\
lOOllOl
-
ll\
l\
llOlll\
l
)
;
lOlllllOll
=
llll\
l\
O\
llO\
O
.
Do\
t\

(
llllO\
OlllO
-
ll\
l\
llOl\
l\
l\
l\

)
;
if
(
Fabs
(
lOl\
ll\
llOl\
l
-
lOlllll\
OlO
)
<
lO\
ll\
OlOll\
l
)
lll\
llOlOOl
=
(
ll\
l\
l\
OOll\
Ol
+
llllO\
OlllO
)
*
0.5f
;
else
ll\
lllOlOOl\

=
ll\
llO\
OllO\
l
+
ll\
ll\
l\
OllO\
O
*
(
lOl\
l\
lllOlO
/
(
lOll\
lllO\
lO
-
lO\
llll\
l\
Oll\

)
)
;
re\
t\
urn\

tru\
e
;
}
}
el\
s\
e\

{
lOl\
l\
llll\
O\
O\

=
lOll\
lll\
Ol\
O
/
(
lOlllllOlO
-
lO\
l\
lll\
lO\
l\
l
)
;
}
Clamp
(
lOl\
lllll\
O\
O
,
-
1.0f
,
1.0f
)
;
llll\
lOlOOl
=
llllOO\
ll\
Ol
+
lllll\
Ol\
lOO\

*
lOllllllOO
;
lOl\
llllOlO
=
ll\
lllOll\
O\
l
.
Do\
t\

(
lll\
lOOllll
-
ll\
lllOlO\
Ol
)
;
lOll\
lllOll\

=
ll\
l\
llO\
l\
lOl
.
Dot
(
lll\
lOlO\
OOO\

-
lllllOlO\
Ol
)
;
if
(
Fabs
(
lOlllll\
Ol\
l
-
lO\
lllllOlO\

)
<
lO\
llOlOlll
)
return
false
;
else
lOl\
lllll\
O\
O\

=
lOl\
l\
lllOl\
O\

/
(
lOlllll\
O\
lO\

-
lOllll\
lOll
)
;
if
(
lO\
ll\
ll\
llO\
O
<
0.0f
||
lOlllll\
lOO
>
1.0f
)
retu\
r\
n
false
;
lllllOllll\

=
ll\
l\
l\
O\
O\
llll
+
lllllOll\
Ol
*
lOlll\
ll\
lOO
;
retu\
r\
n
true
;
}
float
TAC\
_C\
A\
LL
lOO\
OlOlOO\
llO
(
con\
st
Vec3
&
lO\
lllO\
ll\
l\
l
,
cons\
t
Vec\
3
&
llO\
lO\
OO\
llOO
,
fl\
oat
lO\
OOlOOO\
lllO
,
con\
s\
t
Vec3
&
lO\
l\
ll\
lOOOl
,
co\
ns\
t
Vec3\

&
llOlOO\
lO\
OOl
,
const
Ve\
c3\

&
llOlOOl\
OOlO
,
floa\
t\

lOOOl\
OO\
llO\
O\
l
,
Vec\
3
&
lOlll\
OllO\
O
,
Vec3
&
lOllllOlOO
)
{
Vec3
llOOlll\
OOlO
=
llOlOOlOO\
lO
-
ll\
OlOO\
Oll\
OO\

;
ll\
OOl\
llOOlO
-=
lOllllOOOl\

*
llO\
Ol\
llOOlO\

.
Dot
(
lOll\
llO\
OOl
)
;
llO\
O\
l\
ll\
O\
OlO
-=
lO\
lll\
Ol\
lll
*
llOO\
l\
llOO\
l\
O
.
Do\
t\

(
lO\
lll\
O\
l\
l\
ll
)
;
flo\
at
lOll\
llO\
l\
O\
l
=
llOOlllOOlO\

.
Ge\
tMagnit\
ud\
e\

(
)
;
if\

(
lOllllO\
lOl\

<
0.0001f
)
llO\
O\
ll\
lOOlO\

.
Cle\
ar
(
)
;
els\
e\

llOOl\
llOOlO\

/=
lO\
llllOlOl
;
Ve\
c3
llOl\
O\
OllOll\

;
Ve\
c3
lOO\
OlOl\
OOl\
ll
;
if
(
!
lOOO\
lOlOOlOl
(
llOl\
OOOll\
OO
,
llOlO\
O\
Ol\
lOO
+
llO\
O\
lllOOlO
*
lO\
OO\
lOOOl\
l\
l\
O
,
llO\
lO\
O\
lOOOl\

,
llOlOOlOOlO
,
llOl\
OOl\
lOl\
l
,
lO\
O\
OlOlOOl\
ll\

)
)
retu\
rn\

-
1.0f
;
Vec3\

lOOOlO\
O\
OOO
=
llOlOO\
llOll\

-
lOOO\
lOl\
OO\
lll
;
floa\
t\

lOOO\
l\
O\
OOlO\
O\
O
=
lO\
OO\
lOOO\
OO
.
GetMa\
gnitud\
e
(
)
;
if
(
lOOOl\
OO\
O\
l\
O\
OO
>
lOO\
Ol\
OOllOOl\

)
retu\
r\
n
-
1.0f
;
if
(
lOOOlOOOlO\
O\
O
<
0.00001f
)
ret\
urn
-
1.0f
;
lO\
OO\
lOOOO\
O
/=
lO\
OO\
lOOO\
lO\
OO
;
if
(
lO\
OOlOOOOO
.
Dot
(
llO\
lO\
OO\
ll\
OO
-
ll\
OlOOlOOlO
)
<
0.0f
)
{
lOOOlO\
O\
OlOO\
O\

=
lOOO\
lOOllOOl
+
lOOO\
lOOO\
lOOO
;
lO\
OOlOOOOO
=
-
lOO\
OlOOOO\
O
;
}
else
{
lOO\
OlO\
OOlOOO
=
lO\
OOlOOllOO\
l
-
lOOOlOOO\
lOOO
;
}
if
(
lO\
O\
Ol\
O\
OO\
O\
O\

.
Dot
(
lO\
lll\
Oll\
ll
)
<
0.0f
)
ret\
u\
rn\

-
1.0f
;
if
(
lOOO\
lOOOlOOO
>
0.0f
)
{
lOOO\
lOO\
l\
OOl\
O
(
lO\
OOlOlO\
Oll\
l
,
ll\
OlOOllOl\
l\

,
-
lOOOlOOO\
OO
,
llOlO\
OlOOlO
,
lOllll\
O\
OOl\

,
lOOO\
lO\
O\
llOOl
)
;
floa\
t
lO\
lOO\
OlOlOO
=
lOlll\
lOOOl
.
Do\
t
(
lOlllO\
l\
lll
)
;
if
(
lOl\
O\
OOlOlO\
O
<
0.1f
)
{
flo\
at
llOOl\
l\
llOlO
=
lOllll\
OOOl
.
Dot\

(
llOlOO\
llOl\
l
-
llO\
lOOlO\
OOl
)
;
if
(
ll\
OOllllOlO
<
lO\
OOlOOO\
l\
OOO
&&
lOllllOOOl
.
Dot\

(
ll\
Ol\
OOl\
l\
Oll
-
llOlOOOllO\
O
)
>
0.0f
)
{
lOOO\
l\
OO\
OlOOO
=
llOOll\
llOlO
;
lOl\
llO\
l\
lOO
=
llO\
lOO\
ll\
Oll\

;
lOllllO\
lO\
O
=
-
lO\
l\
lllOOO\
l
;
}
els\
e
{
lOll\
lOllO\
O\

=
ll\
OlOOllO\
ll\

;
lOll\
ll\
OlO\
O
=
lOO\
OlOO\
OOO
;
}
}
if
(
lO\
lOO\
OlOlOO
>
-
0.1f
)
{
float\

llO\
Ol\
ll\
lO\
ll\

=
lOlll\
lOOOl
.
Dot\

(
llOl\
O\
OlO\
O\
l\
O
-
llOlOO\
llOll
)
;
if
(
ll\
OOllllOll
<
lOOOlOOOlOOO
&&
lOl\
ll\
lOOOl
.
Dot
(
ll\
OlO\
OllOll\

-
llOl\
OOOl\
lOO
)
<
0.0f
)
{
lOOOlOOOl\
OOO
=
llO\
Oll\
l\
lOll
;
lOlllOll\
OO
=
ll\
OlOO\
llO\
ll
;
lOl\
lllOl\
O\
O
=
lOl\
lllO\
OOl
;
}
else
{
lOll\
lOl\
lOO
=
ll\
OlOOllOll\

;
lOll\
l\
lOl\
OO
=
lO\
O\
O\
lOOO\
OO
;
}
}
}
return\

lO\
OO\
l\
OOO\
l\
OOO
;
}
inline
voi\
d
TAC_CA\
LL
lOOOl\
OlOl\
O\
O\
O\

(
co\
nst\

Vec3\

&
lllllllll
,
const\

Vec3
&
lOlllOllll
,
co\
nst
float
lOOO\
lOOO\
l\
ll\
O\

,
co\
ns\
t
Vec3
&
lOOO\
OOOOO\
O\

,
co\
nst
Ve\
c3
&
lOll\
llOOOl
,
con\
s\
t
float
lOOO\
l\
O\
Oll\
OOl
,
lOl\
lOll\
lOOO
*
lOlllOOOOll\

)
{
con\
st
float
lO\
l\
lOlOlll
=
0.0001f
;
Ve\
c\
3
lOOOl\
OlO\
lOO\
l
[
4
]
;
Vec3
lOOOl\
O\
l\
Ol\
OlO\

=
lOOOO\
OOOOO
+
lOlllOl\
lll\

*
lOlllOl\
lll
.
Dot
(
ll\
l\
ll\
llll
-
lOOO\
OOOOOO
)
;
Ve\
c\
3
ll\
llOOOOO\
lO
=
lOOOlOlOlOl\
O
-
ll\
l\
ll\
llll
;
float
lOO\
OlOl\
OlOll
=
llllOO\
O\
OOlO
.
GetMag\
nit\
ude\

(
)
;
if
(
lOOOlOlOlOll
<
lOl\
lOlO\
lll
)
{
if
(
Fabs
(
lO\
lll\
O\
llll
.
x
)
<
0.707f
)
llllOOO\
OOlO\

=
lO\
l\
llO\
llll
.
Cros\
s\
WithUnit\
X
(
)
;
else
llllOOOOOlO
=
lOlllOllll
.
Cr\
ossWi\
thU\
nitY
(
)
;
lO\
OOlOlOlO\
ll\

=
ll\
llOO\
OO\
OlO
.
Ge\
tMagnitud\
e
(
)
;
TA_ASSERT
(
lOOOlOlO\
lO\
l\
l
>
lO\
llO\
lO\
l\
ll
)
;
llll\
OOOOOlO
/=
lOOOlOlOlOll
;
Vec3
lOll\
l\
llOOO\

=
llllO\
OOO\
O\
l\
O\

.
Cr\
oss
(
lOl\
llOll\
ll\

)
;
if
(
lOOOlOOO\
lllO
<
lOOOlOOllOOl
)
{
lO\
OO\
lOlOl\
OOl
[
0
]
=
lllllllll
+
llllOOO\
OOlO
*
lOOOlOOOlllO
;
lOOOlOl\
OlOO\
l
[
1
]
=
ll\
lll\
llll
-
llllO\
O\
OOO\
lO\

*
lOOOlOOO\
lllO\

;
lOO\
OlOlO\
l\
OOl
[
2
]
=
ll\
lll\
llll
+
lOl\
llllOOO
*
lOOO\
lOO\
O\
l\
l\
lO
;
lOOOlOl\
OlOOl
[
3
]
=
ll\
ll\
lllll
-
lOl\
llllOOO\

*
lOOOlOOOlllO\

;
}
else
{
lOO\
O\
lOl\
Ol\
OOl
[
0
]
=
lO\
OOl\
Ol\
Ol\
OlO
+
lll\
l\
OOOOO\
lO
*
lOOOl\
OOll\
OOl
;
lOOOl\
O\
l\
OlOOl
[
1
]
=
lOOO\
l\
OlOlOlO
-
llllOOOO\
Ol\
O
*
lOO\
OlOOllO\
Ol
;
lOOOlOlOlOO\
l
[
2
]
=
lOOOlO\
lOlO\
lO
+
lOlll\
l\
l\
OOO\

*
lOO\
OlOOll\
OOl
;
lOOO\
lOlOlOOl
[
3
]
=
lO\
O\
OlOl\
O\
lO\
lO
-
lOllll\
lO\
OO
*
lOOOlOO\
ll\
O\
Ol
;
}
}
el\
se
{
ll\
llOOO\
OOlO\

/=
lOOO\
l\
Ol\
OlOll
;
Vec3\

lO\
ll\
l\
llOOO
=
llll\
O\
OO\
O\
OlO\

.
Cr\
o\
ss\

(
lOlllOllll
)
;
float\

lO\
OOlOlOllO\
O
=
(
lO\
OOlOO\
llO\
Ol
*
lOO\
Ol\
OOllOOl
-
lOOOlO\
OOlllO
*
lOOOlOOOlllO
-
lOOOlOlO\
l\
Ol\
l
*
lOO\
OlO\
lOlO\
l\
l
)
/
lOO\
OlOlOlO\
ll
*
0.5f
;
if
(
lOOOlOlO\
llO\
O
>=
0.0f
||
lOOOl\
Ol\
OllOO
<=
-
lO\
OOl\
Ol\
OlOll
)
{
if
(
lOOOlOOOll\
l\
O
<
lOOOlOOll\
OOl\

)
{
lOOO\
l\
OlOlO\
Ol
[
2
]
=
lllllll\
ll
+
lOlll\
ll\
OOO
*
lOO\
Ol\
OOOll\
l\
O
;
lOO\
Ol\
O\
lO\
lOOl
[
3
]
=
lll\
l\
l\
lll\
l\

-
lOllll\
lO\
OO
*
lOOOl\
O\
OOl\
l\
l\
O
;
}
els\
e\

{
lOO\
Ol\
OlO\
lOOl
[
2
]
=
lOO\
O\
lOlO\
l\
OlO
+
lOlllllOO\
O
*
lOOO\
lOOllOOl
;
lOO\
O\
l\
O\
lOlO\
Ol
[
3
]
=
lO\
OOlOl\
OlOl\
O
-
lO\
l\
l\
lllOO\
O
*
lOOOlO\
O\
llOOl
;
}
if
(
ll\
llOO\
OOO\
l\
O\

.
Dot
(
llllll\
lll
-
lOOO\
lO\
lOlO\
lO
)
+
lOOOlO\
Ol\
lO\
Ol
>
lOO\
OlO\
OOlllO
)
lO\
OO\
lOl\
OlOO\
l
[
0
]
=
llll\
ll\
ll\
l\

-
llllOO\
O\
OO\
lO
*
lO\
OOl\
OO\
O\
lll\
O
;
els\
e
lOO\
OlOl\
OlOO\
l\

[
0
]
=
lOOOlOlOlOlO\

-
ll\
l\
lO\
OOO\
OlO
*
lOOOlOOl\
l\
O\
Ol
;
if
(
ll\
ll\
OOOOOlO
.
Dot\

(
lOO\
OlOl\
Ol\
OlO\

-
llllll\
lll\

)
+
lO\
OO\
l\
O\
O\
ll\
OO\
l\

>
lOOOlOOOl\
llO\

)
lOOOl\
OlOlOO\
l
[
1
]
=
lll\
llllll
+
lll\
l\
OOOOOlO
*
lOOOlOOOlll\
O
;
el\
se
lOO\
O\
lOlOlO\
O\
l
[
1
]
=
lOOO\
lO\
l\
Ol\
OlO
+
llllOOOOOl\
O
*
lOOOlOOllOOl
;
}
els\
e
{
flo\
at
lO\
OOlOlOl\
lOl
=
(
lOO\
O\
l\
OOOlllO
*
lOOOlO\
OO\
l\
ll\
O
-
lOO\
O\
l\
O\
lOll\
O\
O\

*
lO\
OOlOlOllOO
)
;
if
(
lOO\
OlOlOllOl
<
0.0f
)
return
;
lOOOlOl\
Oll\
Ol
=
Sqrt
(
lOOOlOl\
O\
ll\
Ol
)
;
lOOO\
lOlOlOOl
[
0
]
=
lllllllll
-
ll\
llOOO\
OOlO\

*
lOO\
O\
lOlOllOO\

+
lOlllllOOO
*
lO\
OOlOlOllO\
l\

;
lOOOlOl\
OlOO\
l\

[
1
]
=
lllll\
l\
lll
-
lll\
lOO\
O\
OOlO
*
lO\
OOl\
OlO\
l\
lOO
-
lOllll\
l\
OOO
*
lOOOlOl\
OllO\
l
;
if
(
llllOOO\
OOlO
.
Do\
t
(
lllll\
llll
-
lOOOlOl\
Ol\
OlO\

)
+
lOO\
OlOO\
l\
lO\
Ol
>
lOOOl\
OOOlllO
)
lOOOlOlOlOOl
[
2
]
=
llllll\
lll\

-
llllOO\
OOOl\
O\

*
lO\
OOl\
OOOll\
lO
;
else
lO\
OOlOlOlOOl
[
2
]
=
lOO\
OlO\
lOlOlO
-
ll\
llOOOO\
OlO
*
lOOOlOOl\
lO\
Ol
;
if
(
ll\
l\
lOOOOO\
l\
O
.
Dot
(
lOOO\
lOlOlOlO
-
lllllll\
ll
)
+
lOOO\
lOOll\
OO\
l
>
lOO\
O\
lOOOll\
lO
)
lO\
OOlO\
lOlO\
Ol
[
3
]
=
lll\
ll\
ll\
ll
+
lll\
lO\
O\
OOO\
l\
O
*
lOOOlOOO\
l\
llO
;
else
lOOOl\
Ol\
OlOO\
l
[
3
]
=
lO\
OOlOlOlOl\
O
+
llllO\
OOOOl\
O
*
lOOO\
l\
OOllOO\
l\

;
}
}
fo\
r\

(
int
lOOOllO\
OOl\

=
0
;
lOOOllOO\
O\
l
<
4
;
lOO\
O\
llOO\
O\
l\

++
)
{
floa\
t
lllOlll\
lll\
l
=
lOllll\
OOOl
.
Dot
(
lOOOlO\
l\
OlOOl
[
lOO\
OllOO\
Ol\

]
-
lOO\
OOOOOO\
O
)
;
if\

(
lllOlll\
llll
>
0.0f
)
{
Col\
l\
is\
i\
o\
n
lOllOllOll\
l\

;
lO\
l\
lO\
llOlll
.
Ini\
tialis\
e
(
Col\
li\
sion
::
lO\
l\
lO\
lOOOOO
,
0.0f
,
lllOllllll\
l\

,
lO\
OOlO\
lOlO\
Ol
[
lOOOl\
lOO\
Ol\

]
,
lOlllO\
ll\
ll
)
;
if
(
!
ll\
lO\
lll\
lOO\
O
(
lOllOllOlll\

,
lOlllOOOO\
ll
)
)
re\
turn
;
}
}
}
voi\
d
TA\
C_CALL
lOO\
OlOlO\
lllO
(
cons\
t
Vec\
3
&
lO\
OOlOlO\
llll
,
const\

Vec3\

&
lOO\
Ol\
OllOO\
O\
O
,
cons\
t
Vec3
&
lO\
OO\
lOl\
lOOOl\

,
con\
st
Ve\
c3
&
lOOOlOllOOlO\

,
co\
n\
st\

Vec\
3
&
llOO\
llOllOl
,
const\

Vec3
&
lO\
OO\
lOllO\
O\
ll\

,
float
lOO\
OlOllO\
lO\
O
,
float
lOOO\
lOOl\
Ol\
lO\

,
float
lO\
O\
OOOll\
ll
,
bool
lOO\
OlOllO\
lOl
,
lOllOlll\
O\
OO\

*
lO\
lllOO\
OO\
l\
l
)
{
cons\
t\

fl\
oat\

lOl\
lOlOlll
=
0.0001f
;
Vec3
lOOOlOllOl\
lO
;
Vec\
3
lOOOlOll\
Ol\
l\
l
;
Ge\
ometr\
y
::
Fi\
ndClose\
stP\
ointOnLin\
eToLine
(
lOOOlOlOllll
,
lOOOl\
O\
ll\
OO\
OO
,
lOOOlO\
l\
lOOOl
,
lO\
OOlOl\
lOOl\
O
,
lOOOlO\
l\
lOllO
,
lO\
OOlO\
llO\
lll
)
;
Vec3
lOOOlOOOOO
=
lOOOlOllOll\
O\

-
lOO\
OlOllO\
l\
ll\

;
floa\
t
llOlOOllll\
l
=
lOOOl\
OOOOO
.
GetM\
ag\
ni\
tude
(
)
;
boo\
l
lOOO\
lO\
lllOOO\

=
fals\
e
;
boo\
l
lO\
OO\
lOl\
ll\
OOl
=
fa\
l\
se
;
if
(
llO\
lOOlllll
<
lOll\
Ol\
Olll\

)
{
lOO\
OlOll\
lOOO
=
true
;
lOO\
OlOOOOO
=
(
lOOOlO\
l\
lO\
O\
O\
O\

-
lOOOlO\
l\
Olll\
l
)
.
Cro\
ss\

(
lOO\
OlOllOO\
lO\

-
lOOO\
lOl\
lOOOl
)
;
llO\
l\
OOl\
llll
=
lOOOlOO\
OO\
O
.
GetM\
a\
g\
nitud\
e
(
)
;
if
(
llOlOOl\
llll
<
lOllOlOll\
l\

*
lO\
ll\
OlO\
l\
ll\

)
{
lO\
OO\
lOOOOO
=
(
lOOO\
lO\
ll\
OOll
)
.
Cross
(
lOOOlOll\
OOlO
-
lOOOlOl\
lO\
OOl
)
;
ll\
OlOO\
l\
llll
=
lOOO\
lOOOO\
O
.
GetMagnitude
(
)
;
if\

(
llOlO\
Olll\
l\
l
<
lOllOlOlll
*
lOll\
OlO\
l\
ll\

)
{
lOOOlO\
ll\
l\
O\
Ol
=
true\

;
}
}
}
Vec3
lOOO\
lO\
l\
l\
lOlO
=
lOOOlOOO\
OO
.
Cr\
oss\

(
lO\
OOlOll\
O\
Oll\

)
;
Ve\
c3
lOOOlOlllOl\
l
=
lO\
O\
O\
lOl\
llO\
lO
.
Cro\
ss\

(
lOOOlO\
llOOll\

)
;
flo\
at
lO\
OO\
lOll\
llOO\

=
lOOOlOl\
llOl\
l\

.
GetM\
agnitude
(
)
;
Vec3
lOOOlOl\
l\
llO\
l
=
lOOOl\
O\
O\
OOO
.
Cro\
ss
(
lOO\
OlOllOOll
)
;
Vec3\

lO\
OO\
lO\
l\
l\
lllO
=
lOOOlOllll\
Ol
.
Cross
(
lOO\
OlOl\
lO\
Oll
)
;
float
lll\
lllOllO
=
lOOOl\
O\
l\
l\
lllO
.
GetMagnitud\
e
(
)
;
if
(
!
lOOOlOlllOOl
&&
(
llOl\
OO\
lllll
<
lO\
llOl\
Ol\
l\
l
||
lOOOlO\
ll\
ll\
O\
O
<
lO\
ll\
OlOlll
*
lOll\
Ol\
O\
l\
l\
l
||
llllllOllO\

<
lOllOlOll\
l
*
lOllOlO\
l\
l\
l\

)
)
{
}
els\
e
{
Ve\
c3\

lOOO\
lOl\
lll\
ll
;
Vec3
lOOO\
ll\
O\
OO\
OO\
O
;
if\

(
lO\
OOlOlll\
OOl
)
{
lOO\
Ol\
O\
lllll\
l
=
lO\
O\
Ol\
Ol\
O\
llll
;
lO\
OOllOOOOOO
=
lOO\
OlOllO\
O\
O\
O\

;
}
else\

{
lOO\
O\
lOOOOO
/=
llOlOO\
lllll\

;
if
(
lOOOlOlllOO\
O
)
llOlOO\
l\
llll\

=
0.0f
;
lOOOl\
Oll\
lOll\

/=
lOO\
OlO\
llllOO
;
fl\
oat
lO\
lOO\
OlO\
lOO\

=
-
lOO\
OlO\
lllO\
ll
.
Dot
(
lOOOlOOOO\
O\

)
;
TA_\
ASSERT
(
Fabs
(
lOlOOOlOlOO
)
>
0.0f
)
;
float
llO\
lO\
Ol\
l\
lOO
=
lOOO\
l\
OllOl\
OO\

;
float
lOO\
Ol\
lOO\
OOOl
=
0.0f
;
if
(
llOl\
OOlllOO\

*
lOlOOOlOlOO
>
llOlOOl\
ll\
ll\

)
{
llOlOOlll\
O\
O
=
ll\
OlOOll\
l\
ll\

/
lO\
lOO\
Ol\
OlO\
O
;
lOOOllOO\
O\
OOl\

=
Sqrt
(
lOO\
Ol\
OllOl\
OO
*
lO\
OO\
l\
Ol\
lOlOO
-
llOl\
O\
OlllOO
*
llO\
lOOl\
llO\
O
)
;
}
lOOOlOlllOlO\

.
Norm\
ali\
se\

(
)
;
if
(
lOOO\
l\
Oll\
l\
OlO
.
Do\
t
(
lOOOlOl\
lO\
OO\
O
-
lOOOlOlOll\
l\
l
)
<
0.0f
)
lO\
OOlOl\
llO\
l\
O
=
-
lOOOlOlllO\
lO
;
lOOOlO\
lllllO
/=
ll\
l\
ll\
lOl\
lO\

;
lOlOOOlOlO\
O\

=
-
lO\
O\
OlOllll\
lO
.
Do\
t
(
lOOO\
lOOOOO\

)
;
TA_ASSERT\

(
Fa\
bs
(
lO\
lOOOlOlO\
O\

)
>
0.0f
)
;
ll\
OlOO\
lllOO\

=
lOOOlOll\
OlO\
O
;
lO\
OOl\
l\
O\
OOOO\
l
=
0.0f
;
if
(
ll\
OlO\
OlllOO\

*
lOlOOOlOlOO\

>
llOlO\
Olllll\

)
{
llOl\
O\
Ol\
l\
lOO\

=
llOlO\
O\
l\
ll\
l\
l
/
lOl\
OOO\
lOlOO\

;
lOOOllO\
OOOOl\

=
Sqr\
t
(
lOOOlO\
l\
l\
Ol\
OO
*
lOOOlO\
ll\
OlO\
O
-
llOlOOlll\
OO
*
llOlOOlllO\
O
)
;
}
lOOOlO\
llll\
Ol\

.
Normalise
(
)
;
if
(
lO\
OOlOllllOl
.
Do\
t
(
lOOOlOll\
OO\
OO\

-
lOOOlO\
lOl\
ll\
l\

)
<
0.0f
)
lO\
OOlOl\
l\
llOl\

=
-
lO\
OO\
lOll\
llOl
;
lOO\
O\
lOl\
lllll
=
lOOO\
lOlOl\
lll\

+
lOOO\
lOll\
lO\
l\
l
*
ll\
Ol\
O\
O\
l\
llOO
+
lOOO\
lOlllOlO
*
lOOOll\
OO\
OOO\
l
;
lOOO\
ll\
OO\
OOO\
O\

=
lOOO\
lO\
llO\
OOO\

+
lOOOlO\
ll\
ll\
lO\

*
llOl\
OOlllOO
+
lO\
O\
OlOll\
l\
lOl
*
lOOO\
ll\
OOO\
O\
Ol
;
}
float
lOO\
OllOO\
OOlO
=
llOOllOllOl\

.
Do\
t
(
lOOOlOlll\
l\
ll\

)
;
fl\
oat
lOOOl\
l\
O\
O\
OO\
ll
=
llOOll\
Ol\
lO\
l\

.
Dot
(
lOOO\
l\
lOOOO\
OO
)
;
floa\
t\

lOOO\
llO\
OOlO\
O\

=
llOOll\
OllOl
.
Dot
(
lOOOlOllOOOl
)
;
flo\
at
lO\
OO\
llOOOlOl
=
ll\
OO\
llOll\
O\
l
.
Do\
t
(
lO\
O\
OlOl\
lOOlO
)
;
boo\
l
lOOOll\
O\
OOllO
=
fal\
se
;
if
(
lO\
OOlOllOl\
Ol\

)
{
if
(
(
lO\
OOllOOO\
OlO\

-
lO\
OOllOO\
OlOl
)
>
lOllOlOlll
&&
(
lO\
OOllOOOOll
-
lOOO\
llO\
OO\
lOl
)
<
-
lOll\
OlOll\
l\

)
{
float
lllOlllllO
=
(
(
lO\
OOllO\
OOOlO
-
lO\
OOll\
O\
O\
OlOl\

)
/
(
(
lO\
OOll\
OOO\
O\
l\
O
-
lOOOll\
OOOl\
O\
l
)
-
(
lOO\
O\
llOOO\
Oll\

-
lOOO\
llO\
OOlOl\

)
)
)
;
Vec3
ll\
OOlll\
l\
lO
=
lOOOlOlll\
lll
+
(
lO\
OOl\
lO\
OOOOO\

-
lOOOlO\
l\
lll\
ll\

)
*
lllOlllllO
;
float\

lllOOl\
Olll
=
(
llO\
O\
llll\
lO\

-
lOOOlO\
l\
l\
OOl\
O
)
.
GetMag\
ni\
t\
u\
deSqrd\

(
)
;
if\

(
ll\
lO\
OlOl\
l\
l\

<
lOOOlO\
OlO\
ll\
O
*
lOOO\
lOOlOllO
)
{
Collisio\
n
lOllOl\
lOll\
l
;
lOllOllOl\
l\
l
.
Initiali\
se
(
Colli\
s\
ion
::
lOll\
Ol\
OOOOO
,
ll\
lO\
lllllO
,
0.0f
,
llOOllll\
lO
,
llO\
Ol\
lO\
ll\
O\
l
*
lO\
OOOO\
l\
lll
)
;
if\

(
!
lll\
O\
l\
lllOOO
(
lO\
l\
lOllOl\
l\
l\

,
lOl\
llOOO\
O\
ll
)
)
ret\
u\
rn
;
lOOOllOOOllO
=
true
;
}
}
if
(
!
lOOOllOOO\
llO
&&
(
lOOOllOOO\
OlO\

-
lO\
OOllO\
OO\
lOO
)
<
-
lOl\
lOlOlll
&&
(
lO\
OOllOOO\
Oll
-
lOOOl\
lOO\
Ol\
OO
)
>
lO\
llOlOl\
ll\

)
{
float
lllOlllllO\

=
(
(
lO\
OO\
l\
l\
OOOOlO
-
lOOOllO\
O\
OlOO
)
/
(
(
lOOOllOOOOl\
O
-
lO\
O\
OllOOOlOO\

)
-
(
lO\
OOl\
lOO\
OOll\

-
lOOOllO\
OOl\
OO
)
)
)
;
Vec\
3\

llOOll\
lll\
O
=
lOO\
Ol\
O\
llllll
+
(
lOOOllOO\
OOOO
-
lOOOlOl\
lllll
)
*
lll\
O\
lllllO
;
floa\
t
lllOOlOlll
=
(
llOOll\
ll\
lO
-
lO\
OOlOllOOOl
)
.
GetMa\
gnitudeSq\
rd
(
)
;
if
(
lllOO\
lO\
lll
<
lOOOlOOlOll\
O\

*
lOOOl\
OO\
lO\
llO
)
{
Col\
l\
is\
io\
n
lO\
l\
lOl\
l\
Ol\
ll
;
lOllOllOlll
.
Initialise
(
Coll\
ision
::
lOllOlOOOO\
O
,
lllOl\
lll\
lO\

,
0.0f
,
llO\
Ol\
llllO
,
-
ll\
OOllOllOl\

*
lOOO\
O\
Olll\
l
)
;
if
(
!
lllOllllOO\
O
(
lOllOl\
lOlll
,
lO\
lll\
OOOOll
)
)
ret\
ur\
n
;
lOOO\
llOOOll\
O
=
true
;
}
}
}
if
(
!
lOOOllO\
OO\
llO
)
{
flo\
at
ll\
llOlO\
O\
ll\

;
Vec3
lO\
ll\
l\
lOO\
l\
l\

;
Ve\
c3
lOll\
llOl\
O\
O\

;
if
(
Geome\
try\

::
Tes\
tSp\
hereM\
ovementAgainstLine
(
lO\
OOl\
O\
llll\
ll
,
lOO\
O\
l\
lOOOOOO
,
lO\
OOlOllO\
OOl
,
lOOO\
lO\
ll\
OO\
l\
O
,
lO\
O\
Ol\
OO\
lOllO
,
lll\
lOlOOl\
l
,
lO\
llll\
OOll\

,
lOllllOl\
OO
)
)
{
Coll\
isio\
n
lOllO\
llO\
l\
l\
l
;
lO\
ll\
Ol\
lOll\
l
.
Initial\
ise\

(
Colli\
s\
ion\

::
lO\
llOlOOOOO
,
ll\
l\
l\
OlOO\
l\
l
,
0.0f
,
lO\
llllOOl\
l
+
lOllllO\
l\
OO\

*
lOOOlOOlOl\
lO\

,
lO\
llllOl\
OO
*
lOO\
OOO\
llll
)
;
if\

(
!
lll\
OllllOOO
(
lO\
l\
lOllOl\
l\
l
,
lOll\
lOOO\
Oll
)
)
return\

;
}
}
}
}
vo\
id
TAC_CA\
LL
lll\
lOOlllO\
O\

(
const\

MFr\
a\
me\

&
lOll\
l\
O\
OOOOl\

,
con\
s\
t
MF\
r\
a\
me\

&
lOl\
llOOOOl\
O
,
lOllOll\
l\
OOO
*
lOlll\
OO\
OO\
l\
l
)
{
TA_\
ASSER\
T
(
lOlllOOOOll
->
lOll\
O\
OO\
l\
lll
->
GetCo\
llision\
Ob\
ject\
T\
ype
(
)
==
CollisionOb\
jec\
t\

::
TYPE_CYLINDER
)
;
co\
nst
Collisi\
onOb\
je\
ctCyli\
n\
d\
er\

&
lllO\
llOlll\
O
=
*
(
const
Col\
lisi\
onObj\
ect\
Cyli\
nde\
r
*
)
lO\
lllOO\
O\
Ol\
l
->
lOllO\
O\
Ol\
ll\
l
;
TA_ASSERT\

(
lOl\
llOOO\
Oll
->
lOl\
lOOlOO\
OO\

->
GetColli\
sionObje\
c\
tType
(
)
==
Colli\
sionObject
::
TYP\
E_\
CYLINDER\

)
;
const
Collisio\
nObj\
e\
ctC\
y\
linder
&
lllOl\
lOllll
=
*
(
const
Co\
llision\
O\
bject\
C\
ylinder
*
)
lO\
ll\
lOOOOll
->
lOllOO\
lO\
OOO
;
co\
nst
float
lOllOl\
Olll
=
0.0001f
;
Vec3
lllOll\
l\
O\
OOO
=
ll\
lO\
llO\
ll\
lO\

.
lllOlO\
l\
OOlO
*
lOlllOOOOOl
;
Vec3
lll\
O\
lllOOOl
=
lllOl\
lOlll\
O\

.
lllOl\
OlOOll
*
lOlllOO\
OOOl\

;
Ve\
c3
lllOlllOOlO
=
lllOllOll\
lO
.
lllOlOlOOlO
*
lOlllOO\
OO\
lO
;
Vec\
3
lll\
Oll\
lO\
Oll
=
lllOllOl\
ll\
O\

.
lllOlOlOOll\

*
lO\
lllOOOOlO
;
float
ll\
lOll\
lOlOO
=
ll\
lOllOl\
l\
lO
.
lOlOlOOlOlO
+
lllOllOl\
ll\
l\

.
lOlO\
lOOlO\
lO
;
boo\
l\

lllOlllOlOl
=
fal\
s\
e
;
if\

(
ll\
lOl\
llOlOl
)
retu\
rn
;
Vec\
3
lO\
O\
OOO\
OOlOO\
O
=
(
ll\
lO\
l\
l\
lOOO\
l
-
ll\
lO\
lllOO\
OO
)
;
float
lO\
OOl\
lOOO\
lll
=
lOOO\
OOOOl\
OOO
.
Get\
Magn\
itud\
e\

(
)
;
TA_ASSER\
T
(
lO\
O\
O\
l\
lOOOlll
>
0.0f
)
;
lOOOOOOOlO\
OO\

/=
lOO\
O\
llOOOl\
l\
l
;
Vec\
3
lO\
O\
Ol\
OO\
OOO\

=
(
lllOl\
lOllll
.
lllO\
lO\
lOOll\

-
lll\
OllOl\
lll
.
ll\
lOl\
Ol\
O\
OlO
)
;
floa\
t
lOOO\
ll\
OOlOOO
=
lOOOlOOOOO
.
GetMagnit\
u\
de
(
)
;
TA_A\
SSERT
(
lOOOllO\
OlOO\
O
>
0.0f
)
;
lOOO\
lOOOOO
/=
lOOOll\
O\
O\
l\
OOO
;
str\
u\
ct
{
bool
lOOOl\
lO\
O\
lOOl
;
bool
lOOOllOO\
lO\
lO
;
bool
lOO\
O\
llO\
OlOll
;
bool
lO\
OOl\
lOOl\
lOO
;
bool
lO\
O\
OllOOOllO
;
}
ll\
O\
OllOlOlO
;
llOO\
l\
lOlOlO
.
lOOO\
l\
l\
OO\
lO\
Ol
=
fal\
se
;
ll\
OOllOl\
OlO
.
lOOO\
llOOlOlO
=
false
;
llO\
Ol\
lOl\
OlO
.
lO\
O\
OllOO\
lOl\
l
=
false
;
llOO\
l\
lOlO\
lO
.
lOO\
O\
l\
lOOl\
lOO\

=
false
;
llO\
OllOl\
OlO\

.
lOOOllO\
OOllO
=
fa\
l\
se
;
Vec3\

lOllllOl\
OO
;
Vec3\

lO\
l\
ll\
O\
l\
lO\
O
;
float\

ll\
lO\
ll\
lll\
ll
=
-
1.0f
;
const\

floa\
t
lOOOll\
OOll\
O\
l
=
0.25f
;
if
(
lOOOlOOOOO
.
Dot
(
lO\
OOOOO\
Ol\
OOO
)
>
0.988f
)
{
float
lO\
lOl\
l\
O\
lOO
=
lOOOl\
OOOOO
.
Dot
(
lll\
OlllOOO\
O
-
lllO\
l\
lOll\
ll\

.
lllOlOlOOl\
l\

)
;
float
lOl\
Ol\
lO\
lOl\

=
lOO\
OO\
OO\
OlOOO\

.
Dot
(
ll\
lOl\
llOO\
OO
-
lllOl\
lOl\
lll
.
lllOlO\
lO\
Oll
)
;
if
(
lOlOllOl\
OO\

>
0.0f
&&
lOlOl\
lOlO\
l\

>
0.0f
)
{
}
el\
se
{
if\

(
lOlOllOlOO
<=
0.0f
&&
lOlOllOlOO
>
-
lO\
OOllOOl\
O\
O\
O
*
lO\
OO\
l\
lO\
O\
l\
lOl
)
{
Vec\
3
lOO\
OOlO\
O\
Ol
=
lllOlllO\
O\
O\
O
-
lOOO\
lOOOOO
*
lOl\
O\
llOlOO\

;
fl\
oat
lllOOl\
O\
l\
ll\

=
(
lOO\
OOlOO\
Ol\

-
lllOllOllll
.
lll\
OlO\
lO\
Ol\
l\

)
.
GetMagni\
tudeSqrd
(
)
;
if
(
ll\
lOOlO\
l\
ll\

>
lll\
OllOlll\
l
.
lOlOlOOlOlO
*
lllOll\
Ollll
.
lOlOlO\
OlO\
l\
O
)
lOlO\
llOlOO
=
k_\
f\
Ma\
x\
F\
loat
;
}
els\
e\

{
lOlO\
ll\
OlOO
=
k_f\
M\
ax\
F\
loat
;
}
if
(
lO\
l\
Oll\
OlOl\

<=
0.0f
&&
lO\
l\
OllO\
lOl\

>
-
lOOO\
ll\
OO\
Olll\

*
lOO\
OllOOl\
lOl\

)
{
Vec3
lOOO\
OlO\
OOl
=
lllOllOllll
.
lllOl\
O\
lO\
O\
ll
+
lOOOOOO\
Ol\
OOO
*
lOl\
OllO\
lOl\

;
fl\
oat
lllOO\
lOll\
l\

=
(
lOOOOlOOOl
-
ll\
lO\
lllOOOO\

)
.
GetMagnitu\
deS\
qrd
(
)
;
if\

(
ll\
lOOlOlll\

>
lll\
Ol\
lOlllO
.
lOlOlOOlOlO
*
lllOl\
lOl\
l\
lO
.
lO\
lOlOOlOlO
)
lOlOllOlOl
=
k_\
fM\
axFloat\

;
}
els\
e\

{
lO\
lOll\
O\
lOl
=
k_f\
M\
axFloa\
t
;
}
fl\
oat
lOOOll\
OOlllO
=
lOlO\
llOlO\
O
<
lO\
lOllOlOl
?
lO\
lO\
llO\
lOO
:
lO\
lOllOlOl\

;
lOlOl\
lO\
l\
OO
=
lO\
OOl\
OOOOO
.
Dot
(
lllOllOllll
.
lllOlO\
l\
O\
OlO\

-
lll\
OlllO\
OO\
l
)
;
lOlO\
llO\
lO\
l
=
lOO\
OOOOO\
lO\
OO\

.
Dot
(
lll\
OllO\
llll
.
ll\
lOl\
OlOOlO
-
lllOlllOOOl
)
;
if
(
lOlOl\
lO\
lOO
>
0.0f
&&
lOlOllOl\
Ol
>
0.0f
)
{
}
el\
se
{
if
(
lO\
lO\
l\
l\
OlOO
<=
0.0f
&&
lO\
lOllOlOO
>
-
lOOOl\
lO\
OlO\
OO
*
lOOO\
llOOllO\
l\

)
{
Vec3
lOOOOlOOOl
=
lllOlllOOO\
l
+
lOO\
OlO\
OOO\
O\

*
lOlO\
l\
l\
OlOO\

;
float
lllO\
OlOlll
=
(
lO\
OOO\
lOO\
Ol
-
lllO\
llOl\
lll
.
lll\
OlOlO\
O\
lO
)
.
GetMa\
gnit\
udeSqrd
(
)
;
if\

(
lllO\
OlO\
ll\
l
>
ll\
lOll\
O\
llll
.
lOlOlOOlOl\
O
*
lll\
Ol\
lOllll\

.
lOlOlOOl\
OlO
)
lOlOllOl\
OO
=
k_\
f\
MaxF\
l\
oa\
t
;
}
else
{
lOl\
O\
l\
lOl\
OO
=
k_fMaxFloat
;
}
if
(
lOlOll\
OlO\
l
<=
0.0f
&&
lOlOll\
O\
lOl
>
-
lO\
OOll\
O\
O\
Olll
*
lOOOll\
OOllO\
l
)
{
Vec3
lOOO\
O\
l\
OOOl
=
lllOllOllll
.
ll\
lO\
lOlO\
OlO\

-
lOOOOOO\
OlO\
OO\

*
lO\
lOllO\
lO\
l\

;
flo\
at
ll\
lO\
O\
lOll\
l\

=
(
lOOOOlO\
OOl
-
ll\
l\
OlllO\
OOl
)
.
Ge\
t\
Mag\
nitudeSqrd
(
)
;
if
(
lllOO\
lOlll
>
ll\
lOllOll\
l\
O\

.
lO\
lO\
l\
OOl\
OlO
*
lllOl\
lO\
lll\
O
.
lOl\
O\
l\
O\
Ol\
O\
lO
)
lOlOll\
Ol\
Ol
=
k_fMaxFloat
;
}
else\

{
lOlOl\
l\
O\
lOl
=
k_f\
Ma\
xFl\
o\
a\
t
;
}
floa\
t
lO\
OO\
llOOllll
=
lOlOllOlOO
<
lOlO\
l\
lOlOl
?
lOlOllOl\
OO
:
lO\
lOll\
OlOl
;
if
(
lO\
OOllOOlll\
O
>
0.0f
&&
lO\
OO\
llOOl\
lll
>
0.0f
)
{
}
else\

{
if
(
lO\
OOl\
lOOll\
lO\

<=
0.0f
&&
(
lOO\
OllOOllll
>
0.0f
||
lOOOl\
lOO\
ll\
lO
>
lOOO\
llOOllll\

)
)
{
lOOOlOlOlOOO
(
lllO\
lll\
OOOO
,
lO\
O\
OO\
OO\
OlOOO
,
lllOllO\
lllO\

.
lOlOlOOl\
OlO
,
lllOllO\
l\
ll\
l
.
ll\
lO\
lO\
l\
OO\
ll
,
-
lOO\
O\
lOOOOO
,
ll\
lOl\
lOllll
.
lO\
l\
Ol\
OOl\
OlO
,
lOlll\
O\
OOOll
)
;
return
;
}
el\
s\
e
{
lO\
OOlOlOlO\
O\
O
(
lllOll\
lOOOl
,
-
lO\
OOOOOO\
lOOO
,
lllOllOl\
llO
.
lO\
l\
Ol\
O\
OlO\
lO
,
lllOl\
l\
Ol\
lll
.
lllO\
lOl\
O\
O\
l\
O
,
lO\
OOlOOOOO\

,
lll\
OllO\
lll\
l\

.
lOl\
OlOO\
lOlO
,
lO\
l\
llOOOOll\

)
;
return
;
}
}
}
}
}
el\
se
if
(
lOO\
OlOOOOO\

.
Do\
t
(
lOO\
OO\
OO\
O\
l\
O\
OO
)
<
-
0.988f
)
{
fl\
oa\
t
lOlOllOl\
OO\

=
-
lO\
OO\
lOOO\
OO\

.
Do\
t\

(
lllOlllOO\
O\
O
-
lll\
O\
llOlll\
l
.
ll\
lOlOlOOlO
)
;
flo\
a\
t\

lOlOllO\
lOl
=
lO\
OO\
OOO\
Ol\
O\
OO
.
Dot\

(
lll\
OlllOOOO
-
ll\
l\
Ol\
l\
Olll\
l
.
lll\
OlOlO\
OlO\

)
;
if
(
lOlO\
llOl\
OO
>
0.0f
&&
lO\
lO\
llOlO\
l
>
0.0f
)
{
}
else
{
if\

(
lOlOllOl\
O\
O
<=
0.0f
&&
lO\
lOllOlOO
>
-
lO\
O\
OllOOlOO\
O
*
lOO\
Oll\
OO\
ll\
Ol
)
{
Vec3\

lOOO\
OlOOO\
l
=
ll\
lOlllOOOO
+
lO\
OOl\
OOOOO
*
lO\
l\
OllO\
l\
O\
O\

;
flo\
at
ll\
lOO\
lOlll
=
(
lOOOOl\
OOOl
-
lll\
O\
llOl\
l\
ll
.
lllOlO\
l\
OOl\
O
)
.
Ge\
tMagni\
t\
ude\
Sqrd
(
)
;
if
(
lllOOl\
Olll
>
lll\
O\
llOllll
.
lOlO\
lOOlOlO
*
lll\
Ol\
l\
Ollll
.
lOl\
OlOOlO\
l\
O
)
lOl\
Ol\
lOlOO
=
k_fMa\
xFl\
oat
;
}
els\
e
{
lOlOl\
lOlO\
O
=
k_fMax\
Flo\
at
;
}
if
(
lOlOllOl\
Ol
<=
0.0f
&&
lOlOll\
OlO\
l
>
-
lOO\
Ol\
lOOO\
lll
*
lOO\
OllOOll\
O\
l
)
{
Vec\
3\

lO\
OOOlOOOl
=
lllOl\
lO\
ll\
l\
l
.
lll\
OlOlO\
Ol\
O
+
lO\
OO\
OOOO\
lO\
OO
*
lO\
lOllOl\
Ol\

;
float
ll\
lOOlOl\
ll
=
(
lOOOOlOOO\
l
-
lll\
Ol\
llOOOO
)
.
GetMa\
gnit\
udeS\
q\
r\
d
(
)
;
if
(
lllOOl\
Oll\
l
>
lllOllOl\
llO
.
lOlOlOOlOlO
*
lllOllO\
l\
llO\

.
lO\
l\
OlOO\
l\
OlO
)
lO\
lOllO\
lOl
=
k_fMaxFl\
oat
;
}
else
{
lO\
lOllOl\
Ol
=
k_fMaxFlo\
at
;
}
flo\
at
lOO\
OllOOl\
l\
l\
O
=
lOl\
O\
llOlOO
<
lOlOll\
Ol\
Ol\

?
lOlOllOlO\
O
:
lOlOllOlOl
;
lO\
lOll\
OlO\
O
=
-
lOOOl\
O\
OOOO
.
Dot
(
lll\
OllO\
llll\

.
lllOlOlO\
Ol\
l\

-
lllO\
lll\
OOOl
)
;
lOl\
Ol\
lO\
lOl
=
lO\
O\
OO\
OOOl\
OOO
.
Do\
t\

(
ll\
l\
O\
llO\
llll\

.
lllO\
l\
OlO\
Ol\
l
-
lll\
OlllOOOl
)
;
if\

(
lOlOllO\
lOO
>
0.0f
&&
lOlO\
llO\
l\
Ol
>
0.0f
)
{
}
else
{
if
(
lO\
lOllOlOO\

<=
0.0f
&&
lOlOll\
Ol\
Ol
>
-
lO\
O\
O\
llOO\
l\
O\
OO
*
lOO\
OllOOllOl\

)
{
Vec3
lOOO\
O\
lOOOl
=
lllO\
lllOOOl
-
lO\
O\
OlOO\
O\
OO
*
lOlO\
llOlO\
O
;
flo\
at
lll\
OOl\
Olll\

=
(
lOO\
OO\
lOOOl\

-
lllO\
llOllll
.
lllOl\
O\
lOOll\

)
.
GetMagnitudeSqrd\

(
)
;
if\

(
ll\
l\
OOlOlll\

>
lllOllOll\
l\
l
.
lOlOlOOlOl\
O
*
lll\
OllOllll\

.
lOlOlOO\
lOl\
O\

)
lO\
lO\
ll\
OlOO
=
k_fM\
axFloat
;
}
else
{
lO\
lOllOlOO
=
k_fMa\
xF\
lo\
at
;
}
if
(
lOl\
OllOlOl
<=
0.0f
&&
lO\
lOl\
lO\
lO\
l
>
-
lO\
OOll\
O\
Ol\
O\
O\
O\

*
lO\
OOllO\
OllOl
)
{
Ve\
c\
3
lOOO\
OlOO\
Ol\

=
ll\
lOl\
lOllll\

.
ll\
lO\
lOlOOll
-
lOOOOOOOlOOO
*
lOlOl\
lO\
l\
Ol
;
fl\
oat
lllOOl\
Ol\
l\
l\

=
(
lOOOOlOOOl\

-
lllOlll\
OO\
Ol\

)
.
GetM\
agnitudeS\
qrd
(
)
;
if
(
lllOOlOlll
>
lllOllOlllO
.
lOlOl\
OOl\
OlO
*
ll\
l\
Oll\
OlllO
.
lOlOlO\
OlOlO
)
lOlO\
l\
l\
OlOl
=
k_fMaxF\
l\
oa\
t
;
}
el\
se\

{
lO\
lO\
llOlOl\

=
k_\
f\
Ma\
xF\
loa\
t
;
}
flo\
at
lOOOllOOl\
lll
=
lOlOllO\
lOO\

<
lOl\
Ol\
lOlOl
?
lOl\
Ol\
lOlOO
:
lOl\
Ol\
lOl\
Ol
;
if
(
lOOO\
llO\
Oll\
lO
>
0.0f
&&
lOOO\
llOOll\
ll\

>
0.0f
)
{
}
el\
se
{
if
(
lOOOll\
OOll\
lO\

<=
0.0f
&&
(
lOO\
OllO\
O\
lll\
l\

>
0.0f
||
lOO\
OllO\
Ol\
llO
>
lOO\
OllO\
Oll\
l\
l\

)
)
{
lOO\
Ol\
OlOlOO\
O\

(
lllO\
ll\
l\
OOO\
O
,
lOO\
OO\
OOOl\
OOO\

,
lll\
OllOlllO
.
lO\
lOlOO\
lOlO\

,
lllOllOlll\
l
.
ll\
l\
Ol\
OlO\
OlO
,
lOOOlOO\
OOO
,
lllO\
llOlll\
l\

.
lOlO\
lO\
Ol\
OlO
,
lOlllOOOOll\

)
;
return
;
}
els\
e
{
lOOOlOlO\
l\
OO\
O
(
ll\
lOlllOO\
Ol
,
-
lOOO\
OOOOlOOO
,
lll\
OllO\
l\
l\
l\
O
.
lOlOlOOlOlO
,
lllO\
llO\
llll
.
lll\
O\
lOlOO\
ll\

,
-
lOOO\
lOOOOO\

,
lllO\
llOlll\
l
.
lOlOlOO\
lOl\
O
,
lO\
lllOOOOll
)
;
retu\
rn
;
}
}
}
}
}
ll\
lOlllllll
=
lO\
OOlOOOllOl\

(
lO\
OOOO\
OOl\
OOO
,
lllOlllOOO\
O
,
lllO\
l\
lOlll\
O\

.
lOlO\
l\
O\
OlOlO
,
lOO\
Ol\
OOO\
OO
,
lllOllO\
l\
l\
ll
.
lll\
OlOl\
O\
OlO
,
lllOl\
l\
Ol\
lll
.
lO\
lOl\
OOlOlO
,
lOlllOllO\
O\

,
lOlll\
lOl\
OO
)
;
if
(
lll\
Ol\
lll\
lll
>=
0
)
{
ll\
OO\
llOl\
O\
lO
.
lOOOllO\
OlO\
Ol
=
true\

;
llOOllOlOl\
O
.
lOO\
O\
llO\
O\
OllO
=
tr\
ue
;
Col\
lision\

lO\
ll\
OllOlll
;
lOllOl\
lO\
lll\

.
Init\
i\
a\
lise
(
Col\
lision\

::
lOllOlOOOOO\

,
0.0f
,
lllOlllllll
,
lOll\
lOllOO
,
lOllllO\
l\
OO
)
;
if\

(
!
lllO\
l\
l\
llOOO
(
lOllO\
l\
l\
Ol\
l\
l
,
lOl\
llOOOOl\
l
)
)
retu\
r\
n
;
}
lllOllll\
lll
=
lOOOlO\
OOllOl
(
-
lOOOO\
OOO\
l\
O\
OO
,
lllOlllO\
OOl\

,
lllOllOl\
ll\
O
.
lO\
l\
OlOOlOlO
,
-
lOOOlOOOO\
O
,
ll\
lOll\
Ol\
l\
ll
.
lllOlO\
l\
O\
Ol\
l
,
lllO\
l\
lO\
llll\

.
lO\
l\
O\
lOOlOl\
O\

,
lOlll\
OllOO
,
lOll\
ll\
OlOO\

)
;
if\

(
lll\
Olll\
l\
ll\
l
>=
0
)
{
llOO\
llO\
l\
O\
lO\

.
lOOOl\
lO\
OllO\
O
=
tr\
ue\

;
llO\
OllO\
lOlO
.
lOOO\
l\
lOOOllO
=
tr\
u\
e
;
Co\
ll\
ision
lOllOllOl\
ll\

;
lO\
llO\
llOl\
ll
.
Initia\
lis\
e
(
Collision
::
lOll\
O\
lOOOOO
,
0.0f
,
lllOll\
l\
ll\
l\
l
,
lOlll\
OllOO
,
lOllllOlOO
)
;
if\

(
!
ll\
lO\
llllOOO\

(
lOll\
OllOl\
ll
,
lOlll\
OOOOll
)
)
ret\
urn
;
}
lllOlll\
llll
=
lOOOlOOOllOl
(
lOOOO\
OOOl\
OOO
,
ll\
l\
O\
lll\
OOOO
,
lllOll\
OlllO
.
lOlOlOO\
lO\
lO
,
-
lOOOlO\
OO\
OO
,
lllOl\
l\
Ollll
.
lllO\
lOlOOll\

,
lll\
O\
l\
lOll\
l\
l\

.
lOlOlOO\
lOlO\

,
lO\
l\
ll\
Ol\
lOO
,
lOl\
ll\
lOl\
OO
)
;
if
(
lllO\
lll\
llll
>=
0
)
{
llOOllO\
lOlO
.
lO\
OOllO\
O\
lO\
l\
O\

=
true
;
llOOllO\
lOl\
O
.
lOOO\
llOOOll\
O
=
true
;
Col\
lision
lOllOl\
lOlll
;
lOllOl\
lO\
lll\

.
Initial\
ise\

(
Collis\
io\
n\

::
lOl\
lOlOOOO\
O
,
0.0f
,
lllO\
lllllll
,
lOll\
lO\
l\
lOO
,
lOllll\
OlOO
)
;
if
(
!
lll\
O\
ll\
l\
l\
OOO
(
lO\
l\
l\
OllOlll
,
lOlllOO\
OOll
)
)
re\
t\
u\
r\
n
;
}
lllOll\
ll\
ll\
l\

=
lOOOlOOO\
llOl
(
-
lOOO\
OOOO\
l\
O\
O\
O
,
lllO\
lllOOOl
,
lll\
OllOlllO
.
lO\
lOlO\
OlOlO
,
lOOOlOOOO\
O\

,
lllOllOllll
.
lll\
OlO\
l\
O\
OlO\

,
lllOllOl\
lll
.
lO\
lOlOOl\
Ol\
O
,
lOlll\
O\
llOO\

,
lO\
ll\
ll\
OlOO
)
;
if
(
lllO\
ll\
l\
lll\
l
>=
0
)
{
llOOllOlOlO
.
lOOOll\
OOlOll\

=
true\

;
llO\
O\
llOl\
OlO
.
lOO\
OllO\
O\
OllO
=
true
;
Co\
lli\
s\
ion\

lOllOllO\
l\
ll
;
lOllOl\
lOl\
ll
.
In\
itialise\

(
Colli\
sio\
n
::
lOllOlOO\
OO\
O\

,
0.0f
,
lllOlllll\
l\
l
,
lOlllOl\
lOO\

,
lOll\
ll\
O\
lO\
O
)
;
if
(
!
lllOllllO\
OO
(
lOllO\
llO\
lll
,
lOlllOOOOll
)
)
re\
turn
;
}
{
lll\
Oll\
lll\
ll
=
lOOOlOlOOllO
(
-
lO\
OO\
OOOOlO\
OO\

,
lllOlllOO\
O\
l
,
lllOl\
l\
Ol\
l\
lO
.
lO\
l\
OlOO\
l\
OlO\

,
lOOOlOO\
OOO
,
lllOllOllll
.
lllOlOlOOlO
,
lll\
OllOl\
ll\
l
.
lll\
O\
lOlOOll\

,
lllOl\
lO\
llll
.
lO\
lOlOOlOlO\

,
lOlllOll\
OO
,
lOll\
ll\
O\
lOO
)
;
if
(
lll\
O\
l\
lllll\
l
>=
0
)
{
llOOllOlOl\
O
.
lOOO\
llO\
OOllO
=
tru\
e
;
Colli\
sion
lO\
llO\
l\
lOl\
ll
;
lOllOl\
lOlll
.
Initi\
alise\

(
Co\
ll\
ision
::
lO\
ll\
Ol\
OO\
OOO
,
0.0f
,
lll\
Olll\
l\
lll
,
lOlllOl\
l\
OO\

,
lOll\
ll\
O\
lOO\

)
;
if
(
!
lllO\
llllOOO
(
lOl\
l\
O\
l\
lOlll
,
lOll\
lO\
OOOl\
l
)
)
return
;
}
}
{
lllOl\
llllll\

=
lOOOlOlOO\
llO\

(
lOOOOO\
OO\
lOOO
,
lllO\
ll\
lO\
O\
OO
,
lllOllOlll\
O\

.
lOl\
O\
lO\
OlOlO
,
lOOO\
lO\
O\
OOO
,
lllOll\
Ollll
.
ll\
lOlOlO\
OlO\

,
lll\
O\
llOllll
.
lllOl\
OlO\
O\
ll
,
ll\
lOllOllll\

.
lOlOlO\
O\
lOlO
,
lO\
lllOl\
lO\
O
,
lO\
llllOlO\
O\

)
;
if
(
lllOlllllll
>=
0
)
{
llOOllO\
lO\
lO
.
lOOOll\
OO\
Ol\
lO
=
true
;
Collision\

lO\
llOll\
Ol\
ll
;
lOllO\
llOl\
ll
.
Ini\
tiali\
se
(
Collis\
ion
::
lOll\
OlOO\
O\
OO
,
0.0f
,
lllO\
lllllll
,
lOlllOllOO
,
lO\
llll\
OlOO
)
;
if\

(
!
ll\
lOllll\
OOO
(
lOllOllO\
lll
,
lOl\
ll\
OOO\
Ol\
l
)
)
retu\
r\
n
;
}
}
{
lllOllllll\
l\

=
lOOOlOlOOllO
(
-
lOOOlOOOOO
,
ll\
lO\
llOllll
.
ll\
lO\
l\
OlO\
Oll
,
lll\
Oll\
Ol\
ll\
l
.
lOl\
Ol\
OOlOlO
,
lOOOO\
OOO\
lOOO
,
lll\
O\
lll\
O\
OOO
,
ll\
lO\
lllOO\
Ol
,
lllOl\
lOlllO\

.
lO\
lOlO\
O\
l\
O\
lO
,
lOlll\
Ol\
lOO\

,
lO\
llllO\
l\
O\
O
)
;
if
(
lll\
O\
lll\
llll\

>=
0
)
{
ll\
O\
OllO\
lOlO
.
lOOOl\
l\
OO\
OllO
=
true
;
Co\
ll\
isi\
on
lOl\
lOl\
lO\
lll
;
lOllO\
llO\
lll
.
Initia\
lise\

(
Co\
llisi\
on\

::
lO\
llOlOOOO\
O
,
0.0f
,
lllOllll\
lll
,
lOlll\
O\
llOO
,
-
lO\
llll\
O\
lOO
)
;
if
(
!
lllOllllO\
OO
(
lO\
l\
lO\
l\
l\
O\
l\
l\
l
,
lOll\
lO\
O\
OOll
)
)
retu\
rn
;
}
}
{
lllOlllllll
=
lO\
OOlOlOOllO\

(
lOO\
OlOO\
OO\
O
,
lllOllOllll
.
lllOlO\
lOOlO
,
lllOll\
Ollll
.
lOl\
OlOOl\
Ol\
O
,
lOOOOOOOlOOO\

,
ll\
lOl\
llO\
OOO
,
lllOlll\
OOOl
,
ll\
lOllOlllO\

.
lOlOlOO\
lO\
l\
O
,
lO\
ll\
lOllOO
,
lOllllO\
lO\
O\

)
;
if\

(
lllO\
lll\
lll\
l
>=
0
)
{
llO\
OllOlOlO
.
lOO\
OllOOO\
llO\

=
true
;
Collision
lOllO\
ll\
Olll
;
lOllO\
llOlll
.
Ini\
t\
ialise
(
Collision
::
lOllOlO\
O\
OOO
,
0.0f
,
lllOl\
ll\
llll
,
lOlll\
OllO\
O
,
-
lO\
l\
lllOlOO\

)
;
if
(
!
ll\
lOllllO\
OO\

(
lOllO\
llOl\
l\
l
,
lO\
lll\
OOOO\
l\
l\

)
)
return
;
}
}
if
(
!
llO\
Ol\
lOlOlO
.
lOO\
Oll\
OO\
Ol\
l\
O
)
{
Vec3
lOOOllOlOOO\
O
;
Vec3
lOOOllOlOOOl
;
if
(
Ge\
om\
etr\
y\

::
FindCl\
o\
sestPoin\
t\
OnLineToLi\
neUn\
C\
la\
mp\
ed
(
ll\
lOll\
Ollll
.
lllOlOlOOl\
O
,
ll\
l\
O\
l\
lO\
llll
.
lllOlOl\
OOl\
l
,
lllOll\
lO\
O\
O\
O
,
lll\
Oll\
lOOOl
,
lO\
OO\
llOlOOOO
,
lO\
OOll\
O\
l\
OOOl
)
)
{
Vec3\

lOOOlOO\
OO\
O
=
lO\
OOl\
lOlOOOl
-
lO\
OO\
l\
l\
OlOOOO
;
fl\
oa\
t
lOlO\
ll\
lOOl
=
lO\
O\
OlOOOOO
.
GetMagnitude
(
)
;
if
(
lOlO\
l\
llOOl\

>
lOllOlOl\
l\
l
)
{
lO\
OO\
lO\
OOO\
O
/=
lOlOl\
l\
lOOl\

;
lO\
lOl\
ll\
O\
O\
l
=
(
lllOllOl\
ll\
l
.
lOl\
OlOOl\
OlO
+
lll\
Ol\
l\
Oll\
l\
O
.
lOlOl\
O\
O\
lOlO
-
lOlO\
lllO\
Ol\

)
;
Ve\
c3
lOOOOlll\
ll\

=
lOOOllOlOOOl\

-
lOOOl\
OOOO\
O
*
lllOllOllll
.
lOlOl\
O\
OlOlO
;
if
(
lOlO\
lll\
OOl
>
0.0f
)
{
Co\
llisi\
on\

lOll\
O\
l\
lOll\
l\

;
lOll\
OllOll\
l
.
Initialis\
e
(
Collision\

::
lO\
ll\
OlOOO\
OO
,
0.0f
,
lOlOl\
l\
lOOl
,
lOOO\
Ol\
l\
ll\
l
,
lOOO\
lOO\
O\
O\
O
)
;
if\

(
!
lllOl\
lll\
OOO\

(
lOll\
Ol\
lOlll
,
lOl\
ll\
OOOOl\
l
)
)
re\
t\
urn
;
ll\
OOllOlOlO
.
lO\
OOl\
lOOOl\
lO\

=
tr\
ue
;
}
}
}
}
if
(
!
lOl\
ll\
OOO\
Oll
->
lO\
llOlllOll
)
ret\
urn
;
if
(
!
llOOl\
lOlOl\
O
.
lOOOl\
lOOOllO
)
{
Vec\
3
llOOll\
OllOl
=
(
lll\
O\
llOlll\
l
.
lllOl\
OlO\
Ol\
l
-
lllOl\
l\
Ollll
.
lll\
O\
lOlOOl\
O
)
.
GetNormal\

(
)
;
Vec3
lOOOl\
Oll\
OOl\
l
=
(
lllOl\
llO\
O\
Ol\

-
lll\
O\
ll\
lOOOO
)
.
Get\
Normal\

(
)
;
Vec3
lOOOllOlOOlO\

=
(
lllO\
ll\
lOOll
-
lll\
Ol\
l\
lO\
OlO
)
.
Ge\
t\
Norm\
al\

(
)
;
lOOO\
lO\
lOlllO
(
lllOlllOO\
Ol\

,
lll\
Ol\
ll\
OOll
,
lllOll\
Olll\
l
.
lllO\
lOlOOlO
,
lllO\
llOllll\

.
lllOlOlO\
Ol\
l
,
llO\
Oll\
O\
ll\
Ol
,
lO\
O\
OlOllOOll
,
lllOl\
lO\
lllO
.
lOlO\
lOOl\
Ol\
O
,
lllOllOl\
lll
.
lO\
lOlOOl\
O\
lO
,
1.0f
,
tr\
ue
,
lO\
lllOO\
OOll
)
;
lOOO\
lO\
lOlll\
O
(
lll\
Olll\
OO\
O\
O
,
lllOlll\
OOlO
,
lllOllOl\
lll\

.
lllOlOlOOlO
,
lllOl\
l\
O\
l\
ll\
l
.
lllOl\
Ol\
OOl\
l
,
ll\
O\
Ol\
lO\
llOl
,
-
lOO\
O\
lO\
l\
lOOl\
l\

,
ll\
l\
O\
l\
l\
OlllO
.
lOlOl\
O\
OlO\
l\
O
,
lllOl\
lOl\
lll
.
lO\
lOlO\
Ol\
Ol\
O\

,
1.0f
,
true
,
lOl\
llOOOO\
ll\

)
;
Ve\
c3\

lOOOllO\
lOOl\
l
=
(
lllOllOl\
l\
l\
l
.
lll\
OlOlOOl\
O\

/
lOl\
ll\
OOOOl\
O\

)
*
lOll\
lO\
O\
OOO\
l
;
Vec3\

lOO\
O\
llO\
lOlOO\

=
(
lll\
OllOl\
ll\
l
.
ll\
l\
OlOl\
O\
O\
ll\

/
lOlll\
OO\
OOlO\

)
*
lOlllOO\
OOOl
;
llOO\
l\
lO\
l\
lO\
l
=
(
lllOlllOOOl
-
ll\
lO\
lll\
OO\
OO
)
.
GetNormal\

(
)
;
lOOO\
lO\
l\
lOO\
ll\

=
(
ll\
lOllO\
llll
.
lll\
OlOlOO\
ll\

-
lll\
O\
l\
lOl\
ll\
l
.
lllO\
lOlOOlO
)
.
GetNormal
(
)
;
lOO\
OllOlOO\
lO
=
(
lOOOl\
lOl\
O\
lOO
-
lOO\
Oll\
OlOO\
ll
)
.
Get\
Normal
(
)
;
lOO\
OlOlOll\
lO
(
lllOllOl\
lll\

.
lllOl\
Ol\
OOll
,
lOOOllOlOlO\
O\

,
lllOlllOOO\
O\

,
ll\
lOlll\
OO\
O\
l\

,
ll\
OOllO\
l\
lOl
,
lOOO\
lOllOOll
,
lllOllOll\
l\
l
.
lO\
lOl\
O\
OlO\
l\
O
,
lllOll\
O\
l\
l\
lO
.
lO\
lO\
lOOlO\
l\
O
,
-
1.0f
,
true
,
lO\
l\
llO\
OO\
O\
ll
)
;
lOOO\
lOlOlll\
O\

(
lllOll\
Ollll\

.
ll\
lOl\
O\
l\
OO\
lO\

,
lOOOllOl\
OOll
,
lllOlllOOO\
O
,
lllO\
l\
llOOO\
l\

,
llOOllO\
ll\
Ol
,
-
lOOO\
lOllO\
Oll
,
ll\
lOllOlll\
l
.
lO\
l\
OlO\
Ol\
OlO
,
ll\
l\
Ol\
lOlll\
O\

.
lO\
lO\
lO\
OlOlO
,
-
1.0f
,
true
,
lO\
l\
ll\
OOOOll
)
;
Ve\
c3\

lOllllOOll\

;
Ve\
c\
3
lOllllOl\
OO
;
floa\
t\

llll\
OlO\
Oll
;
if
(
Geometry
::
TestLi\
neMovem\
e\
nt\
Ag\
ains\
tCa\
p\
sule
(
lll\
OlllOOOO
,
lllO\
l\
l\
lOOOl
,
ll\
lOlllOOlO
,
ll\
lOlll\
OOl\
l
,
ll\
l\
OllOl\
lll
.
lllO\
lO\
lOO\
l\
O\

,
lllOllOll\
l\
l\

.
lll\
O\
lOlO\
Ol\
l
,
lllOl\
l\
lOl\
OO
,
lll\
lO\
lOOll
,
lOllllO\
Oll
,
lOllllO\
l\
OO
)
)
{
Coll\
is\
ion
lOllOll\
O\
lll
;
lOl\
lOllOlll
.
In\
itialise
(
Collision
::
lOllOlO\
OOOO
,
llllOlOO\
ll
,
0.0f
,
lOl\
l\
l\
lOOll\

,
-
lOll\
l\
lOl\
O\
O
)
;
if
(
!
lllOl\
lllO\
O\
O
(
lOl\
l\
Ol\
l\
Olll
,
lOll\
lOOOOll
)
)
retur\
n
;
}
}
}
void
TA\
C\
_C\
A\
LL\

llll\
OO\
llOll
(
co\
n\
s\
t
MF\
ram\
e
&
lOll\
lO\
OOOO\
l
,
con\
s\
t
MFrame
&
lOlll\
OOO\
Ol\
O
,
lOl\
lOlllO\
OO
*
lOlllOOOOll
)
{
TA_A\
S\
SERT
(
lO\
ll\
lOOOOll
->
lOllOO\
O\
lll\
l
->
GetC\
ol\
lision\
Objec\
tType
(
)
==
Coll\
isionOb\
j\
ect
::
TYPE\
_S\
PHERE
)
;
const
Collisi\
onObje\
ctS\
ph\
ere\

&
lll\
Oll\
llO\
lO\

=
*
(
co\
ns\
t
Coll\
i\
sionObjectSphere
*
)
lOll\
lOO\
O\
O\
l\
l
->
lO\
llOOOllll\

;
TA_ASSERT\

(
lOlllO\
OOOll
->
lOll\
O\
Ol\
OO\
OO\

->
GetColl\
ision\
Ob\
jec\
tT\
yp\
e
(
)
==
Col\
lision\
Object\

::
TYPE\
_C\
YLIND\
ER\

)
;
con\
st
Colli\
sionObje\
c\
tC\
yli\
nder
&
llOOlllO\
OOO
=
*
(
cons\
t
Co\
llision\
Obj\
ectCylind\
e\
r
*
)
lOl\
llOOO\
O\
ll
->
lOl\
lOO\
lO\
OOO
;
co\
nst
float
lOllO\
lOl\
ll
=
0.0001f
;
Vec3
lllOllllO\
ll
=
ll\
lOl\
lllOlO\

.
lllOO\
OOllOO
*
lOlllOOOOOl
;
float
lllOll\
lOlOO
=
llO\
Ol\
llOO\
OO
.
lOlOl\
OOlO\
lO
+
lllO\
llllOlO
.
lOlOlOOlOlO
;
Vec3\

lllllllO\
O\
O
=
ll\
O\
OlllOO\
O\
O
.
ll\
l\
OlOlOOll
-
ll\
OOlllOOOO
.
lll\
OlO\
l\
OOl\
O
;
float\

lOl\
Oll\
Ol\
OO
=
lll\
llllOOO
.
Dot\

(
llOOlllOOO\
O
.
lllOlO\
lOOlO\

-
lllOllllO\
ll
)
;
float
lOlOllOl\
Ol
=
ll\
ll\
lllOOO
.
Dot
(
lllOl\
lllOll
-
llOO\
ll\
lOOOO
.
lllOlO\
lO\
O\
ll
)
;
float\

lllO\
ll\
lllO
=
lOlOllOlO\
O\

/
(
lO\
lOllO\
lO\
O
+
lOlO\
ll\
O\
lO\
l
)
;
Vec3\

lOOOllO\
lOl\
O\
l
=
ll\
OOlllOOO\
O
.
lll\
Ol\
Ol\
OO\
l\
O
+
lllllllOOO
*
ll\
lOl\
l\
lll\
O
;
Ve\
c3
lOOOlOOOOO
=
lllOllllOll
-
lOO\
O\
llO\
lOlOl
;
fl\
oat
lOllllOlOl
=
lOOOlOOOO\
O\

.
Get\
M\
agn\
it\
u\
d\
eSqr\
d
(
)
;
if\

(
lO\
ll\
llO\
lOl
<
lllO\
l\
l\
l\
Ol\
OO
*
ll\
lOl\
l\
l\
OlOO
)
{
lOllllOlOl
=
Sqr\
t
(
lOl\
lllO\
l\
O\
l
)
;
fl\
oat
lO\
OOllO\
lOllO
=
lll\
llllOO\
O\

.
Ge\
t\
Ma\
gn\
i\
tud\
e\

(
)
;
bool\

lOO\
O\
l\
lO\
lOlll
=
fa\
lse
;
if\

(
lOl\
Ol\
lOlOO\

>
lOlOll\
OlOl
&&
lOlOllO\
lOO
>
-
lOllllO\
lO\
l
*
lOOOllOlOll\
O
)
{
if
(
lOlOll\
OlOO\

<
ll\
l\
Ol\
ll\
lOlO
.
lOlOlOOl\
OlO\

*
lO\
OOl\
lO\
lOllO
)
{
if
(
lOll\
l\
lOlO\
l
<
ll\
OOlllO\
OOO
.
lOlO\
lOO\
lO\
lO
)
{
Vec3\

lO\
OOl\
OOOOO
=
lllllllOO\
O
/
lOOO\
llOl\
OllO
;
floa\
t
lllO\
llllll\
l
=
-
lOl\
Ol\
lOlOO
/
lOOOll\
OlOllO
;
Collisi\
on
lOllOllOl\
ll
;
lO\
llOll\
Olll
.
Initiali\
s\
e\

(
Co\
lli\
sion
::
lOl\
lOl\
O\
OOOO
,
0.0f
,
lll\
Olll\
l\
lll
+
lllO\
lll\
l\
OlO
.
lOlOlOO\
lO\
lO
,
lllO\
llllO\
ll
-
lOO\
Ol\
OOOOO
*
lllOl\
ll\
llll
,
-
lO\
OO\
lO\
OOO\
O
)
;
lllO\
l\
ll\
l\
O\
OO
(
lO\
llO\
l\
l\
Olll
,
lO\
l\
llO\
OO\
Oll
)
;
retu\
rn
;
}
else
if
(
lO\
l\
O\
ll\
OlOO
>
0.0f
)
{
lOOOlO\
OO\
OO\

/=
lOl\
lllOlO\
l\

;
Vec\
3
lOOOOllll\
l
=
llOOlllOO\
OO
.
lllOlOlOO\
lO\

+
lOOOlOOO\
OO
*
llOOlllOOOO
.
lO\
lO\
lOOlOlO
;
lOOOl\
O\
OOO\
O
=
lllOl\
lllO\
ll
-
lOOOOlllll
;
float
lll\
OOlO\
lll
=
lOOO\
l\
OOOOO\

.
GetMag\
ni\
tud\
eSqrd
(
)
;
if\

(
ll\
lOO\
l\
Olll
<
ll\
l\
Ol\
lll\
OlO
.
lOl\
OlOO\
lOlO\

*
lllOll\
llOl\
O
.
lOlOl\
OOlOlO
)
{
fl\
oat
lOll\
llOlOl
=
Sqrt
(
lllOO\
lOl\
ll
)
;
lOOOlOO\
OOO
/=
lOllllO\
lOl\

;
Co\
llisi\
on
lOl\
l\
OllO\
lll
;
lOllOllOlll
.
Ini\
tia\
lise\

(
Collision
::
lOllO\
lO\
OOOO\

,
0.0f
,
ll\
l\
Ol\
lll\
O\
lO
.
lO\
lO\
l\
OO\
lO\
lO\

-
lOllllOlOl
,
lOO\
OOll\
lll
,
lOOOlOOOOO
)
;
lllOllllOOO
(
lOll\
OllOlll
,
lOlllOOOOll
)
;
re\
turn
;
}
}
els\
e
{
lOOOl\
lO\
lOlll
=
tr\
ue
;
}
}
}
else
if
(
lO\
l\
Oll\
O\
lOl
>
-
lOl\
lll\
OlOl
*
lOOOllO\
lOl\
l\
O
)
{
if
(
lO\
lO\
llOl\
Ol\

<
lllOllllOlO
.
lO\
lOlOOlOlO\

*
lOOOllO\
lOllO
)
{
if
(
lOllllOl\
Ol\

<
llOOll\
lO\
O\
OO
.
lO\
lOlO\
O\
lO\
lO
)
{
Vec3\

lOOO\
l\
OOOOO
=
ll\
l\
l\
lllOOO\

/
lOOOll\
O\
lOllO\

;
flo\
at
lllO\
lllll\
l\
l
=
-
lOlO\
ll\
Ol\
Ol
/
lO\
OO\
l\
lOlOl\
lO
;
Collis\
i\
on
lOllOll\
O\
lll
;
lOllOl\
lO\
l\
ll\

.
Ini\
tialise
(
Collis\
ion\

::
lOll\
O\
lOOO\
OO\

,
0.0f
,
ll\
lO\
l\
ll\
lll\
l
+
lllO\
l\
lllOlO
.
lO\
lO\
lOO\
l\
OlO
,
lll\
Olll\
lOll
+
lO\
OOlOOO\
OO
*
ll\
lO\
l\
l\
lllll
,
lOOOl\
O\
OOOO
)
;
lll\
Oll\
l\
lOOO
(
lOllO\
llO\
l\
ll
,
lOl\
l\
lOOOOll
)
;
return
;
}
el\
se
if
(
lOl\
OllO\
lOl
>
0.0f
)
{
lO\
OOlOOOO\
O\

/=
lOlll\
lOlOl
;
Ve\
c3
lOO\
OOlllll
=
llOOll\
lOOO\
O
.
ll\
lOlOl\
O\
O\
ll
+
lOOO\
lOOOOO
*
ll\
O\
OlllOOO\
O\

.
lO\
lO\
lOO\
lOlO
;
lO\
O\
OlOOO\
O\
O
=
lllOlll\
lO\
ll
-
lOOO\
Oll\
l\
ll
;
flo\
at
lllOOl\
O\
ll\
l\

=
lOOO\
l\
OOOOO
.
GetMagnitu\
d\
eSqrd
(
)
;
if
(
lllOOl\
O\
lll
<
lll\
O\
llllOlO
.
lOlO\
lOO\
lOl\
O
*
lllOl\
ll\
l\
OlO
.
lOl\
OlOOlOlO\

)
{
float
lO\
llllOl\
O\
l
=
Sqrt
(
ll\
lOOlOlll\

)
;
lOOOlOOO\
O\
O
/=
lO\
llllO\
lO\
l
;
Col\
li\
sion
lOl\
lOllO\
ll\
l
;
lOl\
l\
OllO\
ll\
l\

.
Ini\
tialise
(
Collis\
ion\

::
lO\
l\
l\
OlO\
OO\
OO
,
0.0f
,
ll\
lOll\
llOlO
.
lO\
lOl\
OOlOlO\

-
lOllllOlOl
,
lOO\
OOlllll
,
lOOO\
lOO\
O\
OO
)
;
lllOl\
lllOOO\

(
lOllOl\
lOlll\

,
lOlllOOOOl\
l\

)
;
re\
turn
;
}
}
else
{
lOO\
OllO\
l\
Olll
=
true
;
}
}
}
els\
e
{
lO\
OOllOlOlll
=
true\

;
}
if
(
lOOOl\
l\
OlOlll
)
{
if
(
lO\
lll\
l\
OlOl
>
lOl\
l\
OlOlll\

)
{
lOOO\
l\
OOOOO
/=
lOllllOlOl
;
Colli\
s\
i\
o\
n\

lOllO\
llO\
l\
ll\

;
lOllOll\
Olll\

.
Ini\
t\
ia\
l\
i\
se\

(
Collision
::
lOll\
Ol\
OOOO\
O
,
0.0f
,
lllOlllOlOO
-
lOl\
l\
llOlO\
l
,
lOOOllOlOlOl
+
lOOOl\
OOOO\
O
*
ll\
OO\
lllOO\
OO
.
lOlOlOOl\
O\
lO\

,
lOOOlOOOOO
)
;
lllOllll\
OOO
(
lOl\
lOl\
lOll\
l\

,
lOlllOOO\
Oll\

)
;
retur\
n
;
}
}
}
if
(
!
lOl\
l\
l\
O\
OOOll
->
lOll\
O\
lll\
O\
l\
l
)
retur\
n
;
Vec3
lllOlll\
ll\
OO
=
lll\
OllllO\
l\
O
.
lll\
OO\
O\
OllO\
O
*
lO\
lll\
OOO\
OlO\

;
float\

llllOlOO\
ll
=
0.0f
;
Vec\
3\

lOOlOll\
O\
Ol
=
llOOl\
l\
l\
O\
OOO\

.
ll\
lO\
lOl\
O\
Ol\
l\

;
int
lOO\
OllOOO\
l
;
for\

(
lOOOllO\
O\
Ol
=
0
;
lOOOllOO\
O\
l
<
2
;
lOOOllO\
OOl
++
)
{
lll\
lll\
lOOO
.
Normal\
ise
(
)
;
float
lllllOO\
OlO
=
ll\
l\
l\
lllOO\
O
.
Dot\

(
lllOllllO\
ll
-
lO\
Ol\
OllOOl
)
-
lllOl\
l\
ll\
Ol\
O
.
lOlOl\
O\
OlO\
lO
;
flo\
at
lllll\
O\
O\
Oll
=
ll\
lll\
l\
lOO\
O
.
Dot
(
lll\
OlllllOO
-
lOOlOll\
OOl
)
-
ll\
lOl\
ll\
lOl\
O\

.
lOlOlOO\
lO\
l\
O
;
if
(
lll\
llOOOlO\

>
lO\
llOlOl\
l\
l
&&
lllll\
OOOll
<
-
lOllOl\
Olll
)
{
llllOlO\
Ol\
l
=
ll\
ll\
lO\
O\
OlO
/
(
ll\
ll\
lO\
OOlO
-
ll\
lllO\
OOll
)
;
Vec\
3
lOOOllOl\
lOOO
=
ll\
l\
O\
lll\
lOll\

+
(
lllOl\
l\
lllO\
O\

-
lllOllllO\
ll
)
*
llllO\
lOO\
l\
l\

;
lO\
O\
Oll\
OllOOO
-=
ll\
lll\
llOOO
*
ll\
lOllllOlO
.
lOlO\
lO\
OlOl\
O
;
float
lOlll\
lO\
lOl
=
(
lOOOl\
lOll\
OOO\

-
lOOlOll\
OOl\

)
.
Ge\
tMa\
gnitud\
e\
S\
qrd
(
)
;
if
(
lO\
llllOlOl\

<
llOOlllO\
OOO\

.
lOlOl\
OO\
lOl\
O
*
llOOl\
llOOOO
.
lOl\
OlOOlOlO
)
{
Co\
lli\
sion
lOllO\
l\
lO\
l\
l\
l\

;
lOl\
lOllO\
l\
l\
l
.
Initi\
alise\

(
Colli\
sio\
n
::
lO\
ll\
Ol\
OOOOO
,
llllOl\
O\
O\
l\
l
,
0.0f
,
lO\
OO\
llOl\
lO\
OO
,
lll\
ll\
l\
lOOO\

)
;
lllO\
lll\
lO\
OO
(
lO\
llOllO\
l\
ll
,
lOlllOOO\
O\
ll
)
;
ret\
ur\
n\

;
}
}
lOOlOllOO\
l
=
llO\
Oll\
lOOO\
O
.
lllOl\
O\
l\
OOlO
;
lllll\
llO\
OO
=
-
ll\
l\
lll\
lOOO
;
}
Vec3
lO\
ll\
llOOll
;
if
(
Ge\
om\
etry
::
Te\
stSphereMovem\
en\
tAgai\
ns\
tLi\
ne
(
ll\
lO\
llll\
Oll
,
lllOlllllOO
,
llOOll\
lOO\
OO\

.
lllOl\
Ol\
OOlO
,
llO\
O\
l\
l\
l\
OOOO
.
lllOlO\
lO\
Oll
,
lllOl\
ll\
O\
lOO
,
llllOlOOll\

,
lO\
lll\
lOOll
,
lOO\
OlOOOOO
)
)
{
lOl\
lllO\
Ol\
l\

+=
lO\
OOl\
O\
OOOO
*
ll\
OO\
lllOOO\
O
.
lO\
lOlOOlO\
lO
;
Co\
llis\
i\
on\

lO\
llOll\
Olll
;
lO\
llOllOl\
l\
l
.
In\
iti\
alise\

(
Collision
::
lOllOlO\
OOOO
,
llllOlO\
Oll
,
0.0f
,
lOl\
l\
llOOl\
l\

,
lOO\
OlO\
O\
OOO
)
;
ll\
lOllllOOO\

(
lOl\
lO\
l\
lOll\
l
,
lOlll\
OOOOl\
l
)
;
retu\
rn\

;
}
lOO\
lOllO\
Ol\

=
ll\
OOl\
llO\
OOO
.
ll\
lOlOlOOll
;
for
(
lOOOll\
OO\
Ol\

=
0
;
lOOO\
llOOO\
l
<
2
;
lO\
O\
Ol\
lO\
O\
Ol
++
)
{
if\

(
lllllllOOO
.
Dot
(
ll\
lO\
lllll\
OO\

-
lllOllllOll
)
<
0.0f
)
{
Vec3
lO\
llll\
OOl\
l
;
if
(
lO\
OOllOllOOl
(
lllOlll\
lO\
ll
,
lll\
Olll\
ll\
OO
,
lO\
OlO\
l\
lO\
O\
l
,
lllllllOOO\

,
llOOlllOOOO\

.
lOlOlO\
O\
lOl\
O
,
lllOllllO\
l\
O
.
lOl\
Ol\
OOlO\
lO
,
lll\
lOlOOll
,
lOllllOOll
,
lOOOl\
OOOOO
)
)
{
lO\
llllOOll
+=
lOOOl\
OOO\
OO
*
llOO\
lllOO\
O\
O
.
lOlO\
lOOlOl\
O\

;
Co\
l\
l\
ision
lOl\
lOllOlll
;
lOll\
OllOlll
.
Initi\
alise
(
Co\
llisi\
on
::
lOllOlO\
OOOO
,
llll\
OlOOll
,
0.0f
,
lOllllO\
Ol\
l
-
lO\
OOlOO\
OOO
*
ll\
lOlllOl\
O\
O
,
lO\
OOl\
OO\
OOO
)
;
lll\
Ol\
lll\
OOO
(
lOllOllO\
l\
l\
l\

,
lOl\
llO\
OO\
Oll
)
;
retu\
r\
n
;
}
}
lOOlO\
llOOl\

=
llO\
OlllOOOO
.
lllOlO\
l\
OO\
lO\

;
ll\
lllll\
O\
O\
O
=
-
ll\
lllllOO\
O\

;
}
}
void
TAC_CALL
ll\
llOOO\
OlOl
(
const
MFram\
e\

&
lOlll\
O\
OO\
OOl\

,
co\
nst
MFra\
me
&
lO\
lllO\
OOO\
lO\

,
lOllOl\
ll\
OOO\

*
lOll\
lOOOOll\

)
{
TA_\
ASSE\
RT
(
lO\
ll\
l\
OOOOll\

->
lOllO\
OOllll
->
GetColl\
isionObjectT\
ype
(
)
==
Co\
lli\
s\
i\
onObject
::
TYPE\
_\
CAP\
SU\
LE
)
;
co\
n\
s\
t
Col\
l\
isionObje\
ctCapsu\
le
&
lOll\
l\
O\
lOOlO
=
*
(
con\
st\

Co\
lli\
s\
ionObjec\
t\
Capsule
*
)
lOl\
l\
l\
OO\
OOll\

->
lO\
llO\
OO\
l\
lll
;
TA\
_\
ASS\
ERT
(
lOlllOO\
OOl\
l
->
lOllO\
O\
l\
OOO\
O
->
Ge\
tCol\
lisionObjectType\

(
)
==
CollisionObject
::
TYPE\
_CY\
L\
INDER
)
;
const
Co\
l\
lisionOb\
jectCylind\
er
&
llO\
O\
lllOOOO\

=
*
(
const
Co\
llisi\
onObje\
ctCylinder\

*
)
lOl\
llO\
OO\
Oll\

->
lO\
l\
lOO\
l\
OO\
O\
O
;
cons\
t
floa\
t
lOl\
lOlOlll
=
0.0001f
;
Ve\
c3
lllOlllO\
OO\
O\

=
lO\
ll\
lOlO\
OlO
.
lllOlOlO\
OlO
*
lOll\
l\
OOO\
OO\
l
;
Ve\
c3
lll\
O\
l\
ll\
OO\
O\
l
=
lOll\
lOlO\
O\
l\
O
.
ll\
lO\
lOl\
OO\
ll
*
lOlllOOO\
OOl
;
Vec\
3
lOOO\
l\
lOllO\
lO
=
lllO\
ll\
lOOOl
-
lll\
O\
lllOOOO
;
fl\
oat\

lOOO\
ll\
Oll\
Oll
=
lO\
OOl\
lOllOlO
.
GetMag\
nitud\
e
(
)
;
lO\
O\
Ol\
lO\
llOlO
/=
lOOOl\
lOllOl\
l
;
Vec3
ll\
OOllOllOl\

=
llO\
OlllO\
OOO
.
ll\
lOlOlOOll\

-
llOOl\
ll\
OOOO
.
lll\
Ol\
OlOOlO
;
floa\
t
lOOOllOlllOO
=
llO\
OllOll\
O\
l
.
GetMag\
n\
itu\
d\
e
(
)
;
llOOl\
lO\
llOl
/=
lOOOllOlllOO
;
float
lOOl\
lOOO\
Ol
=
0.0f
;
float
lO\
OO\
llO\
lllOl
=
0.0f
;
Ve\
c3
llOlOO\
lOll\
l
=
ll\
lO\
lllOOOO
;
Vec3
llO\
lOO\
O\
O\
OlO
(
0.0f
,
0.0f
,
0.0f
)
;
float
lO\
OllOO\
OlO\

=
lO\
OOl\
lOllOll
;
floa\
t\

lO\
OO\
llOll\
ll\
O
=
0.0f
;
Vec3
llOl\
OOll\
OO\
O
=
lll\
OlllOOOl
;
Vec\
3
ll\
OlOOOOl\
lO
(
0.0f
,
0.0f
,
0.0f
)
;
fl\
o\
at
lOO\
OllOlllll
=
llOOl\
llOO\
OO
.
lO\
lOlO\
O\
lOlO
+
lO\
l\
llOl\
OOlO
.
lOlOlOOl\
OlO
;
bool
lOOOlll\
OOO\
O\
O
=
false
;
if
(
(
1.0f
-
Fabs
(
lOOOl\
l\
O\
ll\
O\
lO
.
Dot
(
llOOllO\
llOl
)
)
)
>
lOl\
lOlOlll
)
{
Vec3
lOOOlll\
O\
OOOl\

=
ll\
OOl\
l\
l\
OOOO
.
lllO\
lOl\
OO\
ll
-
llO\
Oll\
l\
OO\
OO
.
lllO\
lO\
lOOlO
;
Vec3
lOl\
l\
l\
ll\
O\
OO\

=
Vec\
3
::
Cro\
ss
(
llOOllOllOl
,
lO\
OOllOl\
lOlO\

)
;
Vec\
3
lOlll\
llOOl\

=
lOlll\
llOOO
.
Cross
(
lOO\
OllOl\
lO\
lO
)
;
fl\
oat\

lOl\
lll\
lO\
lO
=
lOlll\
llOO\
l\

.
Dot\

(
ll\
OOl\
l\
lO\
O\
O\
O
.
lllOlO\
lO\
Ol\
O\

-
lllO\
lllO\
OOO
)
;
float
lO\
ll\
lll\
Ol\
l
=
lO\
llll\
lO\
Ol
.
Dot
(
llO\
OlllOO\
OO
.
lllOlOl\
O\
O\
l\
l
-
lllOll\
l\
OOOO
)
;
TA_ASS\
ERT
(
Fab\
s
(
lOlllllOll\

-
lO\
lll\
llOl\
O
)
>
lOllOlOlll
)
;
fl\
oat
lOlllll\
lO\
O
=
lOlllllOlO
/
(
lO\
l\
ll\
llOlO\

-
lOlllll\
Ol\
l
)
;
Vec\
3
lOO\
OlllO\
OOlO
=
llOO\
lllOO\
OO
.
ll\
lOl\
OlOOlO
+
lOOO\
lllOOOOl
*
lOl\
lll\
l\
lOO
;
flo\
at
lO\
OOlll\
OOO\
ll\

=
lOOOl\
lOl\
l\
OlO
.
Do\
t
(
lOOOlll\
O\
O\
Ol\
O\

-
lll\
OlllOOOO
)
;
Vec3
lOOOlllOO\
lO\
O
=
lllOl\
l\
lO\
OO\
O
+
lOO\
OllOl\
lOlO
*
lOO\
OlllO\
OOl\
l
;
fl\
o\
at
lO\
lllO\
Ol\
ll
=
(
lOOOll\
lOO\
lOO
-
lOO\
Ol\
llOO\
OlO
)
.
Ge\
tMa\
gn\
it\
ud\
eSqrd\

(
)
;
if
(
lOlll\
OO\
lll
>
lOOOll\
Olllll
*
lO\
OOl\
lOlll\
ll\

)
{
lOOO\
lllOOOOO\

=
true
;
}
else\

{
flo\
at
llOlOOlllOO
=
Sqrt
(
lO\
OOllOl\
lll\
l
*
lO\
OOllO\
lllll
-
lOlll\
OOlll
)
;
float\

lO\
OOl\
O\
OlO\
lll
=
lOOOll\
O\
llOl\
O
.
Cross\

(
ll\
OOllOllOl\

)
.
GetMagnitu\
de
(
)
;
if
(
Fa\
b\
s
(
lO\
OOl\
OOlO\
lll
)
>
lO\
ll\
OlOl\
ll
*
lOllOlOlll
)
{
llO\
lOO\
l\
llOO
/=
lOOO\
lO\
OlO\
ll\
l\

;
fl\
oat\

lOOllOOllO
=
lOO\
Oll\
lOO\
O\
ll\

-
ll\
OlOOl\
llOO
;
floa\
t
lOOl\
lO\
O\
lll
=
lOOOll\
l\
OO\
Oll
+
llOlOO\
lllOO\

;
if
(
lO\
OllOO\
llO
>
lOOllOOOlO
||
lOOll\
OOl\
ll
<
lOOl\
l\
OOOOl
)
{
lOO\
Oll\
l\
OOOOO
=
true\

;
}
else
{
if
(
lO\
Ol\
lOOll\
O
>
lOOll\
OOOOl\

)
{
Vec3
lOO\
Oll\
lOOlOl\

=
ll\
l\
Ol\
ll\
OOO\
O
+
lOOOll\
Oll\
O\
l\
O
*
lOOl\
l\
OOllO\

;
if\

(
ll\
OOllOll\
Ol
.
Dot
(
lOO\
O\
ll\
lOOlO\
l
-
llOOll\
lOOOO
.
lllOlOl\
OOl\
O
)
>
0.0f
&&
ll\
O\
OllOllO\
l
.
Dot
(
lOOOlllO\
OlOl
-
llOO\
l\
llOO\
O\
O
.
lllOlOlOO\
ll
)
<
0.0f
)
{
lOOl\
lOOOOl
=
lOO\
llOOll\
O\

;
llOlOOl\
Ol\
l\
l\

=
lOOOlll\
OO\
lOl\

;
Ve\
c3
lOOOOlOO\
Ol
=
Geometry\

::
FindCl\
osestPoint\
OnLine
(
lOOOlll\
O\
OlO\
l
,
ll\
OOl\
llOOOO\

.
ll\
l\
OlOlO\
OlO\

,
llOOl\
llOO\
O\
O
.
ll\
lOl\
OlO\
Oll
)
;
llO\
lOOO\
OOlO
=
llO\
l\
O\
OlOll\
l
-
lOOOOlOOOl
;
TA_A\
S\
SE\
R\
T\

(
ll\
OlOO\
O\
OOlO
.
Get\
Mag\
n\
itu\
de
(
)
>
lOllOlO\
lll
)
;
llOlOOOOO\
l\
O
.
Normali\
se
(
)
;
}
}
if
(
lOO\
llOOl\
ll
<
lO\
Oll\
OO\
OlO
)
{
Vec\
3
lOOOlllO\
O\
llO
=
ll\
l\
OlllOOOO\

+
lOO\
OllOllOlO
*
lOOllOO\
lll
;
if
(
ll\
OOllOllOl
.
Dot\

(
lOOO\
lll\
OOl\
lO\

-
llOO\
l\
l\
lOOO\
O
.
lllOlOlOOl\
O
)
>
0.0f
&&
llO\
OllOllO\
l\

.
Dot\

(
lOOOlll\
OO\
ll\
O
-
llOOll\
lOOOO
.
ll\
lO\
lOlO\
Oll\

)
<
0.0f
)
{
lOO\
llO\
OOl\
O
=
lOOllOOl\
ll
;
llOlOOllOO\
O
=
lOO\
OlllOOllO
;
Vec\
3
lO\
OOO\
lOO\
Ol
=
Geom\
et\
ry
::
Find\
Cl\
osestP\
ointOnL\
ine
(
lO\
OOll\
lOO\
llO\

,
ll\
OOll\
lOOOO
.
lll\
OlO\
lO\
OlO
,
llOOlllOOOO
.
lllO\
lOlOOl\
l
)
;
llOl\
OOOOl\
l\
O
=
lOOO\
lllOOl\
lO
-
lOOO\
Ol\
OOOl
;
TA_ASSER\
T
(
ll\
OlOOO\
OllO
.
GetMa\
gnitu\
de
(
)
>
lOll\
OlOll\
l
)
;
ll\
Ol\
OOO\
Oll\
O
.
Normali\
se\

(
)
;
}
}
}
}
}
}
if
(
!
lOO\
OlllOOOOO
)
{
float
lOlOOO\
l\
Ol\
O\
O\

=
ll\
O\
OllOllOl
.
Dot\

(
lOOOllOllOlO
)
;
if
(
lOl\
OOOlOl\
O\
O
>
lOllOlOlll\

)
{
flo\
at\

lOl\
llOlllO
=
llO\
O\
llOll\
Ol
.
Dot
(
llOOl\
llOOOO
.
ll\
l\
Ol\
OlOOl\
O
-
ll\
l\
O\
lllOOOO
)
;
flo\
at
lOOOll\
lOOlll
=
1.0f
/
lO\
lOOOl\
Ol\
OO\

;
float
lOOllO\
OllO\

=
(
lOlllOlllO
-
lOlllO\
l\
OO\
lO
.
lOl\
OlO\
OlOlO\

)
*
lOO\
Oll\
lO\
Ol\
ll
;
fl\
oa\
t
lOOllOOl\
ll\

=
(
lO\
lll\
Ol\
llO
+
lOOO\
llO\
l\
l\
lOO
+
lOll\
lOlOO\
l\
O
.
lOlO\
lO\
O\
lOlO
)
*
lOOOlll\
OOlll\

;
if
(
lOO\
l\
l\
O\
Ol\
lO\

>
lOO\
llOO\
O\
lO\

||
lOOll\
OO\
lll\

<
lO\
OllOOOOl
)
{
lOOO\
lllOO\
OO\
O
=
true
;
}
els\
e\

{
if
(
lOOllOO\
O\
Ol\

<
lOO\
llO\
Ol\
lO\

)
{
Vec\
3
lOOOlllOOlO\
l
=
lll\
Ol\
llO\
OOO
+
lOOO\
llOl\
lOlO\

*
lOOllOO\
llO
;
Vec\
3
lOO\
OlOOOOO\

=
lO\
OOlll\
OO\
lOl\

-
llO\
Ol\
llOOOO
.
lllOl\
OlOOl\
O\

+
llOO\
l\
l\
Oll\
Ol
*
lO\
lllOl\
OOlO\

.
lOlOlOO\
lOlO
;
float
lllOOlOlll\

=
lOOOlOO\
O\
OO
.
Get\
M\
agnit\
ud\
eSqrd\

(
)
;
if
(
lll\
OOl\
Olll
<
llOOl\
llOO\
OO
.
lOlO\
lOO\
lO\
l\
O\

*
llOO\
ll\
lO\
OOO
.
lOlO\
lOO\
lOlO
)
{
lOOll\
OOO\
Ol
=
lOOl\
lOOllO
;
llOlOOlOll\
l
=
lO\
OOlllO\
O\
lOl
;
llOlOOO\
O\
OlO
=
-
ll\
OOllOl\
lOl
;
}
}
if\

(
lOO\
l\
lOOOlO
>
lOO\
llO\
Oll\
l
)
{
Vec3
lOOOlllOO\
ll\
O
=
lll\
Oll\
l\
OOOO\

+
lOOO\
llOl\
lOl\
O
*
lOOllOOlll\

;
Ve\
c3
lO\
O\
OlOO\
O\
OO\

=
lOOO\
ll\
l\
OOllO
-
ll\
OO\
lllOO\
OO
.
lllOlOlO\
Oll
-
llOO\
llO\
l\
lO\
l
*
lOlllO\
lOOlO
.
lO\
lOlO\
Ol\
Ol\
O
;
float
lllOOlOl\
ll
=
lOOOlO\
O\
OOO
.
GetM\
agnit\
ude\
Sqrd
(
)
;
if
(
lllO\
OlO\
lll
<
llOOlllOOOO
.
lOl\
OlO\
OlO\
l\
O
*
llO\
Ol\
llO\
OOO
.
lO\
lOl\
OOlOlO
)
{
lOOl\
lOOOl\
O
=
lOOllOOlll\

;
llO\
lOO\
llOOO\

=
lOOOl\
llOOllO
;
llOlO\
OOOl\
lO\

=
llOOllO\
llO\
l
;
}
}
}
}
else
if
(
lOlOOOl\
OlOO
<
-
lO\
llO\
lO\
lll
)
{
float
lO\
lllOlllO
=
llO\
OllOllO\
l
.
Dot
(
ll\
OOlllOO\
OO
.
lll\
Ol\
Ol\
OOl\
O
-
lll\
Oll\
lOOOO
)
;
float
lOO\
Ol\
ll\
O\
O\
lll
=
1.0f
/
lOlOOOlO\
lO\
O
;
floa\
t
lOOllOOl\
lO
=
(
lOlll\
Ol\
ll\
O\

+
lOOOllO\
lllOO\

+
lOlllOlO\
O\
l\
O\

.
lOlO\
lO\
Ol\
OlO\

)
*
lOOOlll\
OOlll
;
flo\
at
lOO\
l\
lO\
Olll
=
(
lOlllOl\
ll\
O
-
lO\
ll\
l\
O\
l\
OO\
l\
O
.
lOlOl\
OO\
lOl\
O\

)
*
lO\
OO\
lllOOlll\

;
if
(
lO\
O\
l\
lOOllO\

>
lOOllOOOlO
||
lO\
Oll\
O\
O\
ll\
l
<
lOOl\
l\
O\
O\
OO\
l
)
{
lOOO\
l\
llOO\
OOO\

=
tru\
e
;
}
els\
e
{
if
(
lO\
O\
llOOOO\
l
<
lOOllOOll\
O\

)
{
Vec3
lOOOl\
l\
lOOlOl
=
ll\
lOl\
ll\
O\
OOO
+
lO\
OOllO\
llOl\
O\

*
lOOllOOllO
;
Ve\
c3\

lOOOlO\
O\
OOO\

=
lO\
OOl\
llOOlOl
-
llOO\
l\
llOOO\
O
.
lllOlOlOO\
ll
-
llOO\
l\
l\
OllO\
l
*
lOlll\
Ol\
OOlO
.
lOlO\
lOOl\
OlO
;
float
lll\
OOlOlll
=
lO\
OOlO\
OOOO\

.
Ge\
tMagnit\
udeSq\
rd
(
)
;
if\

(
lll\
OOlO\
lll\

<
llOO\
l\
llOOOO
.
lOlOlOOlO\
lO
*
llOOll\
lOOOO
.
lO\
lOlOOl\
OlO
)
{
lO\
OllO\
OO\
Ol
=
lO\
OllOOllO
;
ll\
Ol\
O\
O\
lOlll
=
lOOOlll\
OOlOl
;
ll\
Ol\
OO\
OOOl\
O
=
llOO\
l\
lOllO\
l
;
}
}
if
(
lO\
Ol\
l\
OOO\
lO\

>
lOOllO\
Olll
)
{
Vec\
3
lO\
OOl\
l\
lOOllO
=
lll\
OlllOOO\
O
+
lOOO\
llOllOlO\

*
lOOll\
OO\
lll\

;
Vec3
lOOOlO\
OOOO
=
lOOOl\
llO\
O\
llO
-
llOOlllOO\
OO
.
lll\
OlO\
l\
O\
OlO
+
llOOllOl\
l\
Ol
*
lO\
lllOl\
OOlO
.
lO\
l\
Ol\
OOlOl\
O
;
floa\
t
lllOO\
lO\
lll
=
lOO\
OlOOOO\
O
.
Get\
Magni\
tudeSqrd\

(
)
;
if\

(
ll\
l\
OO\
l\
Oll\
l\

<
llO\
OlllO\
OOO
.
lO\
lOlOOlOlO\

*
ll\
OO\
ll\
lO\
OOO
.
lOl\
OlOOl\
O\
lO
)
{
lOOll\
OOOlO\

=
lOOllOOl\
ll
;
llOl\
OOllO\
OO
=
lOOOlllO\
OllO\

;
llOl\
OO\
OO\
llO
=
-
ll\
OOll\
OllOl
;
}
}
}
}
}
if\

(
!
lOO\
Olll\
OO\
O\
OO
)
{
Mat33
lOOO\
O\
OOO\
ll
;
lO\
OO\
OOO\
Oll
.
SetToLo\
okDo\
wnV\
ector\

(
llOOllOllO\
l
)
;
Mat33
lOOOl\
l\
lOl\
OOO
=
lO\
OOOOO\
Oll
;
lOO\
Olll\
O\
l\
OOO
.
Tra\
nspos\
e\
A\
sInv\
ert
(
)
;
Vec3
llll\
OOO\
OOlO
=
(
(
lllOl\
llOOOl
-
lllOlll\
OOOO\

)
*
lOOO\
lll\
OlO\
OO
)
;
Vec3
lOOOlO\
OlO\
lOl
=
llOO\
lllOO\
OO
.
lllO\
lO\
lOOlO\

;
for
(
int
lOO\
l\
OOlOO\
l
=
0
;
lOOl\
OO\
lO\
Ol
<
2
;
lOO\
lOO\
lOOl
++
)
{
Ve\
c\
3\

lllllllll\

=
(
lllOll\
l\
OOO\
O
-
lOOO\
lOOlOlOl
)
*
lO\
OOlllO\
l\
O\
OO
;
float
lOO\
Ol\
ll\
OlOOl
=
llllOOO\
OO\
lO
.
GetM\
agni\
tudeSqrd
(
)
;
lllllllll
-=
llllO\
O\
O\
OOlO
*
lll\
lOOOOOlO
.
Dot\

(
ll\
llllll\
l\

)
/
lOOO\
lllOlOOl\

;
float
lOOOlllOlO\
l\
O\

=
2.0f
*
llllll\
l\
ll
.
Dot
(
lll\
lOOOOO\
l\
O
)
;
floa\
t
lOOOl\
ll\
Ol\
Oll
=
lllllllll
.
GetMag\
nitudeSq\
rd\

(
)
-
Pow2
(
llOO\
lllO\
OOO
.
lO\
lOlOOlOlO
)
-
Pow2\

(
lOlllOlO\
Ol\
O
.
lO\
lO\
lO\
OlOl\
O
)
;
const\

fl\
oat
ll\
llOO\
OO\
O\
l
=
Pow2
(
lOO\
O\
l\
ll\
O\
lOO\
l\

)
;
co\
nst
flo\
a\
t
lll\
l\
OOOO\
l\
O
=
2.0f
*
lOOOl\
llOlO\
Ol
*
lOOO\
ll\
lOlOlO
;
const
fl\
oat
llll\
OOOOOO
=
2.0f
*
lOOOlllO\
lOOl
*
lOOOll\
lOlOll
+
Pow2
(
lOOOlllOlOlO\

)
+
4.0f
*
Po\
w2\

(
llOO\
ll\
lOOOO
.
lOl\
OlO\
OlOlO
*
llllOOOOOl\
O
.
z
)
;
cons\
t
float
lllO\
ll\
llll
=
2.0f
*
lOO\
O\
lll\
OlOlO
*
lOO\
Olll\
OlOl\
l\

+
8.0f
*
Pow2
(
llO\
Ol\
llO\
OOO
.
lOlOlO\
OlOlO\

)
*
ll\
lllllll
.
z
*
llllO\
OOOOlO\

.
z
;
cons\
t
fl\
oa\
t
lO\
O\
O\
lllOl\
lO\
O\

=
Pow2
(
lOO\
O\
lllOlOl\
l
)
+
4.0f
*
Pow2
(
llOOll\
l\
O\
OOO\

.
lOlOlOO\
l\
OlO\

)
*
(
Pow2
(
llllll\
lll
.
z
)
-
Pow2
(
lO\
lll\
OlOOlO\

.
lOl\
OlOOlOlO\

)
)
;
con\
st
float
lO\
OOlllO\
l\
lO\
l
=
1.0f
/
lll\
lOOOOOl\

;
flo\
a\
t
lOOOlllO\
lllO
[
4
]
;
int
lO\
OO\
lllO\
ll\
ll
=
lOOO\
llllOOO\
O\

(
lll\
lO\
O\
OOlO
*
lOOOl\
l\
l\
OllOl
,
llllOOOOOO
*
lO\
OO\
lllOllOl
,
lllOl\
l\
llll
*
lO\
OOlllOllOl
,
lOO\
Oll\
l\
OllOO\

*
lOOO\
lll\
Ol\
lO\
l
,
lOO\
Oll\
l\
Oll\
lO\

)
;
for
(
int
lOOOl\
l\
OOO\
l
=
0
;
lO\
OOllOO\
Ol
<
lOOOl\
llO\
llll
;
lOOOllOO\
O\
l
++
)
{
Vec3
lOOOll\
llOOOl
=
lll\
lllll\
l
+
lll\
l\
OOOO\
Ol\
O\

*
lO\
OOlllOl\
llO
[
lOOOl\
lO\
O\
Ol
]
;
if
(
lOOOl\
lllOO\
Ol
.
z
*
(
flo\
at\

)
(
lOOlO\
OlOOl\

*
2
-
1
)
<
0.0f
)
co\
n\
tinue
;
Vec3
llOO\
llll\
lO\

=
(
lOO\
Oll\
ll\
OOOl
)
*
lO\
O\
O\
OOOOl\
l
+
lO\
OOlOOlOl\
Ol
;
Ve\
c3
ll\
OllOO\
l\
lO
=
lOOOlll\
l\
OOO\
l
;
llOllOOllO
.
z
=
0.0f
;
floa\
t
lOll\
l\
l\
O\
lOl
=
ll\
O\
ll\
OOllO
.
GetMagnitude\

(
)
;
if
(
lOll\
ll\
OlOl
<=
ll\
OOlllOOOO
.
lOlO\
lO\
OlOl\
O
)
co\
n\
t\
in\
ue
;
llOl\
l\
OOll\
O
*=
llOOlllO\
OOO
.
lOlOlOOlOl\
O
/
lOllllOl\
Ol
;
Vec3
lOOOlO\
OO\
OO
=
lO\
OO\
llllO\
O\
O\
l
-
llOllOOl\
lO
;
lOllllOlOl\

=
lOOOlO\
OOOO
.
GetMagn\
it\
ude
(
)
;
TA_ASSER\
T
(
lOllllOl\
O\
l
>
lO\
l\
lO\
lOll\
l
)
;
lOOOlO\
OO\
OO
*=
lO\
O\
OO\
OOOl\
l
;
lOOOlOOO\
OO
/=
lOl\
lllOlO\
l
;
flo\
a\
t
lOlOOO\
l\
O\
lOO
=
lOO\
Ol\
lOll\
O\
lO
.
Dot
(
lOO\
O\
lO\
OO\
OO
)
;
if
(
lOlOOOlO\
lOO
<
0.0f
)
{
fl\
o\
at
lOOllOOllO
=
lOO\
OllO\
llOlO\

.
Dot
(
llO\
Olllll\
O
-
lllOlllOO\
OO
)
;
if
(
lOO\
ll\
OOl\
lO
>
lOO\
llO\
O\
O\
l\
O
)
{
}
else
if
(
lOOllOOllO
>
lO\
O\
llO\
OOOl
)
{
lOOll\
OO\
OOl
=
lO\
Oll\
OO\
llO\

;
llOlO\
O\
l\
Ol\
l\
l
=
llO\
O\
lllllO
;
llOlOOOOOlO
=
lOO\
OlOOOOO\

;
}
}
else
if
(
lOlOOOlOl\
OO\

>
0.0f
)
{
flo\
a\
t
lOOl\
lOO\
lll
=
lO\
OO\
llOl\
lOlO\

.
Do\
t
(
ll\
O\
Olll\
ll\
O\

-
lll\
OlllOO\
OO
)
;
if
(
lOO\
llOOll\
l\

<
lO\
O\
llOOOOl\

)
{
}
el\
se
if\

(
lOOll\
O\
Olll
<
lOO\
llOOOlO\

)
{
lOO\
llOOOl\
O
=
lOO\
l\
lOOlll
;
llOlOOllOOO
=
llOOl\
llll\
O
;
llO\
l\
OOOOllO
=
lOO\
OlO\
OOOO
;
}
}
}
lOO\
O\
l\
OOlO\
lOl
=
llOOlllO\
O\
OO
.
lllOlOlOOll
;
}
}
if
(
!
lOO\
OlllOOOOO
)
{
Vec3
lOOOOlOOO\
l
=
lll\
Olll\
OOOO\

;
for\

(
in\
t
lOOOl\
l\
OO\
Ol
=
0
;
;
lO\
OO\
l\
lO\
OO\
l
++
)
{
flo\
at
lOlO\
llO\
lOO\

=
llOO\
llOl\
l\
O\
l
.
Dot
(
lOOO\
OlO\
OO\
l
-
llO\
Ol\
ll\
OOOO
.
lllO\
lOl\
O\
O\
lO
)
+
lOlll\
O\
l\
OOlO\

.
lOlOlOOlOlO\

;
float
lOlOllO\
lOl
=
ll\
OO\
llOl\
lOl
.
Dot
(
lOOOOl\
O\
OOl\

-
llOO\
ll\
l\
O\
OO\
O
.
lll\
Ol\
OlOOll
)
-
lOlllOlOOlO
.
lOl\
O\
lOO\
lO\
l\
O\

;
Vec3
lO\
llll\
OlOO\

;
floa\
t
lOlll\
lOOlll\

=
0
;
bool
lOO\
OOlOl\
lOll\

=
fa\
lse
;
TA_ASSERT
(
lO\
l\
OllO\
lOO
-
lOlOllO\
lO\
l
>
0.0f
)
;
floa\
t
lOO\
Olll\
l\
OOlO
=
lO\
O\
Oll\
Olll\
OO
+
lO\
l\
llOlOO\
lO\

.
lOlOlO\
Ol\
O\
lO
+
lO\
l\
llOl\
O\
OlO
.
lO\
l\
Ol\
OO\
lOl\
O
;
fl\
oat\

lll\
Ol\
llllO
=
lOOOllllOOlO
*
lO\
lOll\
OlOO
/
(
lOlOl\
lOlOO\

-
lOlOllOlOl\

)
;
if
(
lllOlllllO
>
0.0f
&&
lllOl\
llll\
O
<
lO\
OOl\
l\
llOOlO
)
{
Vec3
lOOO\
ll\
llOOll
=
ll\
OO\
ll\
l\
O\
OOO
.
lllOl\
O\
lO\
OlO
+
ll\
OO\
l\
lO\
ll\
Ol
*
(
lllOlll\
llO
-
lOlllOlOO\
lO\

.
lOlO\
lOO\
lOl\
O\

)
;
Vec3
lOOOlOOOO\
O
=
lOOO\
O\
lOO\
Ol\

-
lOOOlll\
lO\
Oll\

;
float
lOl\
lllOl\
O\
l
=
lOOOlOOOOO
.
Ge\
t\
M\
agn\
itude\
Sqrd
(
)
;
if
(
lO\
llllOl\
O\
l
<
lOO\
OllOl\
l\
l\
l\
l
*
lOOO\
ll\
O\
lllll
&&
lOlll\
l\
OlO\
l
>
lO\
l\
lOlOlll
)
{
lOllllOlOl
=
Sq\
rt\

(
lO\
ll\
ll\
OlOl
)
;
lOO\
OlOO\
OOO
/=
lOllllOlOl
;
if
(
lO\
l\
lllOlOl
>
llOOll\
l\
OOO\
O\

.
lOlOl\
O\
Ol\
Ol\
O
)
{
if
(
lllOl\
lll\
lO\

<
lOlll\
OlOO\
l\
O
.
lOlOlOOlOlO
)
{
Vec3
lOlllOlOl\
O\
O\

=
ll\
OOlllO\
OO\
O
.
lllOl\
OlOOlO
+
lO\
OOlOOOO\
O
*
llOOl\
llOO\
OO
.
lOl\
OlOOl\
Ol\
O
;
Ve\
c3\

lO\
lllOlOlll
=
lOO\
OOlOO\
Ol
-
lOll\
lOlOl\
OO\

;
lOllll\
Ol\
Ol
=
lO\
lllOl\
Ol\
ll\

.
Ge\
tMag\
nitude
(
)
;
lOllllOOlll
=
lOl\
llO\
lOOlO
.
lO\
lO\
lOOlOlO
-
lOllllOlOl
;
if
(
lOllll\
OOlll\

>
0.0f
)
{
lO\
O\
OOlOl\
l\
Oll
=
true\

;
if\

(
lOllllOlO\
l
>
lO\
llOlOl\
ll\

)
{
lOll\
lO\
lOll\
l\

/=
lO\
ll\
ll\
Ol\
Ol
;
lOl\
lll\
OlO\
O
=
lOlllOlOll\
l
;
}
else
{
lO\
llllOl\
OO
=
lOO\
OlOOOOO
;
}
}
}
else\

if
(
ll\
lO\
lll\
llO
>
lOOOll\
O\
lllOO
+
lOll\
l\
OlOOlO
.
lOlOl\
OO\
lOl\
O
)
{
Ve\
c\
3\

lOlllO\
lOlOO
=
llOOll\
lOOOO\

.
ll\
l\
OlOlOOll
+
lOOOl\
O\
OO\
O\
O\

*
llOOlllOOOO\

.
lO\
lOlOOlO\
lO
;
Vec3
lOl\
l\
l\
O\
lOl\
ll
=
lOOOOlO\
O\
O\
l
-
lOlllOl\
OlO\
O
;
lOl\
l\
llOl\
O\
l
=
lOll\
lOlO\
lll
.
GetMagnit\
ude
(
)
;
lO\
llll\
OOlll
=
lOlllO\
lOO\
l\
O
.
lO\
lO\
lOOlOl\
O\

-
lOll\
llO\
lOl
;
if
(
lOlll\
lOOlll
>
0.0f
)
{
lOOOOlOll\
Oll
=
true
;
if
(
lO\
llll\
OlOl
>
lO\
ll\
OlOl\
l\
l\

)
{
lO\
ll\
l\
OlOlll
/=
lOllllOlOl
;
lOlll\
lO\
lOO
=
lO\
lllOlOlll
;
}
else
{
lOllllOl\
OO
=
lOOOl\
O\
OO\
OO\

;
}
}
}
el\
se
{
lOl\
lllOlOO
=
lOOOlOOOO\
O
;
lOlll\
lOOll\
l
=
lOOOll\
O\
lllll
-
lOll\
l\
lOlOl
;
lOO\
OOlOl\
lO\
ll
=
tr\
ue
;
}
}
else
{
fl\
oat
lOO\
OlOlOO\
lOO
=
lllOlllllO
;
floa\
t
lOOOl\
OlOOOll
=
lOO\
Ol\
lllOOlO
-
ll\
lO\
lll\
llO
;
float
lOOO\
llllOlOO
=
lOO\
Ol\
lO\
ll\
lll
-
lOllllOlO\
l
;
if
(
lOOO\
lOlOOl\
O\
O\

<
lOO\
Olll\
lOlOO
)
{
if
(
lOOO\
lOlO\
O\
l\
OO
<
lO\
OOl\
lll\
OlOO
)
{
lOOO\
l\
OOO\
O\
O
=
-
llOOl\
lOllO\
l
;
lOl\
lllOlOO\

=
lOOOlOOOOO\

;
lOllllOOl\
ll
=
lO\
OO\
lOl\
OOlOO
;
lOO\
OOlOllO\
l\
l\

=
tr\
ue
;
}
else
{
lOllllO\
lOO
=
lOOO\
l\
OOO\
OO
;
lOllllOO\
lll
=
lOO\
O\
l\
lllOlOO
;
lOOOOlOl\
lOl\
l
=
true
;
}
}
els\
e
if
(
lO\
OOlOlOOO\
ll
<
lOO\
Olll\
l\
O\
lOO\

)
{
lOOOlOOO\
O\
O\

=
llOOllOll\
Ol
;
lO\
l\
ll\
lO\
lOO
=
lO\
O\
OlOOO\
OO
;
lOllllOOlll\

=
lO\
OOlOlOOOll
;
lO\
O\
OOl\
Oll\
Oll\

=
true
;
}
else
{
lOlll\
lO\
lOO
=
lOOOlOO\
O\
O\
O
;
lOl\
lllOOlll
=
lOOOl\
ll\
l\
Ol\
OO
;
lOOO\
OlOllOl\
l\

=
true
;
}
}
}
}
if
(
lOOOll\
OOOl\

==
0
)
{
if
(
lOOOO\
lOllOll
)
{
lOO\
llOOOOl
=
0.0f
;
lO\
OOllO\
lllOl\

=
lOll\
l\
l\
OOlll\

;
llOlOOl\
Olll\

=
lOO\
OO\
lOOOl
;
llOlOO\
OOOlO
=
lOllll\
O\
lOO
;
}
lOOO\
Ol\
OOO\
l
=
lllOlll\
OOOl
;
}
else\

{
if
(
lO\
O\
OO\
l\
Ol\
lOl\
l\

)
{
lOOllOOOl\
O\

=
0.0f
;
lO\
OO\
l\
lO\
llllO
=
lOllllOOl\
ll
;
llOl\
OOllO\
O\
O
=
lOOOOlOO\
Ol\

;
llO\
l\
OOO\
O\
llO
=
lO\
lll\
l\
O\
lOO
;
}
bre\
ak
;
}
}
}
bool
lOOOOl\
OllOll
=
fa\
l\
s\
e
;
if
(
lOOllOOOO\
l
!=
0.0f
||
lOO\
O\
llOlllOl
>
0.0f
)
{
Colli\
sio\
n\

lOllOllOlll\

;
lOl\
l\
OllOlll
.
Initi\
alise
(
Co\
ll\
i\
si\
o\
n\

::
lOll\
OlOO\
OOO
,
0.0f
,
lO\
OOllO\
l\
llOl
,
ll\
OlOOlO\
lll
+
ll\
OlO\
OOOO\
lO
*
(
lOOO\
ll\
OlllOl
-
lO\
lllOlOOlO
.
lOl\
OlOOlO\
lO\

)
,
llOlO\
OOOO\
lO
)
;
TA\
_ASSERT
(
ll\
OlOOOO\
OlO
.
IsNormalised
(
)
)
;
lll\
Ol\
ll\
lOOO\

(
lOllOllOlll
,
lOlll\
OOOOll
)
;
lOOOO\
l\
O\
ll\
Oll\

=
tru\
e
;
}
if
(
lO\
OllOOO\
l\
O
!=
lO\
OOll\
Oll\
O\
ll
||
lOOO\
llO\
ll\
llO
>
0.0f
)
{
Collision
lOllOl\
lOl\
ll
;
lOl\
lOll\
Ol\
ll\

.
In\
itialise
(
Coll\
is\
i\
on
::
lO\
llOlO\
OO\
OO
,
0.0f
,
lOOOllOl\
ll\
l\
O\

,
llOlOO\
llOO\
O
+
llOlO\
OO\
OllO\

*
(
lOO\
O\
ll\
OllllO
-
lOlllOl\
OOlO
.
lOl\
O\
l\
O\
OlO\
lO\

)
,
llOlOOOOllO
)
;
lllOlll\
lOOO\

(
lOl\
lO\
llOll\
l
,
lOlllOOOOll
)
;
lOOO\
OlOll\
Ol\
l
=
true
;
}
if
(
lOOOO\
l\
O\
llOll\

||
!
lOlllOOOOl\
l
->
lOl\
lO\
lllOll\

)
retur\
n\

;
Vec3
ll\
lOlll\
OOl\
O
=
lOl\
ll\
O\
lOOlO\

.
lllOlOlOOlO
*
lOlllO\
O\
OOlO\

;
Vec3
lll\
OlllOOl\
l
=
lOlllOl\
OOlO
.
lllOlOl\
OOl\
l
*
lOll\
lOOOOlO
;
Vec3\

ll\
lOll\
llOll\

=
ll\
lOlllO\
OOO
;
Vec3
ll\
lOllll\
lO\
O
=
lllOlllOOl\
O
;
for
(
int
lOO\
l\
O\
OlO\
lO
=
0
;
lOOlOOlO\
lO
<
2
;
lOO\
l\
OOlO\
l\
O
++
)
{
floa\
t
lll\
lOlO\
Ol\
l
=
0.0f
;
bo\
ol
lOOO\
lll\
lOlOl
=
false
;
Vec3
lOO\
lOllOOl
=
llO\
Olll\
OOO\
O
.
ll\
lO\
lOlOOll
;
int
lOOO\
l\
lO\
OO\
l
;
for
(
lO\
OOllOO\
O\
l
=
0
;
lOOO\
llOOOl
<
2
;
lOO\
OllO\
OO\
l
++
)
{
if
(
!
lOOO\
lll\
l\
Ol\
Ol\

)
{
float\

lll\
l\
l\
OOOl\
O
=
ll\
OOl\
lOllOl
.
Do\
t
(
lllO\
l\
l\
l\
lOll
-
lOOlOllO\
Ol\

)
-
lOl\
ll\
OlOO\
l\
O
.
lOl\
Ol\
O\
Ol\
Ol\
O
;
flo\
at\

ll\
lllO\
O\
O\
ll\

=
llOOllOl\
lOl
.
Do\
t\

(
lllOlllllOO
-
lOOlOl\
lOO\
l\

)
-
lOl\
l\
lOlO\
O\
lO
.
lOlOlOO\
l\
O\
lO
;
if\

(
lll\
llOOOlO
>
lOllOlOll\
l
&&
lllllO\
O\
Ol\
l
<
-
lOl\
lOlO\
lll
)
{
llllOlOO\
l\
l\

=
ll\
lllOOOlO
/
(
lllllO\
O\
OlO
-
lllllOOOll
)
;
Vec3\

lOOOllOllOOO
=
ll\
lOll\
ll\
Oll\

+
(
ll\
l\
Olll\
l\
lOO
-
ll\
lOllllO\
ll\

)
*
lll\
lOl\
OOll\

;
lOOOllOll\
O\
OO
-=
llOOllOllOl
*
lO\
l\
l\
l\
O\
lO\
OlO
.
lO\
lOlO\
OlOlO
;
fl\
o\
at
lOl\
lllOl\
Ol
=
(
lO\
OOll\
O\
llOOO
-
lO\
OlOll\
O\
O\
l\

)
.
GetMa\
gnitudeSqrd\

(
)
;
if\

(
lOllllOlO\
l
<
llOOl\
llOO\
O\
O\

.
lO\
l\
O\
l\
OO\
lOlO\

*
llOO\
lllOO\
O\
O
.
lOlO\
lOOlOl\
O
)
{
Col\
l\
i\
sion
lOl\
lOl\
lOlll\

;
lOl\
lO\
l\
lO\
lll
.
Ini\
tialise
(
Collisio\
n
::
lOllO\
lO\
OOOO
,
lll\
lO\
lOOll
,
0.0f
,
lOO\
OllOllOOO
,
ll\
OOl\
lOllOl
)
;
lllO\
llllOOO\

(
lOllOllO\
ll\
l\

,
lOlll\
OOO\
Oll
)
;
lOOOlll\
lOlOl\

=
tru\
e
;
}
}
}
lOOlOllOOl\

=
llOOlllOO\
O\
O
.
lllOlOlOOlO\

;
ll\
OOllOllOl
=
-
llOOllOl\
l\
Ol
;
}
if\

(
!
lOOO\
l\
ll\
lOlO\
l\

)
{
Ve\
c3
lOllllO\
Oll
;
Ve\
c3\

lO\
OOlOOOOO
;
if
(
Ge\
om\
etry\

::
Test\
Sph\
ereMove\
m\
entA\
gainstL\
ine\

(
lllOllllOll\

,
lll\
OlllllOO\

,
ll\
O\
O\
l\
ll\
OO\
OO
.
lllO\
lOlOO\
lO
,
llOOl\
llOOOO
.
lllOlOlO\
O\
l\
l
,
lO\
O\
O\
l\
lOl\
l\
l\
l\
l
,
ll\
ll\
OlO\
O\
ll\

,
lOll\
llOOll
,
lOOOlO\
OO\
OO\

)
)
{
lO\
ll\
l\
lOOll
+=
lO\
OO\
l\
OO\
OO\
O
*
llOOl\
llOO\
O\
O
.
lOlOl\
OOl\
OlO\

;
Collisio\
n
lO\
llOl\
lO\
lll
;
lOll\
OllOlll
.
In\
itialise\

(
Coll\
ision\

::
lOl\
lOlOOOOO\

,
llll\
OlO\
O\
ll\

,
0.0f
,
lOl\
lll\
OOl\
l
,
lO\
OOlO\
OO\
OO
)
;
lllO\
l\
l\
llOO\
O
(
lOl\
lOllOl\
ll
,
lOlllOOOOl\
l
)
;
lO\
O\
Oll\
llOlO\
l
=
true
;
}
}
if
(
!
lOO\
Oll\
llO\
lO\
l
)
{
lOOlOllOOl
=
llOOl\
ll\
O\
OOO
.
lllO\
lOl\
OOll
;
fo\
r
(
lOO\
Oll\
OOOl
=
0
;
lOOOllOOOl\

<
2
;
lOOOllOOO\
l\

++
)
{
if
(
!
lOO\
Ol\
lllOlO\
l\

&&
llOOl\
lOllOl\

.
Dot
(
lllOl\
lll\
lOO\

-
ll\
lOllllOll
)
<
0.0f
)
{
Vec3
lOllllO\
Ol\
l
;
Vec3
lOO\
OlOOOOO
;
if
(
lOOOllO\
l\
l\
OOl
(
lllO\
l\
ll\
lOll
,
lllOllll\
lOO
,
lOOlOllOOl\

,
llOOllOllOl
,
llOOl\
llOO\
OO
.
lOlOlO\
OlOl\
O
,
lO\
ll\
l\
OlOO\
l\
O
.
lOlOlOO\
lOlO
,
llll\
OlOO\
ll
,
lO\
ll\
llOOl\
l\

,
lOOO\
lOOOOO\

)
)
{
lOllll\
OOll
+=
lOOOlOOOOO
*
ll\
O\
OlllOO\
OO
.
lOlOlOO\
lOlO
;
Collisi\
on\

lOl\
l\
O\
ll\
Oll\
l
;
lO\
llOllOl\
ll\

.
Init\
ialise
(
Collision\

::
lOl\
lOlOOO\
O\
O
,
llllOlO\
Oll
,
0.0f
,
lOl\
ll\
lO\
Oll\

-
lOOOl\
OO\
OOO
*
lOOO\
llO\
llll\
l
,
lOOOlOO\
O\
O\
O
)
;
lll\
Ollll\
OOO\

(
lOllOll\
Ol\
ll\

,
lOlll\
O\
OOO\
l\
l
)
;
lO\
O\
Olll\
l\
Ol\
Ol
=
true
;
}
}
lOOlO\
llOO\
l
=
llO\
Ol\
llOOOO
.
lllOlOlOOlO
;
ll\
O\
Ol\
lOllO\
l\

=
-
llO\
O\
l\
lO\
llOl\

;
}
}
ll\
lOllllOl\
l\

=
lllOl\
l\
lOOO\
l
;
ll\
lOlll\
ll\
OO
=
lllOlllOO\
l\
l
;
}
{
float
ll\
llO\
lOO\
ll
;
Vec\
3
lOl\
ll\
lO\
Oll
;
Ve\
c3
lOOO\
lOOOOO
;
if
(
Geo\
metry\

::
TestLine\
M\
ovement\
AgainstCap\
s\
ule
(
lllO\
l\
ll\
OO\
O\
O
,
lllOl\
l\
lOOOl
,
lllO\
lll\
O\
OlO
,
ll\
lOlllOOll
,
llO\
O\
l\
llO\
OOO
.
lllOlOlOOlO
,
llO\
OlllOO\
OO\

.
lllOlO\
lOO\
ll\

,
lOO\
OllOlll\
ll
,
llllOlOOll
,
lO\
l\
lllO\
O\
ll\

,
lOOOl\
OOO\
OO
)
)
{
lOlll\
lOOll
+=
lO\
OOl\
OO\
OOO\

*
llOO\
l\
l\
l\
OOOO
.
lOlOlO\
OlOl\
O
;
Co\
ll\
is\
ion\

lOllOllOlll
;
lO\
l\
lOl\
lOl\
ll
.
In\
it\
ial\
i\
se
(
Coll\
ision
::
lOll\
Ol\
OO\
O\
O\
O
,
ll\
llOlOO\
l\
l\

,
0.0f
,
lO\
ll\
llOOll
,
lOO\
O\
lO\
OOO\
O
)
;
lllOlll\
lOOO
(
lOllOllOlll\

,
lOl\
l\
lOOOO\
l\
l
)
;
}
}
{
Vec3
lOOOll\
O\
lOOll
=
(
llOO\
lllOOOO
.
lllO\
lOlOOlO
/
lO\
lllO\
OO\
OlO\

)
*
lOl\
l\
lO\
OOO\
Ol
;
Vec3
lOOO\
ll\
OlOl\
O\
O\

=
(
llO\
O\
ll\
lOOOO
.
ll\
lOlOlOO\
ll
/
lOlllOOOO\
lO
)
*
lOlllOO\
OOOl
;
ll\
OO\
llOll\
Ol
=
(
lll\
O\
ll\
l\
O\
OO\
l\

-
lllOlllOO\
O\
O
)
.
GetNormal
(
)
;
Ve\
c3\

lOO\
OlOll\
OO\
l\
l
=
(
llOOl\
ll\
O\
OO\
O
.
lllOlO\
lOOll
-
ll\
OOl\
l\
lOOO\
O
.
ll\
lOlOlOOlO
)
.
GetNo\
rma\
l
(
)
;
Vec3\

lOOOllO\
l\
OOlO
=
(
lOOOllOlOl\
OO\

-
lOOOll\
OlO\
Ol\
l
)
.
Ge\
tNormal
(
)
;
lOOOlOl\
Oll\
l\
O
(
llOOl\
l\
lOOOO\

.
lll\
OlO\
lO\
Ol\
l
,
lOOOl\
lOl\
OlOO
,
lllOlllO\
OOO
,
ll\
lOlll\
OOO\
l
,
llOO\
llO\
ll\
Ol
,
lO\
OOlOl\
lOOl\
l
,
llOOlllO\
OOO
.
lOlOlOOl\
Ol\
O
,
lOlllOlOOlO
.
lOlOlOOlOlO
,
-
1.0f
,
fals\
e\

,
lOl\
llOOOOll\

)
;
lOO\
OlOlOll\
lO
(
llOO\
lllOOOO
.
ll\
lOlO\
lOOlO\

,
lO\
OOllOlOOll
,
lllO\
lllOOOO\

,
lllO\
l\
l\
lOO\
Ol
,
llOOllOllOl
,
-
lOOOlO\
llOOll\

,
llOO\
lll\
O\
OOO
.
lOlOlOO\
lOl\
O\

,
lOl\
llOlOOlO
.
lOl\
O\
l\
O\
OlOlO
,
-
1.0f
,
fa\
l\
s\
e
,
lO\
lllOOOO\
ll\

)
;
}
}
void
TAC\
_CA\
L\
L\

llllOl\
OOOOl
(
co\
nst\

MFrame
&
lOlllO\
OOOOl
,
con\
st
MFra\
me
&
lOlllOOO\
O\
lO
,
lO\
llO\
lllO\
OO\

*
lOll\
lOO\
OOll
)
{
ll\
lOOll\
OO\
l\
O
(
)
;
TA_A\
S\
SERT
(
lOl\
llO\
OOOll
->
lOllOOOl\
lll
->
GetCollision\
Ob\
ject\
T\
yp\
e
(
)
==
Co\
llis\
ionObje\
ct
::
TYP\
E_C\
YLI\
NDE\
R
)
;
const\

CollisionObje\
ctCyli\
nder
&
llO\
Olll\
OO\
OO
=
*
(
const\

Coll\
is\
ionObjec\
tCy\
l\
ind\
er\

*
)
lOlllOOOOll
->
lOll\
O\
OO\
ll\
ll
;
TA_ASSER\
T\

(
lO\
lllO\
OOOll
->
lOl\
lOOlO\
O\
OO
->
GetCollisio\
nOb\
jectT\
y\
pe
(
)
==
Co\
llis\
io\
nObjec\
t
::
TYP\
E_CAC\
HED_\
P\
OL\
Y_D\
ATA\

)
;
const\

Coll\
i\
sionObjectCach\
e\
dPol\
y\
D\
at\
a
&
ll\
Oll\
lllO\
Ol
=
*
(
const
Co\
ll\
is\
ionObj\
ec\
tCach\
e\
d\
Po\
lyDat\
a
*
)
lOl\
ll\
OOOOl\
l
->
lOllOOlOO\
OO\

;
Vec3
lOl\
ll\
Ol\
OOOO\

[
2
]
;
lOll\
lOlOOOO\

[
0
]
=
ll\
OOlll\
OOOO
.
lll\
Ol\
O\
lOOlO
*
lOlllOOOOO\
l
;
lOll\
lO\
lOO\
OO
[
1
]
=
llOOlllOO\
OO
.
ll\
lOlOlOOll\

*
lOlllOOOOOl
;
Ve\
c\
3
lOllll\
OOOll\

[
2
]
;
lO\
llllOO\
Oll
[
0
]
=
llO\
Olll\
OOOO\

.
ll\
lOlOl\
OO\
l\
O
*
lO\
lllOOOOlO
;
lOllllOO\
Oll
[
1
]
=
llOO\
ll\
l\
OOOO
.
lllOlOlOO\
ll
*
lOll\
lOOOOlO
;
Vec\
3
ll\
O\
O\
llOllO\
l\

=
lOlllOlOO\
O\
O
[
1
]
-
lOl\
ll\
OlOOO\
O
[
0
]
;
TA_ASSERT\

(
ll\
OOl\
l\
OllO\
l
.
GetMagni\
t\
u\
de\

(
)
>
0.0f
)
;
llOOl\
lOllOl\

.
Normalise
(
)
;
for\

(
int\

lll\
OllllllO
=
0
;
ll\
lOlll\
l\
llO
<
llOllll\
lO\
O\
l\

.
lllOl\
O\
OlO\
lO
(
)
;
)
{
cons\
t
Col\
li\
sionO\
bjec\
tCach\
ed\
Pol\
yDa\
ta\

::
Poly\
gon\

*
llO\
OOlOlOO
=
(
const
Col\
lisionOb\
j\
ect\
Cac\
h\
edP\
oly\
D\
ata
::
Polyg\
o\
n
*
)
ll\
Ollll\
lOOl
.
lllO\
lOO\
lO\
Ol
(
lllOl\
lll\
llO\

)
;
ll\
l\
Ol\
l\
llllO
+=
ll\
O\
lllllOOl
.
lll\
O\
OllO\
OOl
(
llOO\
OlOl\
OO
->
lO\
llO\
ll\
lO\
l
)
;
#define lOlllOlOlOl(lOOOllOOOl) llOOOlOlOO->llOllllOlO[lOOOllOOOl].lOOOOlllll
#define lOllllOOOlO(lllOlllllO, lllOlllllll, llOOOlOlOO, lOOOOlllll, lOOOlOOOOO)								\
{																											\
	Collision lOllOllOlll;																				\
	lOllOllOlll.Initialise(																				\
		Collision::lOllOlOOOOO,																				\
		lllOlllllO,																								\
		lllOlllllll,																								\
		lOOOOlllll,																							\
		lOOOlOOOOO);																							\
	lOllOllOlll.lOllOOlOOlO = llOOOlOlOO->llOlllOlOOO;														\
	lllOOllOlll(lOllOllOlll, lOlllOOOOll);							\
}
#define lOlllOlllOl(lllOlllllO, lllOlllllll, llOOOlOlOO, lllllllll, lOOOOOOOOO, lOOOOlllll, lOOOlOOOOO, lOllOlOlOlO) \
	lllOlOOOllO(lllOlllllO, lllOlllllll, llOOOlOlOO->llOlllOlOOO, lllllllll, lOOOOOOOOO, lOOOOlllll, lOOOlOOOOO, lOllOlOlOlO)
#define lOllllOOOOl(lllOlllllO, lllOlllllll, llOOOlOlOO, lOlllOlOOl, lllOOlllOll, lllOOOlllOO, lOOOOlllll, lOOOlOOOOO) \
	lllOOlllOlO(lllOlllllO, lllOlllllll, llOOOlOlOO, lOlllOlOOl, lllOOlllOll, lllOOOlllOO, lOOOOlllll, lOOOlOOOOO)
#define lOlllOllOll(lllllllll, lOOOOOOOOO, lOllOlOlOlO) \
	lllOlOOOlll(lllllllll, lOOOOOOOOO, lOllOlOlOlO)
#define lOllllOOOOO(lllOOOlllOO) \
	lllOlOOOOOO(lllOOOlllOO, lllOlOOOOOl)
#define lOlllOlOOOl(llOOlllllO) (llOOOlOlOO->lOOOlOOOOO.Dot((llOOlllllO) - llOOOlOlOO->llOllllOlO[0].lOOOOlllll))
con\
st
bo\
ol
lOllllOl\
OOl
=
fal\
se
;
#include "../Physics/zpta003.inl"
#undef lOlllOlOlOl
#undef lOllllOOOlO
#undef lOlllOlOOOl
#undef lOlllOlllOl
#undef lOllllOOOOl
#undef lOlllOllOll
#undef lOllllOOOOO
}
lll\
OOllO\
Ol\
l\

(
lOll\
lO\
OO\
O\
ll
)
;
}
vo\
id
TAC_CALL
llllOOllO\
Ol
(
const\

MF\
ram\
e
&
lOlllOO\
OO\
Ol
,
const\

MF\
rame\

&
lO\
ll\
l\
O\
OOO\
lO
,
lO\
l\
lO\
ll\
l\
OOO
*
lOlllOOOO\
l\
l\

)
{
TA_ASSERT\

(
lO\
lll\
O\
OOOll
->
lO\
l\
lOOOl\
lll
->
GetColli\
si\
onOb\
je\
ct\
Type
(
)
==
Collis\
ionObject
::
TY\
PE_CYLINDER
)
;
TA_AS\
S\
ERT
(
lOlllOOOOll
->
lO\
llOOlOOOO\

->
Get\
Collis\
io\
nObjectT\
ype
(
)
==
Colli\
si\
onO\
bject
::
TYP\
E\
_LI\
NE_L\
IS\
T
)
;
const\

Collis\
io\
nObj\
e\
ctC\
ylin\
der
&
llOO\
ll\
lOOOO
=
*
(
Co\
lli\
s\
ionObje\
ctCylinder\

*
)
lOlllOOOOll
->
lOl\
lOO\
Ollll\

;
co\
nst
Colli\
sio\
nObjectLineList
&
llllOOOOOOl
=
*
(
Col\
lisionObj\
e\
ctL\
in\
e\
List\

*
)
lOlllOOOO\
ll
->
lOllOOlOO\
OO
;
Vec3
llllll\
lll
=
llOOlllOOOO\

.
lllOlO\
lOOl\
O\

*
lOll\
lOOOOO\
l
;
Vec3
lO\
OOOO\
OOOO
=
llOOll\
lOOOO
.
ll\
lO\
lOlOOll\

*
lOlllOOOOOl\

;
Vec3\

ll\
llOOOOO\
lO
=
lOOOOOOOOO
-
lllll\
lll\
l
;
flo\
at
lOOOl\
OOOl\
O\
lO
=
llOOl\
l\
lOO\
OO
.
lO\
lOlO\
O\
lO\
lO
*
llOO\
ll\
lO\
OOO
.
lOl\
O\
lOOlOlO
;
for\

(
in\
t\

ll\
l\
OO\
OOlOO
=
0
;
lllOOOOl\
OO
<
llllOO\
OOOOl
.
llllOO\
O\
OOll\

.
lOO\
Oll\
lOOl
(
)
;
lllOOOOlOO
++
)
{
floa\
t
llllOl\
OOll
;
Vec\
3
lOll\
l\
lOOll
;
Vec3
lO\
l\
l\
l\
lO\
lOO
;
const
Vec3
&
lOO\
lOlO\
lll
=
llllO\
OOOOOl\

.
llllOOO\
OO\
ll\

[
lllOOO\
OlOO
]
.
lOOlOlO\
lll
;
co\
nst
Vec3
&
lOOlOl\
l\
O\
O\
l
=
llllO\
OOOOOl
.
lll\
l\
OO\
OO\
O\
l\
l
[
lllOOO\
Ol\
OO
]
.
lOOl\
O\
llOO\
l\

;
float
lO\
OOl\
O\
O\
Ol\
Ol\
l
=
llllOOO\
O\
Ol\
O
.
Do\
t
(
lO\
O\
lOl\
Olll
-
lOOOO\
OO\
OOO
)
;
flo\
at
lO\
O\
OlO\
OOllOO
=
lll\
lO\
OOOOlO
.
Dot
(
lOOlOllOO\
l\

-
lOOO\
O\
OO\
OOO
)
;
if
(
lO\
O\
O\
lO\
O\
OlO\
l\
l
>
0.0f
&&
lOOOlOOOll\
O\
O
<
0.0f
)
{
llllOlOOll
=
lOOOlOO\
OlO\
l\
l
/
(
lOOOlOOO\
lO\
l\
l
-
lOOO\
l\
OOOllOO
)
;
lOl\
lll\
OOl\
l
=
lOOlOlOlll
+
(
lO\
OlOllOOl
-
lO\
OlOl\
O\
lll
)
*
ll\
ll\
O\
lOO\
ll
;
float
ll\
lO\
OlO\
lll
=
(
lO\
llllOOll\

-
lOOOOO\
OOO\
O
)
.
GetM\
agn\
it\
ud\
eSq\
rd
(
)
;
if
(
lllO\
OlOll\
l
<
lOOO\
lOOOlOlO\

)
{
Colli\
si\
o\
n
lO\
llOllO\
lll
;
lOllOllOlll\

.
Init\
i\
al\
ise
(
Coll\
i\
si\
on\

::
lO\
llOlOOlOO
,
0.0f
,
lll\
lOl\
OOll
,
lOl\
lllOOll\

,
ll\
l\
l\
OO\
OO\
O\
lO
.
GetN\
ormal\

(
)
)
;
lOl\
lOllOlll
.
lOllOO\
lO\
O\
Ol
=
ll\
lOOOOl\
OO
;
if
(
!
lOlllOOOOl\
l
->
lO\
llO\
l\
lllOO\

)
lOll\
OllOlll
.
lO\
llOOlOOl\
O\

=
0
;
else
lOll\
OllOl\
ll
.
lOllOO\
lOO\
lO
=
1
;
if
(
!
ll\
lOl\
l\
l\
lOO\
O
(
lOll\
Ol\
l\
O\
ll\
l
,
lOll\
l\
O\
OOO\
ll\

)
)
return
;
continue
;
}
}
lOOO\
l\
OOOlO\
ll
=
ll\
ll\
O\
OOOO\
l\
O\

.
Dot\

(
lOOlOlOlll
-
lll\
l\
ll\
lll
)
;
lOOOlOOOllOO
=
llllOOOO\
OlO
.
Dot\

(
lOOlOl\
lOOl
-
ll\
lll\
lll\
l\

)
;
if
(
lO\
OO\
lOO\
Ol\
O\
ll
<
0.0f
&&
lO\
OOl\
OOOll\
O\
O
>
0.0f
)
{
llllO\
lOOll\

=
lO\
O\
Ol\
O\
OOlOll
/
(
lO\
OOlO\
O\
O\
l\
Ol\
l
-
lOOOlOOO\
llOO
)
;
lO\
l\
l\
ll\
O\
Oll
=
lOO\
lOlOll\
l\

+
(
lO\
OlO\
llOO\
l
-
lOO\
l\
OlOll\
l
)
*
llll\
O\
l\
OOl\
l\

;
flo\
at\

ll\
l\
OOlOlll
=
(
lOl\
l\
ll\
OOl\
l
-
lllllll\
ll
)
.
Ge\
tMagn\
it\
u\
de\
S\
qrd
(
)
;
if
(
lllO\
OlO\
lll\

<
lOOOl\
OOOlOl\
O
)
{
Co\
llisio\
n
lOllOllOlll
;
lOllOl\
lOl\
ll
.
Initialise
(
Collisio\
n
::
lOllO\
l\
OO\
l\
O\
O
,
0.0f
,
llllOlO\
Oll
,
lO\
llllOOll
,
-
llllOO\
OO\
OlO
.
GetN\
orm\
al\

(
)
)
;
lOl\
lO\
llOl\
l\
l
.
lOll\
OOlOOOl
=
lllOOOO\
lOO
;
if\

(
!
lO\
lllO\
O\
OOll
->
lOllO\
l\
lll\
OO
)
lOllOllOl\
l\
l\

.
lOl\
lOOlO\
O\
lO
=
0
;
el\
se
lOl\
lOllOlll
.
lOllOOlO\
Ol\
O\

=
1
;
if
(
!
ll\
lOl\
l\
l\
l\
O\
OO\

(
lO\
l\
lOll\
O\
l\
ll
,
lOll\
l\
OOOOll
)
)
retu\
rn
;
contin\
ue
;
}
}
if
(
Geometr\
y
::
Test\
Sp\
he\
reMovementA\
ga\
i\
nstLin\
e
(
lOOl\
OlOlll
,
lOOlOll\
OOl
,
lll\
llllll
,
lOOO\
OO\
OO\
OO
,
ll\
OOl\
llOOOO
.
lOlOl\
OOlO\
l\
O
,
llll\
O\
lOOll
,
lOllllO\
Ol\
l\

,
lOllllOlOO
)
)
{
lO\
l\
lllOOll
+=
lO\
llllOlOO
*
llO\
Olll\
OOOO
.
lO\
lO\
lOOlOlO
;
Collisi\
on
lOll\
O\
llOlll
;
lO\
ll\
O\
llOll\
l
.
Init\
ialise
(
Co\
llision\

::
lOll\
O\
lOOlOO
,
0.0f
,
lll\
lOlOOll
,
lOllll\
OOl\
l\

,
lO\
l\
l\
llOlOO
)
;
lOll\
OllOlll
.
lOllOO\
lOOOl\

=
lllOO\
OO\
lOO
;
if
(
!
lOl\
ll\
OOOOll
->
lO\
llO\
llllOO\

)
lOllO\
llOl\
l\
l
.
lOllOO\
lOO\
lO
=
0
;
else\

lO\
llOll\
Ol\
ll
.
lO\
ll\
OOlOOlO
=
1
;
if
(
!
ll\
lO\
ll\
ll\
O\
O\
O
(
lOll\
O\
l\
lOlll
,
lOl\
l\
lOO\
OOll
)
)
return
;
}
}
}
#endif //
}
