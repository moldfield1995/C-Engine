//---------------------------------------------------------------------------------
// File Name: zpta013.cpp
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#define lOllOllOOlO
#include "CollisionObjectLineList.h"
#ifndef TA_MFRAME_H
#include "../Common/MFrame.h"
#endif //
#ifndef llOllOOlOOO
#include "../Physics/zpta013.h"
#endif //
#ifndef TA_COLLISIONOBJECTCACHEDPOLYDATA_H
#include "CollisionObjectCachedPolyData.h"
#endif //
#ifndef lllOOOllOOO
#include "../Physics/zpta007.h"
#endif //
#ifndef TA_PHYSICSRENDER_H
#include "PhysicsRender.h"
#endif //
na\
me\
space
TA
{
void\

Collisi\
on\
Obj\
ect\
Li\
ne\
L\
ist\

::
Init\
i\
alise\

(
cons\
t
Vec3
*
lOOOl\
llllOOO\

,
int\

lOOOllll\
lOOl
)
{
llllOOOOOll
.
In\
itiali\
se
(
lOOOl\
ll\
llOO\
l
,
lO\
OOlllllOOl
)
;
for
(
int\

lllOOOOlO\
O
=
0
;
lllOO\
O\
Ol\
OO\

<
lOOOlllllOOl
;
ll\
l\
OO\
OOl\
OO
++
)
{
lll\
lOOOOOll\

[
lll\
OO\
OOlOO\

]
.
lOOlOl\
Ol\
ll
=
lOOOllll\
lO\
OO
[
lllOO\
OOl\
OO
*
2
]
;
llllO\
O\
OO\
O\
ll
[
ll\
lOO\
O\
O\
lOO
]
.
lO\
OlOll\
O\
Ol
=
lO\
O\
O\
lllllOOO
[
ll\
lOOOO\
lOO
*
2
+
1
]
;
}
}
voi\
d
Co\
llisi\
onObj\
e\
c\
t\
L\
in\
e\
Lis\
t
::
Finali\
se
(
)
{
llll\
OOOOO\
l\
l
.
Fin\
alise
(
)
;
}
vo\
i\
d
Co\
ll\
i\
si\
o\
n\
Ob\
je\
ctLineList\

::
Serial\
is\
e
(
Seri\
alise\
r\

&
lOOO\
l\
Ol\
l\
Ol
,
const
Ve\
rs\
ion\

&
ll\
lOl\
O\
OlO\
O
)
{
lOOOOO\
OllO
(
lllOlOOlO\
O\

<=
ll\
OllOOllOO
,
"CollisionObjectLineList::Serialise. The version number is too new.")
;
lOOOlO\
llOl
.
lO\
OOlOllll\

(
ll\
ll\
OOOOOll\

)
;
}
AA\
B\
B\

Colli\
sionObje\
ctL\
ineList\

::
Calcu\
la\
teBoundi\
ng\
Box
(
)
con\
s\
t
{
AA\
B\
B
lOOOO\
OOl\
l\
l
;
lOOOOOOl\
ll
.
In\
itial\
ise
(
llll\
OO\
O\
O\
Ol\
l
[
0
]
.
lOO\
l\
OlOlll
,
k_v3Zero\

)
;
Vec3\

lOOOl\
ll\
l\
l\
O\
lO\

=
llllOO\
OOO\
ll
[
0
]
.
lOOlOlOl\
ll\

;
Vec3
lOOOlllllOll
=
llll\
O\
OOOOll
[
0
]
.
lO\
OlOlOlll\

;
for
(
in\
t
lll\
OOOOlOO\

=
0
;
lllOO\
O\
Ol\
O\
O\

<
llllOOOOOll
.
lOOOlll\
OO\
l
(
)
;
lllOO\
OOl\
O\
O\

++
)
{
lOOOO\
O\
Oll\
l
.
ExpandTo\
Fit
(
ll\
llOOOOOl\
l
[
lllOOOOl\
O\
O\

]
.
lOOlOl\
O\
ll\
l
)
;
lOOOOOOll\
l
.
ExpandToFit
(
llll\
OO\
O\
OOll
[
lllO\
OOO\
lOO
]
.
lOOlOl\
lOOl\

)
;
}
return
lOOOO\
OOlll
;
}
voi\
d
Collis\
io\
nObjec\
tLin\
eLi\
st
::
Calc\
u\
l\
at\
eMass
(
float\

lllOl\
lOOOOl\

,
float
&
lOll\
OOO\
O\
ll\
O
,
Vec\
3
&
lll\
OllOOOlO
,
Mat33
&
lll\
OllOOO\
l\
l
)
con\
s\
t
{
lOll\
OOOOll\
O
=
0.0f
;
ll\
lO\
llOOOlO\

.
Clear\

(
)
;
ll\
lOll\
O\
O\
Oll
.
v3\
X
.
Cl\
e\
a\
r\

(
)
;
lll\
O\
llO\
O\
Oll
.
v3Y
.
Clea\
r
(
)
;
ll\
lOllOOOll
.
v3\
Z
.
Cl\
e\
ar
(
)
;
}
void\

Col\
lisio\
nO\
bjectL\
i\
neL\
ist
::
Rend\
er
(
const\

MFra\
m\
e
&
lOOOOO\
OO\
Ol
)
{
for\

(
int\

lll\
OOOOlOO
=
0
;
lllOOOOlOO
<
lll\
lOO\
OOOll
.
lOOOlllOOl
(
)
;
ll\
l\
O\
OOO\
lOO
++
)
{
Physics\
R\
e\
n\
de\
r
::
RenderLin\
e\

(
lll\
lOOOO\
Ol\
l
[
lll\
O\
O\
OOl\
OO
]
.
lO\
OlO\
lOll\
l
*
lOOOOOO\
O\
O\
l
,
lll\
l\
O\
O\
OOO\
ll\

[
lllOO\
OOlOO\

]
.
lOOlOl\
lOO\
l
*
lOOOOOOOOl
,
0xFF0000FF
)
;
}
}
Collisi\
on\
ObjectLi\
neL\
is\
t
*
TAC_CA\
LL
Co\
l\
lision\
Obje\
c\
tL\
ine\
L\
ist
::
Cre\
a\
t\
eNew
(
)
{
Coll\
i\
sionOb\
jectL\
i\
n\
e\
List\

*
lO\
lO\
l\
lOlOOl\

;
lOOOOOllO\
l\
O
(
lOlOllO\
lOOl
,
Co\
llisionObj\
ectLineList\

)
;
retu\
r\
n
lOl\
OllOlO\
Ol
;
}
Col\
li\
sion\
O\
bj\
e\
ct\
Lin\
eL\
i\
st
::
Collis\
ionObje\
ctL\
i\
neList
(
)
:
Collisi\
onOb\
ject\
Si\
mp\
le
(
TY\
PE_LINE_LIST
)
{
}
Col\
l\
i\
si\
onObjectL\
ineList
::
~
Collisio\
nObjec\
tLi\
neLi\
st\

(
)
{
Final\
i\
se
(
)
;
}
#ifndef DOXYGEN
void
TAC_CALL
llllO\
O\
lll\
l\
l\

(
con\
st\

MFram\
e
&
lO\
lll\
OO\
OOOl
,
const
MF\
r\
ame
&
lOlll\
O\
OOOlO\

,
lOllOll\
lOOO
*
lOl\
llO\
OOOll
)
{
TA_ASSE\
RT
(
lOlll\
OOOOl\
l
->
lOll\
OOOll\
ll
->
Ge\
tCol\
lis\
io\
nObjectType
(
)
==
Coll\
isionObje\
ct
::
TYPE_L\
INE_\
LIS\
T
)
;
TA_ASSER\
T
(
lOlll\
OOO\
Oll
->
lO\
ll\
O\
OlO\
O\
OO
->
Ge\
tCo\
llisionObjectT\
y\
pe
(
)
==
Colli\
sionObject
::
TYPE_C\
ACH\
ED\
_POLY_DATA
)
;
Coll\
is\
io\
nOb\
jec\
tLi\
neList
&
llllO\
OOOOOl
=
*
(
Co\
lli\
sionO\
bjectL\
in\
eLi\
st
*
)
lOl\
ll\
OO\
OOll
->
lOll\
O\
OOllll
;
Coll\
isi\
on\
Ob\
je\
c\
tCac\
hed\
P\
olyD\
at\
a
&
ll\
Oll\
lllOOl
=
*
(
Collisi\
o\
nO\
bjec\
tCache\
dPol\
yData
*
)
lOl\
l\
l\
OOOOll
->
lOll\
OOl\
OOOO
;
int\

lllO\
O\
OO\
lOO\

;
for
(
int
lllOll\
lll\
lO
=
0
;
lllO\
ll\
l\
ll\
lO
<
llOll\
lllOOl
.
lllOlOOl\
OlO
(
)
;
)
{
const
Collision\
Obj\
ectCache\
d\
Poly\
Data
::
Po\
lygo\
n
*
ll\
O\
OOlO\
lOO
=
(
const
CollisionOb\
jectCached\
Po\
ly\
Dat\
a
::
Polygo\
n
*
)
llO\
lllllOOl\

.
lllOlO\
OlOOl
(
lllOl\
ll\
ll\
lO
)
;
ll\
lOllll\
ll\
O
+=
ll\
Ol\
l\
lllOOl
.
lll\
OOl\
lOOOl
(
ll\
O\
OOlOlOO
->
lO\
llOll\
lO\
l
)
;
fo\
r\

(
lllOOOOl\
OO
=
0
;
lllOOOOlOO\

<
ll\
llOOOOOOl
.
llll\
OOOOO\
l\
l\

.
lOO\
O\
lllOO\
l
(
)
;
lllOOOOlO\
O
++
)
{
co\
nst
Vec3\

&
lOOOOl\
lll\
lOO
=
llO\
O\
O\
lOlOO
->
ll\
O\
ll\
llOlO
[
0
]
.
lOOOOlll\
ll
;
cons\
t
Vec3
&
lll\
lllll\
l
=
llllO\
OOOOOl\

.
llllO\
OO\
O\
Oll
[
ll\
lO\
O\
OOlOO\

]
.
lO\
O\
lOl\
Ol\
ll
*
lOlll\
OO\
OO\
Ol\

;
const
Vec\
3\

&
lOOOOO\
OOOO
=
llll\
O\
OOOOOl
.
llll\
OOOO\
Oll
[
lllOOO\
OlOO\

]
.
lO\
OlO\
ll\
OOl\

*
lOlll\
O\
OOOOl
;
float
lO\
lOl\
lO\
lOO
=
ll\
OOOlOlO\
O\

->
lOO\
OlOOO\
O\
O
.
Dot
(
lllllllll\

-
lOOOOllll\
lOO
)
;
floa\
t\

lOlO\
llO\
l\
O\
l
=
llOOOl\
OlOO
->
lO\
OOlOOOO\
O
.
Dot
(
lOOOOOOO\
OO\

-
lO\
OOOl\
l\
l\
llOO
)
;
if\

(
lOlOl\
lOlO\
l\

>=
0.0f
||
lO\
lOllOlOO
<=
0.0f
)
contin\
ue
;
TA_ASS\
E\
RT\

(
lO\
lOl\
l\
OlOO
-
lOl\
O\
ll\
O\
lOl
>
0.0f
)
;
fl\
oat
lO\
l\
ll\
lOOlO\
O
=
lO\
lOll\
O\
l\
O\
O\

/
(
lO\
lOllOlO\
O\

-
lOlOl\
lOlOl
)
;
Vec\
3\

lOll\
lOlllOO
=
ll\
lll\
l\
lll\

+
(
lOOOOOOO\
OO
-
lll\
lllll\
l
)
*
lOlll\
lOO\
lOO
;
in\
t
lOO\
OllO\
O\
O\
l
;
for
(
lOOOll\
O\
OOl\

=
0
;
lOO\
Ol\
lOOOl
<
llO\
O\
OlOlOO\

->
lO\
llO\
lllOl
;
lO\
O\
O\
llOOO\
l
++
)
{
con\
s\
t
Vec3
&
lOl\
llOlO\
l\
O\
O\

=
llOOOlOlOO
->
llOllllO\
lO
[
lOOOl\
lO\
OO\
l\

]
.
lO\
O\
O\
Olllll
;
if
(
llO\
O\
OlOlO\
O\

->
llOll\
llO\
lO
[
lO\
OOllO\
O\
Ol
]
.
lOlll\
OlOlll
.
Dot\

(
lOlllO\
l\
l\
l\
OO\

-
lO\
l\
l\
l\
Ol\
OlOO\

)
<
0.0f
)
bre\
ak\

;
}
if
(
lOOOl\
l\
OOOl
!=
ll\
O\
OOlO\
lOO
->
lOl\
lO\
l\
llOl
)
continu\
e
;
Collis\
ion
lOllOllOlll
;
lOllOllOlll
.
Initia\
lis\
e
(
Co\
llisi\
on\

::
lOllOlO\
OlO\
O
,
0.0f
,
lO\
llllOOl\
OO
,
lOll\
lOll\
l\
OO
,
-
llOOOl\
OlOO
->
lO\
OO\
lOOOOO
)
;
lOllOll\
Olll\

.
lOllOOl\
O\
OOl
=
lllOO\
O\
OlOO
;
lOllO\
llOl\
ll
.
lO\
llOO\
lOOlO\

=
llOOOlOlOO
->
llOll\
lOlO\
OO
;
lllOOll\
Olll\

(
lOllOllOlll
,
lOl\
ll\
OOOO\
ll
)
;
}
}
}
#endif //
}
;
