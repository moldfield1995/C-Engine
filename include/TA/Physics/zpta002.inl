//---------------------------------------------------------------------------------
// File Name: zpta002.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

{
TA\
_ASS\
ERT
(
llOOOl\
OlOO
->
lOllOl\
l\
lOl
<
lOlllOOlO\
ll
)
;
int
lOOOllOOO\
l\

;
int
lO\
lllOOllOO
[
2
]
=
{
0
,
0
}
;
int
lOlllOl\
OOO
=
0
;
fo\
r
(
lOl\
ll\
OlO\
OO\

=
0
;
lOl\
llOlOOO
<
2
;
lOl\
ll\
OlOOO
++
)
{
bool
lOlllO\
OllOl
=
fa\
lse
;
TA\
_ASSER\
T
(
lOlllOOlOll
<
32
)
;
TA_A\
SSER\
T
(
ll\
OOOl\
O\
lO\
O\

->
lOllOll\
lO\
l\

<
32
)
;
in\
t
lOlll\
OOll\
l\
O
=
0
;
{
const\

Vec3
&
lOl\
l\
l\
OOllll
=
lOlllO\
lO\
OOO
[
lOl\
l\
lOlOOO
]
;
floa\
t
lOlllOll\
lO
=
lO\
lll\
OlO\
O\
Ol\

(
lOlllOOl\
lll
)
;
if\

(
lOlllOlllO\

<=
lOlllOl\
OOl\
O
.
lOlOl\
O\
OlOlO
&&
lO\
lll\
Oll\
lO\

>=
-
lOll\
lOlOO\
lO
.
lO\
lOl\
OOlOlO
)
{
floa\
t
lOlll\
OlO\
Oll
=
lOlllOlOOlO\

.
lOlOlO\
OlOlO
*
lO\
lllOlOOlO\

.
lOlOl\
O\
O\
lOlO
-
lOlll\
Oll\
l\
O
*
lO\
lllOlllO
;
lOlllO\
OllOl
=
true\

;
for\

(
lOOO\
llOOOl
=
0
;
lOOOllOOOl\

<
llO\
OO\
l\
O\
l\
OO
->
lO\
llOlll\
Ol\

;
lOOOllOOOl
++
)
{
const
Vec3
&
lOl\
llOlOlOO
=
lOlll\
OlOlO\
l
(
lOOOllOO\
O\
l
)
;
fl\
oat\

lOlll\
Ol\
OllO
=
llO\
OO\
lOlOO\

->
llOllllO\
lO\

[
lOOOl\
lO\
OOl
]
.
lO\
lllOl\
Olll
.
Dot
(
lOlllOlOlOO
-
lOll\
l\
OOlll\
l
)
;
if
(
lO\
l\
ll\
OlOl\
lO
*
Fabs
(
lO\
l\
l\
lOlO\
llO\

)
>
lOl\
ll\
OlOOll
)
{
lOlllO\
O\
l\
lOl\

=
fa\
lse
;
bre\
ak\

;
}
if
(
lOlllO\
lOllO
<
0.0f
)
{
if
(
lOlllO\
l\
OllO
*
Fabs
(
lOlll\
O\
lOllO
)
<
lO\
l\
llOl\
O\
Ol\
l
+
0.001f
)
{
int
lOlll\
OllOO\
O
=
lO\
ll\
lOllO\
Ol
(
lOOO\
llO\
OOl\

,
llOO\
OlOlO\
O
->
lO\
llOlllOl\

)
;
const
Ve\
c\
3
&
lOll\
l\
O\
l\
lOlO
=
lOlllOlOlOl
(
lOlll\
O\
llO\
O\
O
)
;
if
(
(
lO\
lllOlOl\
OO
-
lO\
lllOll\
O\
lO
)
.
Dot\

(
lOlllOl\
l\
OlO\

-
lOlll\
OOl\
lll
)
<=
0.0f
)
{
if
(
(
lOl\
ll\
OlOlO\
O
-
lOll\
lO\
l\
lOl\
O
)
.
Dot
(
lOlll\
OlOlO\
O
-
lOl\
llO\
Ollll\

)
>=
0.0f
)
{
lOlllOllO\
l\
l\

(
lO\
l\
llOlO\
lOO
,
lOlllOllOlO
,
1
+
lOll\
lOlOO\
O
)
;
lOll\
lOOlllO\

|=
1
<<
lO\
OOllOOOl\

;
}
}
}
}
els\
e\

{
lOl\
l\
lO\
OllOl\

=
fa\
l\
se\

;
int
lO\
lll\
OllO\
OO\

=
lOlllOllOOl
(
lOOOll\
OOOl
,
llOOOlOlOO
->
lOllO\
ll\
lOl
)
;
const
Vec\
3
&
lOlllOllOl\
O\

=
lOll\
lOlOl\
Ol
(
lOlllO\
l\
l\
O\
OO\

)
;
if
(
(
lOl\
llO\
lOlOO\

-
lOlllOllOlO
)
.
Dot
(
lOl\
l\
l\
OllOlO
-
lO\
lllO\
O\
llll
)
<=
0.0f
)
{
if\

(
(
lOll\
lO\
l\
Ol\
OO
-
lO\
ll\
lO\
llOlO
)
.
Dot\

(
lO\
ll\
l\
Ol\
Ol\
OO
-
lOlllO\
Oll\
ll
)
>=
0.0f
)
{
Vec\
3
lOl\
ll\
OlllOO
=
lOlll\
O\
Oll\
ll
-
llOOOlOlO\
O\

->
lOOOl\
O\
OOO\
O
*
lOlll\
OlllO
+
llOOOlOl\
OO\

->
llOlll\
lOlO
[
lO\
OOll\
OOOl
]
.
lOlllOlOlll
*
lO\
l\
llOlO\
llO\

;
Vec3\

lO\
OO\
lO\
OOOO
=
lOlllOOl\
l\
ll\

-
lOl\
llOlllO\
O\

;
float
lOllllOlOl
=
lOOOlOOO\
O\
O
.
GetMa\
g\
ni\
t\
ude
(
)
;
if\

(
lOlll\
l\
OlOl
>
0.0001f
)
lOOO\
l\
OOOOO\

/=
lOl\
lll\
OlOl
;
else\

lO\
OOlO\
OOOO
=
llOOO\
lOlO\
O
->
lO\
OO\
lOO\
OOO
;
lOlllO\
l\
l\
l\
Ol
(
0.0f
,
lOlll\
OlOOl\
O
.
lOl\
Ol\
OOlOlO
-
lOllllO\
lO\
l
,
llOO\
Ol\
OlOO
,
lOll\
lOl\
O\
l\
OO
,
lO\
lll\
Ol\
lOl\
O
,
lO\
l\
llOlll\
OO\

,
lO\
OO\
lOOOOO
,
1
+
lO\
lllO\
lOOO
)
;
lOlll\
OOlllO
|=
1
<<
lOOO\
llOOO\
l
;
}
}
}
}
if
(
lOOOll\
OO\
O\
l
==
llOOOlO\
l\
O\
O
->
lOllOlllOl
)
{
fo\
r
(
lO\
O\
OllOOOl
=
0
;
lOOO\
llO\
OO\
l\

<
llOOOlOlOO
->
lOl\
l\
Ol\
llOl
;
lO\
OOl\
lOO\
Ol
++
)
{
cons\
t
Ve\
c\
3\

&
llOOlll\
ll\
O
=
lO\
lllOlOl\
Ol
(
lO\
OOll\
OOO\
l
)
;
if
(
(
lOll\
lOOllll
-
llOOlllllO
)
.
Dot\

(
lOlllO\
lOOO\
O\

[
lO\
l\
ll\
O\
lO\
OO
]
-
lOlllO\
lOOOO
[
(
lO\
lllOlO\
OO
+
1
)
&
1
]
)
>
0.0f
)
cont\
inue\

;
if
(
(
lOll\
lOO\
llll
-
ll\
OOllll\
lO\

)
.
GetMa\
gnit\
ud\
e\
Sqrd
(
)
>
lO\
lllOlO\
OlO
.
lOlOlOOlOlO
*
lO\
lllO\
l\
OOlO\

.
lOl\
O\
lO\
Ol\
OlO
)
cont\
i\
nue
;
const
int
lOl\
llOllllO
=
lOl\
llOl\
llll\

(
lOOO\
ll\
O\
OO\
l
,
llOO\
OlOlOO\

->
lO\
llOl\
l\
l\
O\
l
)
;
if\

(
lOlllOOl\
lOl
||
(
lOlllOOlllO
&
(
(
1
<<
lO\
l\
llO\
llllO
)
|
(
1
<<
lOOOl\
lO\
OOl
)
)
)
)
{
lOl\
lllOOOOO
(
llOO\
l\
llllO
)
;
}
el\
se
{
Vec\
3
lOO\
OlOOO\
OO
=
lOl\
ll\
O\
Ol\
ll\
l
-
ll\
OO\
lll\
ll\
O\

;
float
lOllllO\
lOl
=
lO\
OOlOOOOO
.
Get\
M\
agnitude
(
)
;
if\

(
lOl\
l\
l\
lOlOl
>
0.0001f
)
lOO\
OlOOOOO
/=
lOllllOlOl
;
els\
e
lO\
OOlO\
OO\
O\
O
=
llOOO\
lOlO\
O
->
lOO\
OlOO\
OOO
;
lOll\
l\
lO\
O\
OOl
(
0.0f
,
lOlll\
OlO\
O\
lO\

.
lOlO\
lOOlOlO\

-
lOlll\
lOl\
Ol\

,
llOO\
Ol\
OlOO\

,
lOOOl\
lO\
OOl
,
false\

,
llOOll\
lllO
,
llO\
OlllllO\

,
lOO\
OlOOOOO
)
;
}
lOll\
l\
O\
O\
l\
l\
O\
O
[
lO\
l\
llOl\
OOO
]
|=
1
<<
lOOOllOOOl
;
}
}
if
(
lOlllO\
O\
ll\
Ol
)
{
lOl\
lll\
OO\
Ol\
O
(
0.0f
,
lOl\
l\
l\
OlOOlO
.
lOlOlOOlO\
l\
O
-
lO\
ll\
l\
OlllO\

,
llO\
OOlOlOO
,
lOlllO\
Ol\
ll\
l\

-
llOOO\
lOl\
OO
->
lOOO\
lOOO\
OO
*
lO\
lllOlllO
,
ll\
O\
O\
Ol\
OlOO
->
lO\
OO\
lO\
O\
OOO
)
;
}
}
}
if
(
lOlll\
OOO\
Oll
->
lO\
ll\
Oll\
lOl\
l
)
{
const
Ve\
c3
&
lOOlOlOlll
=
lO\
ll\
lOlOOO\
O
[
lO\
l\
llOlO\
O\
O
]
;
co\
nst
Vec\
3
&
lOOlOl\
l\
O\
Ol
=
lO\
ll\
llO\
O\
O\
ll\

[
lOl\
llOlOOO
]
;
fl\
oat\

lO\
l\
O\
l\
lOl\
O\
O
=
lOl\
ll\
Ol\
OOOl
(
lO\
O\
lOlOll\
l\

)
-
lOlll\
OlOOlO
.
lO\
lOlOOl\
Ol\
O\

;
flo\
at
lOlOllOlOl
=
lOlllOlOOOl
(
lO\
OlOl\
lOOl\

)
-
lO\
lllO\
lOO\
lO
.
lO\
lO\
lO\
OlOl\
O
;
if
(
lOl\
Oll\
Ol\
Ol\

<
0
&&
lOlOll\
OlOO
>
0
)
{
TA\
_ASSER\
T\

(
lO\
l\
OllO\
lO\
O
-
lOlOllOlOl
>
0.0f
)
;
float\

lOl\
lll\
OOlO\
O
=
lOl\
Ol\
lOlO\
O
/
(
lOl\
O\
llOlOO
-
lOlOl\
lOlO\
l
)
;
Vec3\

lO\
lll\
Oll\
l\
OO\

=
lOOl\
O\
lOlll
+
(
lOOlOllOOl\

-
lOOlOl\
O\
l\
l\
l
)
*
lOllll\
OO\
lOO
;
boo\
l
lO\
llllO\
Ol\
O\
l
=
!
lO\
ll\
l\
OO\
llOl\

&&
lO\
lll\
O\
Ol\
llO
==
0
&&
lO\
ll\
lO\
Ol\
lOO\

[
lOlllO\
lOOO
]
==
0
;
for
(
lO\
OO\
llOOO\
l
=
0
;
lO\
OOllO\
OO\
l
<
ll\
OO\
OlOl\
O\
O
->
lOll\
OlllOl
;
lOOOll\
O\
OOl
++
)
{
con\
s\
t
Vec3
&
lOlll\
lOOllO\

=
lOlllOlOlOl
(
lOO\
O\
l\
lOO\
Ol
)
;
int
lOlll\
Ol\
l\
OOO
=
lOl\
llO\
llOOl
(
lOO\
OllO\
OOl
,
llOOO\
l\
OlO\
O
->
lOllOlll\
Ol
)
;
const
Vec\
3
&
lO\
lllOllOlO
=
lOlllOlOlOl
(
lOll\
lOllO\
OO
)
;
float
lO\
ll\
lO\
lOl\
lO
=
llOOOlOlOO
->
ll\
O\
l\
lllO\
lO
[
lOOOllO\
O\
Ol
]
.
lO\
lllOl\
O\
ll\
l\

.
Dot
(
lO\
llllOO\
llO
-
lOlll\
OlllO\
O
)
;
fl\
oat\

ll\
llOlOO\
l\
l\

;
Vec3
lOllllO\
O\
l\
l
;
Ve\
c3
lOllllOlO\
O
;
float
lll\
llOOOO\
l
=
lOlllOlOOl\
O
.
lO\
lOlOOlO\
lO
;
if\

(
lOl\
ll\
OlOllO
<
0.0f
)
llll\
l\
OOO\
O\
l
+=
0.001f
;
if
(
!
(
lOll\
l\
OO\
l\
llO
&
1
<<
lOOOllO\
OOl
)
&&
Geometr\
y\

::
Tes\
t\
Sph\
ereMovementA\
ga\
instLi\
ne
(
lOO\
l\
O\
l\
Ol\
l\
l\

,
lO\
OlO\
llO\
Ol\

,
lOll\
llOOllO\

,
lOlllOll\
OlO\

,
ll\
lllOO\
OOl\

,
llllOlOOll
,
lO\
l\
lllOO\
ll
,
lO\
ll\
l\
lOlOO
)
)
{
lO\
lllOO\
ll\
l\
O\

|=
1
<<
lOOOl\
lOOOl
;
if
(
lO\
ll\
lOlOllO
<
0.0f
)
{
lO\
lll\
Ol\
lOll\

(
lOl\
lll\
OO\
l\
lO
,
lOlll\
Oll\
OlO
,
1
+
lO\
lllO\
lOOO
)
;
}
el\
s\
e
{
lO\
lllOlllOl\

(
llllOlO\
O\
ll\

,
0.0f
,
llOOOlOlOO\

,
lOllllOOll\
O
,
lOlllOll\
OlO\

,
lOOlOlOlll\

-
lOl\
ll\
lO\
lOO
*
lO\
lllOlOOlO
.
lOlOlOOl\
O\
l\
O
,
lOlll\
lOlOO
,
1
+
lO\
lllOlOO\
O
)
;
lOllll\
OOl\
Ol\

=
fals\
e
;
}
}
el\
se
{
if
(
lO\
lll\
OlOll\
O
>
0.0f
)
{
lO\
llllO\
OlOl
=
false
;
}
}
}
if
(
lOll\
l\
l\
OO\
lOl\

)
{
if
(
lO\
OO\
l\
lOOOl
==
llOOOl\
OlOO
->
lOl\
l\
OlllO\
l
)
{
lOllllOO\
O\
lO
(
lOl\
lllOOlO\
O
,
0.0f
,
ll\
OOOlO\
l\
O\
O
,
lOO\
lOl\
Olll
-
llOOOlOlOO
->
lO\
OOlOOOOO\

*
lOl\
ll\
O\
lOOlO
.
lOlOlOOlOl\
O
,
llOOOlOlOO\

->
lO\
O\
O\
l\
O\
OO\
O\
O\

)
;
lOlllOOllOl
=
tr\
ue\

;
}
}
for\

(
lO\
O\
Oll\
OOOl
=
0
;
lOOOl\
l\
OOOl
<
llO\
O\
Ol\
OlO\
O
->
lOll\
O\
lllOl
;
lO\
OOllOOOl
++
)
{
con\
st
Vec3
&
lOl\
llOlOlO\
O\

=
lOlllOlOlOl
(
lOO\
OllOOOl\

)
;
fl\
oat
llllOlOOll
;
Ve\
c3
lOl\
lllO\
Ol\
l
;
Vec\
3
lOllllOlOO
;
if\

(
!
(
lOlll\
OOllO\
O
[
lOlll\
O\
lOOO
]
&
1
<<
lO\
OOllO\
O\
O\
l
)
&&
Geo\
met\
ry\

::
Tes\
tPointMo\
v\
eme\
nt\
Ag\
ai\
nstSphere
(
lOO\
lOl\
Oll\
l
,
lOO\
lOll\
OOl\

,
lOll\
lO\
lOlOO
,
lO\
lllOl\
OOlO\

.
lO\
lOlOOlOl\
O
,
llllOlOOll
,
lOllllO\
Oll\

,
lOllllOlO\
O
)
)
{
if
(
lOll\
llOlOO
.
Dot
(
lOlllOl\
O\
OOO
[
lO\
ll\
lOl\
O\
OO
]
-
lOll\
lOlOOOO\

[
(
lOl\
llOlOO\
O
+
1
)
&
1
]
)
<
0.0f
)
{
cont\
in\
u\
e\

;
}
lOlll\
O\
O\
ll\
O\
O
[
lOlll\
OlOOO
]
|=
1
<<
lOOOll\
O\
OOl\

;
co\
nst
in\
t
lO\
lllOllllO
=
lOll\
l\
Oll\
ll\
l
(
lOOOll\
OOO\
l\

,
llOOO\
lOlOO
->
lO\
ll\
OlllOl
)
;
if
(
lOlllO\
OllOl
||
(
lO\
l\
ll\
OOlllO\

&
(
(
1
<<
lOl\
llO\
lll\
lO
)
|
(
1
<<
lO\
OO\
llOOOl\

)
)
)
)
{
lOll\
llOO\
OO\
O
(
lOlllO\
l\
O\
lOO
)
;
}
else\

{
lOll\
llO\
OOOl\

(
llllO\
l\
O\
Oll
,
0.0f
,
llOOOlO\
lOO
,
lOOOllOOOl
,
fal\
se
,
lOlllOlO\
l\
OO
,
lOO\
lO\
lOlll
-
lOllllO\
l\
OO
*
lOlll\
OlO\
OlO
.
lOlO\
lOOlOlO\

,
lOllllOlOO
)
;
}
}
}
}
}
}
{
con\
st
Ve\
c3\

&
lOOlOlO\
lll
=
lOlll\
OlOOOO\

[
0
]
;
con\
st
Vec3
&
lO\
Ol\
O\
llOOl
=
lOll\
lOlOOOO
[
1
]
;
fl\
o\
at
lOlOll\
OlOO
=
lO\
lllOlOOOl
(
lOOl\
OlOl\
ll
)
;
float\

lOl\
O\
llOlOl\

=
lO\
lllOlO\
OOl
(
lOOlO\
l\
lOOl
)
;
if
(
!
SignsEq\
ua\
l\

(
lOlOllO\
lOl
,
lOl\
Ol\
lOl\
O\
O\

)
)
{
TA\
_A\
SS\
ER\
T
(
Fabs
(
lO\
lO\
llOlO\
O
-
lOl\
OllOlOl
)
>
0.0f
)
;
float
lO\
llllO\
OlOO
=
(
lOlOllOlOO
)
/
(
lOlOl\
lOl\
O\
O\

-
lOl\
Oll\
OlO\
l\

)
;
Vec3
lOl\
ll\
OlllOO
=
lOOlOlO\
ll\
l
+
(
lOOl\
O\
llOOl\

-
lO\
OlOlOll\
l
)
*
lOl\
lllOO\
l\
OO\

;
fo\
r
(
lOO\
OllO\
OOl
=
0
;
lO\
O\
OllOOOl\

<
llOO\
OlOl\
OO
->
lOllOl\
ll\
Ol
;
lOO\
O\
llOOO\
l
++
)
{
con\
st
Vec\
3
&
lOl\
l\
lO\
lOlOO
=
lO\
lllOlOlOl\

(
lOO\
OllO\
O\
Ol
)
;
if
(
ll\
OOO\
lOlOO\

->
ll\
OllllO\
l\
O
[
lOOOllOO\
O\
l
]
.
lO\
ll\
l\
OlOlll
.
Dot
(
lOl\
l\
lO\
ll\
l\
OO\

-
lOl\
ll\
O\
lOlOO
)
<
0.0f
)
bre\
ak
;
}
if
(
lOOOll\
OOOl
==
llOO\
Ol\
Ol\
OO
->
lOl\
lOlllOl\

)
{
lO\
lll\
l\
OOO\
l\
O
(
0.0f
,
lOll\
l\
O\
l\
OOl\
O
.
lOlO\
lOOlOlO\

,
llOOOlO\
l\
O\
O
,
lO\
ll\
lOl\
llOO
,
ll\
OO\
OlO\
lOO\

->
lO\
OOl\
OOOOO
)
;
}
}
fo\
r
(
lOO\
Oll\
OOOl
=
0
;
lOOO\
llOOOl
<
llOOOlOl\
OO
->
lOllOlll\
Ol
;
lO\
OO\
l\
lOOOl
++
)
{
const\

Ve\
c\
3\

&
lOlll\
lOOllO
=
lOlllOlO\
lOl\

(
lOOOll\
O\
OOl
)
;
const\

in\
t
lOl\
llOllO\
OO
=
lOOOllOOOl
+
1
<
llOO\
Ol\
Ol\
OO
->
lO\
llO\
lllOl
?
lOOOllOO\
Ol
+
1
:
0
;
const
Ve\
c3
&
lOll\
lOll\
Ol\
O
=
lO\
lllO\
lOlOl
(
lOl\
llOll\
O\
O\
O
)
;
fl\
oat
llllO\
lOOll
=
0.0f
;
floa\
t\

lOllllOOlll
=
0.0f
;
Vec3\

lO\
ll\
ll\
Ol\
OO
;
Vec3
lOllll\
OOll
;
Vec3
lllllO\
lOO\
l\

;
Ve\
c\
3
ll\
ll\
lOllll
;
boo\
l
lOllllOlOOO
=
fal\
se\

;
if
(
Geomet\
ry\

::
Fin\
dClosest\
PointO\
nLin\
eToL\
ineU\
nClamped
(
lOO\
lOlOlll
,
lOOlOllOOl
,
lO\
l\
lllOO\
l\
lO
,
lOlllOl\
l\
O\
l\
O
,
ll\
l\
llOlOOl
,
lll\
l\
lOlll\
l
)
)
{
Ve\
c3\

lOOO\
l\
OOOO\
O
=
llll\
lO\
lOOl
-
lllll\
Oll\
ll\

;
float
lll\
OOlOlll
=
lO\
OOlOOOO\
O
.
Get\
Mag\
n\
i\
t\
u\
deS\
qrd
(
)
;
if\

(
lllO\
OlO\
lll\

<
lOl\
llOl\
OOlO
.
lOlOlOO\
lOlO
*
lO\
lllO\
lOOlO
.
lOlOl\
OO\
lOl\
O
)
{
lO\
l\
ll\
lOO\
ll
=
lllll\
Ollll
;
con\
st
float
lOll\
l\
lO\
lO\
l
=
Sqrt
(
lll\
OOl\
Olll
)
;
co\
nst
fl\
oat
lOll\
OlOll\
l\

=
0.001f
*
0.001f
;
if
(
ll\
l\
OO\
lOlll\

>
lOllO\
lOlll\

)
lO\
OO\
lOOO\
OO
=
lO\
OOlOOO\
OO\

/
lOlll\
lOlOl
;
el\
s\
e
lO\
O\
Ol\
OOOO\
O
=
llOOOlOl\
O\
O\

->
lOOOlOOO\
OO\

;
lOl\
ll\
lO\
l\
O\
O
=
lOO\
Ol\
OOOOO
;
lO\
lll\
lO\
Olll
=
lOll\
lOlOO\
lO
.
lO\
l\
O\
l\
O\
O\
l\
OlO
-
lO\
l\
lllOlOl
;
lOlll\
lOlO\
O\
O\

=
true
;
}
}
if\

(
lOlllOOO\
Oll
->
lO\
llOlll\
O\
l\
l
&&
!
lO\
ll\
llOlO\
OO\

&&
Geo\
m\
e\
try
::
Test\
Li\
neMovementA\
gai\
nstCapsule
(
lOlllOlOOOO
[
0
]
,
lOlll\
Ol\
OOO\
O\

[
1
]
,
lOllllOOOl\
l
[
0
]
,
lO\
l\
l\
l\
l\
OOOll
[
1
]
,
lOllllO\
OllO
,
lOl\
l\
lOllOlO
,
lOl\
llOlO\
O\
l\
O
.
lO\
l\
OlOOlOlO
,
llllOlO\
Ol\
l
,
lOllllO\
Ol\
l\

,
lOlll\
lOlOO
)
)
{
lOl\
lllOlOOO
=
tru\
e
;
}
if
(
lO\
ll\
l\
lOlOOO\

)
{
if
(
lO\
llll\
OlO\
Ol
&&
lOllllOlO\
O
.
Do\
t
(
llOOOlOlOO
->
lOOOlOOOOO
)
<
0.0f
)
lO\
lll\
lOlOO
=
-
lOl\
l\
llOlOO
;
if
(
lO\
llllO\
lOO
.
Dot
(
llOOOlO\
lOO
->
ll\
Oll\
l\
lOlO
[
lO\
OOllOO\
Ol
]
.
lOlll\
OlO\
l\
l\
l\

)
<
0.0f
)
{
lOll\
lOlll\
Ol
(
lll\
lOlOOll
,
lO\
l\
lllO\
Oll\
l
,
llOOOlOlO\
O
,
lOll\
l\
lO\
OllO\

,
lOl\
ll\
OllO\
lO
,
lOllllO\
Oll
,
lOllllO\
l\
O\
O
,
0
)
;
}
else
{
lOlllO\
llOll\

(
lOl\
lllOOll\
O
,
lOlllOllOlO
,
0
)
;
if\

(
lOlll\
lOl\
OO
.
Do\
t
(
llOOO\
l\
O\
lOO
->
lOOOl\
OO\
OOO
)
>
0.95f
)
{
lOlll\
lOlOO\

=
llOO\
O\
lOl\
OO
->
lOOOlO\
OOOO
;
lO\
l\
l\
ll\
OOOlO
(
llllO\
l\
OO\
ll
,
lOllllOO\
l\
ll
,
llOO\
OlOlOO
,
lOlll\
lO\
Oll
,
lOl\
lll\
O\
lOO
)
;
}
}
}
}
fo\
r
(
lOOOllOOOl\

=
0
;
lOOOll\
OOOl\

<
llOOOlOl\
OO
->
lO\
llOll\
lOl\

;
lOOO\
ll\
OOO\
l\

++
)
{
if
(
lOlllOO\
llOO\

[
lOlllOl\
OOO
]
&
(
1
<<
lOO\
O\
llOOOl\

)
)
co\
nt\
i\
nu\
e
;
const\

Vec3\

&
lOl\
l\
llO\
O\
llO
=
lO\
lll\
OlOlO\
l\

(
lOOO\
ll\
OOOl
)
;
floa\
t
lll\
l\
OlOOl\
l
=
0.0f
;
float
lOll\
llOOlll
=
0.0f
;
Vec\
3
lO\
l\
ll\
lOlO\
O
;
Ve\
c3
lOllll\
OOll
;
bool
lOllllO\
lO\
O\
O
=
fa\
l\
se\

;
if
(
Geometry
::
FindClo\
se\
stP\
o\
in\
tOn\
L\
ineUnCla\
mped
(
lO\
llll\
OOl\
lO
,
lOOlOl\
Ol\
l\
l
,
lOOl\
OllOOl
,
lO\
lll\
lOOl\
l\

)
)
{
Vec3
lOOOlOOOO\
O
=
lOllllOOll
-
lO\
ll\
l\
l\
OOllO
;
float
lllOOlO\
lll\

=
lOOOlOO\
OOO
.
GetMag\
nitudeSq\
rd
(
)
;
if
(
lllO\
Ol\
Olll
<
lOl\
l\
lO\
l\
OOlO\

.
lOlOlOOlOl\
O\

*
lOl\
llOl\
OOlO\

.
lOlOlOOlOlO
)
{
co\
nst
flo\
at
lOl\
lllOlOl
=
Sq\
r\
t
(
ll\
l\
O\
Ol\
Olll
)
;
lOll\
llOl\
O\
O
=
lOOOl\
O\
OOOO
/
lOll\
llOlOl
;
lOllll\
OOlll
=
lOlllOl\
O\
OlO
.
lOlO\
lO\
OlO\
lO
-
lOllllOlOl
;
lOl\
l\
llOlOOO
=
tr\
ue
;
lOlll\
lOO\
ll
=
lO\
llll\
OOllO
;
}
}
if
(
lOlll\
OOOOl\
l
->
lO\
l\
l\
OlllOl\
l
&&
!
lO\
llllOlOOO
&&
Geo\
me\
try
::
Test\
SphereMovem\
en\
tA\
g\
ains\
tLine\

(
lOllllOOll\
O
,
(
lOl\
lllO\
Ol\
lO
/
lO\
lllO\
O\
O\
OlO
)
*
lOlll\
O\
OOOO\
l
,
lOlllOlOO\
OO
[
0
]
,
lOlllOl\
OOOO\

[
1
]
,
lOlllOlO\
OlO\

.
lO\
lOlOOlOlO\

,
llllOlO\
Ol\
l
,
lOl\
l\
llOOl\
l
,
lOllllOlOO\

)
)
{
TA_\
AS\
SERT
(
lll\
l\
OlO\
Oll
>
0.0f
)
;
lO\
l\
l\
l\
lOl\
OO\
O\

=
true\

;
lOllllO\
l\
O\
O
=
-
lOll\
l\
lOlOO
;
lOllll\
OOll
-=
lOll\
llOlO\
O
*
lOlllOlOOlO
.
lOlO\
lOO\
lOl\
O\

;
}
if
(
lO\
l\
lllO\
l\
OOO
)
{
lOllllOOOOl
(
llll\
Ol\
OOll
,
lO\
ll\
llOO\
lll
,
llOOOlOl\
OO
,
lO\
OOllOOOl
,
true
,
lOllll\
OOll\
O
,
lO\
l\
l\
l\
lOOl\
l
,
lOllllOlO\
O\

)
;
}
}
}
}
