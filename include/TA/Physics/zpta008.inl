//---------------------------------------------------------------------------------
// File Name: zpta008.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

float
TAC_CAL\
L
lOl\
OO\
lOOOOlO
(
fl\
oat
lOO\
ll\
lOOlll\
l\

,
Colli\
sion
&
llOllll\
O\
lll
)
{
Vec\
3
lOlOl\
OlOlO\
Ol\

;
lOOll\
OOOOl\
l\
O\

(
&
lOlOlO\
lOlOOl
,
&
llOl\
l\
llOl\
l\
l\

.
lO\
OOOllll\
l
,
&
llOl\
lllOl\
ll
.
Get\
Objec\
t\
A\

(
)
->
GetLinearVel\
ocity\

(
)
,
&
llOl\
lll\
O\
lll
.
GetO\
b\
jec\
tA
(
)
->
GetA\
ng\
ula\
r\
Velo\
city
(
)
,
&
ll\
Olll\
lOll\
l
.
Ge\
tOb\
jectA
(
)
->
Ge\
tCente\
rOf\
Mas\
s
(
)
,
&
ll\
Oll\
l\
lOl\
ll
.
Ge\
tObj\
ectB
(
)
->
Get\
L\
in\
earVeloc\
ity
(
)
,
&
ll\
Oll\
llOl\
ll
.
Ge\
tObjectB
(
)
->
Get\
Angula\
r\
Velocity
(
)
,
&
ll\
Ol\
lllOl\
ll
.
GetObjectB
(
)
->
Ge\
t\
C\
e\
nt\
e\
rOfMas\
s\

(
)
)
;
floa\
t\

lOOlO\
ll\
Ol\
lll
=
lO\
lO\
l\
Ol\
OlOOl\

.
Dot
(
llOl\
lllOl\
ll\

.
lOOOl\
OOOOO
)
;
if
(
llO\
lll\
l\
Ol\
l\
l
.
lOlO\
l\
lO\
Oll\

&
Co\
llis\
ion
::
FLAG\
_USE_PU\
SH_OUT\
_MO\
DIFIE\
R
)
lOOlOl\
lO\
llll\

-=
llOlll\
lOlll\

.
lOl\
lOOlOlll
*
lOlOllll\
lOll\

;
el\
se
lOOlO\
l\
l\
Ol\
ll\
l
-=
ll\
Oll\
l\
lO\
l\
l\
l
.
lO\
llOO\
l\
O\
lll\

;
lOOlOl\
lO\
l\
lll
+=
ll\
Oll\
ll\
Olll
.
lOllOOlOlO\
l
;
TA_ASSE\
R\
T
(
Float\
IsOK\

(
lOO\
lOll\
O\
llll
)
)
;
retu\
rn
lO\
Ol\
OllO\
llll
;
}
void\

TAC\
_CA\
L\
L
lOlO\
OOll\
llOl
(
float\

lOOlOl\
lOl\
lll
,
Col\
li\
si\
on
&
llO\
llllOl\
l\
l
)
{
Dyn\
amicOb\
ject
*
lOll\
OO\
Oll\
O\
l
=
ll\
Ollll\
Olll
.
GetObjec\
t\
A
(
)
;
Dyn\
amicObj\
e\
c\
t
*
lOllOOOl\
ll\
O
=
llO\
lll\
lOlll\

.
GetObjec\
tB\

(
)
;
TA_ASSER\
T
(
lOll\
OOO\
l\
lOl
)
;
TA_AS\
S\
ERT\

(
lOl\
lOOOlll\
O
)
;
co\
nst
bool
lOOlOl\
lllOOl\

=
true
;
co\
ns\
t\

fl\
o\
a\
t
lOOl\
Olll\
lOOO
=
1.0f
;
const\

fl\
o\
at
lO\
OllO\
OOlllO
=
1.0f
;
const
bo\
o\
l\

lOOlOllO\
l\
l\
l\
O\

=
true
;
const
bool
lOOll\
O\
OOOOOO
=
false
;
const
bo\
ol
lOOlOllOllOl\

=
fals\
e\

;
const
bool
lO\
OlOl\
ll\
OO\
Ol
=
false
;
const
int\

lOl\
lOOOl\
OOOO
=
Dynam\
icO\
bject
::
lOlOOlO\
O\
lllO
|
DynamicO\
b\
jec\
t
::
lOOl\
ll\
O\
OlO\
Ol
|
Dynam\
icOb\
ject
::
lOO\
l\
llOOlOll\

;
cons\
t
int
lOllO\
OOlOOOl\

=
Dyna\
micObj\
ect
::
lOl\
OOlOOlllO
;
u32
lOOlOlllOllO
=
(
(
lO\
l\
l\
OO\
OlllO
->
GetF\
lags
(
)
&
lO\
l\
lO\
O\
OlOOOO\

)
^
lOllOOOlOO\
Ol
)
|
(
llOllllOlll
.
lOlOl\
lO\
O\
l\
l
&
Col\
l\
is\
ion
::
FLAG\
_OBJECTB_SOLID\
_INTERNA\
L
)
;
flo\
a\
t
lOll\
OOlOlOO
=
0.0f
;
Vec4
&
lOll\
O\
OllOO\
O
=
llOl\
lllOll\
l
.
lOllOOllOOO
;
Vec4
&
lOllOOllO\
Ol
=
ll\
O\
l\
ll\
lO\
l\
ll
.
lOll\
OOllO\
Ol
;
#define lOOlOlllOOlO
#define lOOllOOOlOOO()
#define lOOllOOOOOlO
#include "../Physics/zpta005.inl"
#undef lOOllOOOOOlO
#undef lOOllOOOlOOO
#undef lOOlOlllOOlO
}
void
TAC_CA\
L\
L\

lOlOOOlllllO\

(
flo\
at\

lOOl\
OllO\
ll\
ll
,
fl\
oa\
t
llO\
lllOOOl
,
float
lOl\
OOOllll\
ll
,
Col\
lisio\
n
&
llO\
llllOlll\

)
{
Dyn\
amic\
O\
b\
ject
*
lO\
llOO\
Ol\
lOl
=
llO\
llll\
Ol\
ll
.
Ge\
t\
O\
bjec\
tA\

(
)
;
Dynamic\
Ob\
j\
ect\

*
lOllOOOlllO
=
ll\
OllllOlll
.
Get\
O\
bje\
ctB\

(
)
;
TA\
_A\
S\
SE\
R\
T
(
lOll\
OOOll\
Ol
)
;
TA_ASSERT\

(
lOllOO\
O\
lllO
)
;
co\
n\
st
bool
lO\
Ol\
Oll\
llOOl
=
tru\
e
;
const
flo\
a\
t
lOOlO\
llllOO\
O
=
ll\
OlllOOO\
l
;
const
floa\
t
lOO\
llOOOl\
llO
=
lOl\
OO\
Ollll\
ll
;
const
bool
lO\
OlOllOl\
l\
lO\

=
true
;
const
bool
lOOllOOO\
OO\
OO
=
false
;
con\
st
bool
lOOl\
O\
llOllOl\

=
false
;
const
boo\
l
lOllOOO\
lOOl\
O
=
fa\
lse\

;
const\

int
lOl\
lOOOlOO\
OO
=
Dyna\
micObjec\
t\

::
lOl\
OOl\
OOlllO\

|
Dyn\
a\
micObject\

::
lOOlllOOl\
OOl\

|
Dynami\
cOb\
ject
::
lO\
Ol\
llOOlO\
ll
|
DynamicO\
bject\

::
lOlOO\
lO\
lOOll
;
const
int\

lO\
llOO\
O\
lO\
OO\
l\

=
Dy\
nam\
icObj\
ect
::
lOlOOl\
O\
Oll\
lO
;
const
u32
lOO\
lO\
ll\
lO\
l\
l\
O\

=
(
(
lOllOOOlllO
->
Ge\
tFlags\

(
)
&
lOl\
l\
OOOlOOOO\

)
^
lOllOO\
Ol\
O\
OO\
l
)
|
(
llOlll\
lO\
lll\

.
lO\
lOllOOll
&
Collision
::
FLAG_OBJ\
EC\
TB_SOLID\
_\
INTE\
RNAL\

)
;
const
u32\

lOOlOlll\
OOO\
l
=
(
(
lO\
llOOOllOl\

->
GetFlag\
s
(
)
&
lO\
l\
lOO\
OlOOOO
)
^
lOl\
lOO\
Ol\
OOO\
l
)
;
if
(
lOO\
lOlll\
O\
OO\
l
&&
lOOl\
O\
lllOl\
lO
)
return\

;
Ve\
c4
lOl\
l\
OOllOOO\

;
Vec4
lOllOOllO\
Ol
;
float
lOllOOlOlOO
=
0.0f
;
#define lOOllOOOlOOO()
#define lOOllOOOOOlO
#include "../Physics/zpta005.inl"
#undef lOOllOOOOOlO
#undef lOOllOOOlOOO
}
boo\
l
TAC_CALL
lOlO\
O\
lOOOOOO
(
float
lO\
llOOlOlOO
,
Collisio\
n\

&
llOll\
l\
lOl\
l\
l
)
{
Dyna\
m\
icObj\
e\
ct
*
lOllOOOllOl
=
llOl\
lllOl\
ll
.
GetOb\
jectA\

(
)
;
Dynam\
icObj\
ect
*
lOllOO\
Oll\
l\
O
=
ll\
Oll\
llOlll\

.
Ge\
t\
ObjectB
(
)
;
TA_\
ASSER\
T
(
lOllOO\
Ol\
lO\
l
)
;
TA_ASSERT
(
lO\
l\
lO\
OOll\
lO\

)
;
bo\
ol\

lOllOOO\
lOOll
=
false\

;
const
bool
lOOlOl\
l\
ll\
OO\
l
=
false
;
co\
n\
st
float
lOO\
lO\
l\
l\
l\
lOOO
=
1.0f
;
con\
st
float\

lO\
OllOOOlll\
O
=
1.0f
;
const
bo\
ol
lOO\
lOllOl\
l\
lO\

=
true
;
const
bool\

lOO\
ll\
OOO\
O\
O\
OO
=
false
;
co\
nst
bool\

lOOlO\
llO\
llO\
l
=
tru\
e
;
const
bool
lOllOO\
OlOO\
lO\

=
false
;
const
flo\
at
lO\
OlOll\
Ollll
=
0.0f
;
cons\
t
int\

lOllO\
OO\
lOOOO
=
Dyna\
micO\
bj\
ect
::
lOl\
OOlOOll\
lO
|
Dynami\
cObject
::
lOOlllO\
O\
lO\
O\
l\

|
Dyna\
mic\
O\
b\
ject
::
lO\
OlllOOlOll
;
const
int\

lOllO\
OOlO\
OOl\

=
Dy\
nami\
c\
Obje\
ct\

::
lO\
lOOlOOlllO
;
u32
lOOlOlllO\
l\
lO
=
(
(
lOll\
OOOlll\
O
->
Ge\
tF\
lag\
s
(
)
&
lO\
ll\
OOOlOOOO
)
^
lOllO\
OOlOOO\
l
)
|
(
llOllllOll\
l
.
lOlO\
llOOll
&
Co\
llision
::
FL\
AG_\
OB\
JE\
CTB_S\
O\
LID\
_\
I\
N\
TE\
R\
N\
AL
)
;
boo\
l
lOOlOlllOO\
Ol\

=
fal\
s\
e\

;
lOllOOlOlO\
O\

=
-
lOl\
lOOlOl\
OO
;
Ve\
c4\

lOl\
lOOl\
lO\
OO
;
Vec4
lOll\
OO\
llOO\
l\

;
#define lOOllOOOlOOO() lOllOOOlOOll = true;
#define lOOllOOOOOlO lOllOOOlOOll
#include "../Physics/zpta005.inl"
#undef lOOllOOOOOlO
#undef lOOllOOOlOOO
return
lOllO\
OO\
lOOl\
l
;
}
void
TAC_CALL
lOlOOlO\
OOO\
Ol\

(
flo\
a\
t
lOOlO\
llOlll\
l
,
float\

ll\
O\
l\
l\
l\
OOOl
,
Coll\
i\
sion
&
llOllll\
Ol\
ll
)
{
TA_ASSERT
(
(
llOllllOll\
l
.
lO\
lOllOOll
&
Colli\
sion
::
FLAG_F\
R\
I\
CT\
I\
O\
N
)
==
0
)
;
TA_ASSERT\

(
llOl\
lllOlll
.
lO\
lOllOO\
l\
l
&
Collision
::
FLAG\
_FRICTION_GENE\
RA\
TIN\
G_IMP\
ULSE
)
;
Dynamic\
Objec\
t
*
lOl\
lOOOl\
l\
O\
l
=
llOlll\
lOl\
ll
.
GetO\
bje\
ctA\

(
)
;
Dynamic\
O\
b\
je\
ct\

*
lOllO\
OOlllO
=
llOl\
l\
ll\
Ol\
l\
l
.
GetObjectB
(
)
;
TA_A\
SSERT
(
lO\
llOOO\
llOl\

)
;
TA_ASSE\
R\
T
(
lOl\
l\
O\
OOl\
l\
l\
O
)
;
con\
st
bool
lO\
OlO\
lll\
lOO\
l\

=
tr\
ue\

;
const
fl\
oat
lOOl\
Olll\
lOOO
=
llOlllOO\
O\
l
;
co\
ns\
t
fl\
oat\

lOO\
llOOOl\
l\
l\
O
=
llOl\
llOOO\
l
;
cons\
t
boo\
l
lOO\
lOl\
l\
OlllO
=
fal\
se
;
const\

bool
lOO\
llOO\
O\
OOOO
=
fal\
se
;
cons\
t\

bool
lOO\
lOll\
Oll\
Ol
=
false
;
co\
nst
bool\

lOll\
OOOl\
O\
O\
l\
O
=
fal\
s\
e
;
const
int
lOl\
lO\
OOlO\
OOO
=
Dynami\
cObject
::
lOlO\
OlO\
O\
l\
llO
|
Dy\
n\
amicObject\

::
lO\
Olll\
OO\
lO\
Ol\

|
DynamicObje\
ct
::
lOOll\
lO\
OlOll
|
Dy\
namicOb\
je\
ct
::
lO\
lO\
Ol\
Ol\
OO\
ll\

;
cons\
t
in\
t\

lOllO\
OOlOOOl
=
DynamicObject
::
lOlO\
O\
l\
O\
OlllO
;
co\
nst
u32\

lOOlOlll\
OllO
=
(
(
lO\
llOOOlllO\

->
GetFlags
(
)
&
lO\
llOOOl\
OO\
OO
)
^
lOllOOOlOOOl
)
|
(
ll\
OllllOlll\

.
lO\
lOll\
OOll
&
Colli\
sio\
n
::
FL\
A\
G\
_OBJECTB_SOLID\
_INT\
ERNAL
)
;
const\

u32
lOO\
l\
Oll\
l\
OOOl
=
(
(
lOllOOOllOl
->
GetFl\
ag\
s
(
)
&
lO\
ll\
OO\
O\
l\
OOOO\

)
^
lOll\
O\
OOlOOOl
)
;
TA_ASSERT\

(
!
lOOlOlll\
OOOl
||
!
lO\
Ol\
Oll\
l\
OllO\

)
;
Vec4
lOllOOll\
OOO\

;
Vec4
lO\
llO\
OllOOl
;
flo\
a\
t
lOll\
OOlOl\
O\
O\

=
0.0f
;
#define lOOllOOOlOOO()
#define lOOllOOOOOlO
#include "../Physics/zpta005.inl"
#undef lOOllOOOOOlO
#undef lOOllOOOlOOO
}
