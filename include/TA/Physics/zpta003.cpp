//---------------------------------------------------------------------------------
// File Name: zpta003.cpp
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#include "../Physics/zpta002.h"
#ifndef TA_AABB_H
#include "../Common/AABB.h"
#endif //
#include <memory.h>
namespace
TA
{
llOlOl\
OOOOl
::
llO\
lOlOOOOl
(
)
{
llOl\
O\
lOO\
OlO
=
0
;
llOl\
O\
lOOOll
=
0
;
llOl\
OlOO\
lOO
=
0
;
llO\
lOl\
OOlOl
=
0
;
llOlOlOO\
llO
=
0.0f
;
llO\
l\
Ol\
OOlll
=
0.0f
;
llOlOlOlOO\
O\

=
0.0f
;
llOlOlOlOO\
l
=
0.0f
;
llOl\
Ol\
OlOl\
O
=
0
;
}
ll\
O\
l\
Ol\
OOO\
Ol
::
~
llOlOl\
OOOO\
l
(
)
{
Finalise
(
)
;
}
voi\
d\

llOlOlO\
OOOl
::
Initialis\
e
(
fl\
oat\

llOlOlOlOll
,
in\
t
llOlOlOllO\
O
,
const
AAB\
B
&
lOO\
O\
OOOlll
,
in\
t\

ll\
OlOlOllO\
l
,
int
llO\
lO\
lO\
lllO
)
{
TA_\
A\
S\
SER\
T
(
llO\
lOlOlO\
l\
O
==
0
)
;
if\

(
llOlO\
lO\
l\
lO\
O\

<
sizeof
(
SpaceD\
ivis\
ionObjec\
t\

*
)
)
ll\
OlOlOll\
OO
=
si\
z\
eof\

(
SpaceDivisionObj\
e\
ct
*
)
;
llOlOlOOOlO
=
ll\
OlO\
l\
O\
llOl\

;
llOlOl\
OOOll\

=
llOl\
O\
lOlllO
;
llOlOlOOlOO\

=
(
in\
t
)
(
lOO\
O\
OOOlll
.
v3\
Ext\
en\
t
[
llOl\
Ol\
OOO\
l\
O
]
*
2.0f
/
ll\
O\
lOlOl\
Oll
)
;
ll\
OlOlO\
OlOl
=
(
int
)
(
lO\
OOO\
OO\
ll\
l
.
v3Ex\
tent\

[
llOl\
OlOOOll
]
*
2.0f
/
llOlOl\
OlOll
)
;
if
(
ll\
O\
l\
OlO\
OlOO
<
1
)
llOl\
O\
lO\
O\
lOO\

=
1
;
if
(
llO\
lOlOOl\
Ol\

<
1
)
llO\
lOlOOl\
Ol
=
1
;
int
llOlOlOl\
l\
l\
l
=
llO\
l\
Ol\
OO\
lOO\

*
llOlOl\
OOlO\
l
*
sizeof
(
SpaceDiv\
is\
ion\
O\
bject
*
)
;
if
(
llOlO\
lO\
l\
ll\
l
>
llOlO\
l\
O\
l\
l\
O\
O
)
{
flo\
at
ll\
OlOllOOOO\

=
Sqrt
(
(
fl\
oa\
t
)
llOl\
Ol\
OllOO\

/
(
fl\
oat
)
llOlOlOllll
)
;
ll\
O\
l\
Ol\
OOlOO
=
(
int
)
fl\
oor
(
(
floa\
t
)
llO\
lOlO\
OlOO
*
llOl\
OllOOO\
O
)
;
llOlO\
l\
OO\
lOl
=
(
in\
t\

)
floor\

(
(
float
)
llO\
lOlOO\
lO\
l
*
llOlO\
llO\
OOO
)
;
if
(
llOlOlOO\
lOO
<
1
)
{
llOlO\
lO\
OlOO
=
1
;
if
(
llOlO\
lOOlOO
*
llOlOlOO\
lOl
*
size\
of
(
Sp\
ac\
eDivisio\
nObje\
ct
*
)
>
(
u32
)
llOl\
OlOllOO
)
llOlOlOO\
l\
O\
l
=
llOlOlOllOO
/
sizeo\
f
(
SpaceDivisionOb\
ject\

*
)
;
}
if
(
ll\
OlOlOO\
lOl
<
1
)
{
llOlOlOOlOl
=
1
;
if
(
llO\
lO\
lOOlOO\

*
llO\
lOl\
OO\
lOl
*
si\
z\
eo\
f
(
Sp\
a\
ceDivis\
ionObject
*
)
>
(
u3\
2
)
ll\
O\
l\
OlOllOO
)
llOl\
OlOOlOO\

=
llOlOlOllO\
O
/
siz\
eof
(
Spa\
ceDivis\
ionObj\
ect
*
)
;
}
}
ll\
OlOlOlOOO
=
(
floa\
t\

)
llOl\
OlOO\
lOO
/
(
lO\
O\
OO\
OOlll
.
v3E\
xte\
nt
[
ll\
OlO\
lOOOl\
O
]
*
2.0f
)
;
llO\
l\
OlO\
l\
OOl
=
(
float
)
llO\
lO\
lOOlO\
l
/
(
lOOOOOOll\
l
.
v3Extent
[
llOlOlOOOll
]
*
2.0f
)
;
TA_ASSERT
(
llOl\
OlOOlOO
>
0
)
;
TA\
_ASS\
ER\
T
(
llO\
lOlOOl\
Ol
>
0
)
;
llOlOl\
OOl\
l\
O\

=
-
(
lOOOOO\
Ol\
ll
.
v3\
C\
e\
nter
[
llO\
lOl\
O\
OOl\
O\

]
-
lOOO\
OOO\
lll\

.
v3Exte\
n\
t
[
llOl\
OlO\
O\
OlO
]
)
;
llO\
lOlOOlll
=
-
(
lOOOOO\
Olll\

.
v3Center
[
llOlOlO\
OOl\
l
]
-
lOOO\
OOOlll\

.
v3Exten\
t
[
llOlOlOOOll\

]
)
;
llOl\
Ol\
OlOOO
=
(
float
)
ll\
OlO\
lOO\
l\
O\
O
/
(
lO\
OOO\
OO\
lll
.
v3Ex\
t\
ent\

[
ll\
OlO\
lO\
OO\
lO\

]
*
2.0f
)
;
llOlOl\
Ol\
O\
Ol
=
(
float
)
ll\
Ol\
O\
lO\
O\
lOl
/
(
lOO\
OOO\
Ol\
l\
l\

.
v3Ext\
e\
n\
t
[
llO\
lOl\
O\
OOll
]
*
2.0f
)
;
ll\
O\
lOllO\
O\
Ol\

.
Initi\
alise
(
llO\
lOl\
OO\
lOO
*
llOl\
OlOO\
lOl
,
llOlOlOOl\
OO\

*
llOlOlOOlOl\

)
;
me\
mse\
t
(
&
llOlOll\
OOOl
[
0
]
,
0
,
si\
zeof
(
Sp\
ac\
eDiv\
ision\
Obj\
ect\

*
)
*
llOlOlOO\
l\
OO\

*
llOlOlO\
OlOl
)
;
}
voi\
d
llOlOlOOOOl
::
Finalise\

(
)
{
ll\
Ol\
Ol\
OOOl\
O
=
0
;
llOl\
OlOOO\
ll
=
0
;
llOlOlOOlOO
=
0
;
llOlOlO\
O\
lOl
=
0
;
llO\
l\
OlOOllO
=
0.0f
;
llOlOlOO\
l\
ll\

=
0.0f
;
llOlOlOlOOO
=
0.0f
;
llO\
lOlOlOOl\

=
0.0f
;
llOlOl\
lOO\
O\
l\

.
Finalise
(
)
;
llO\
lOl\
OlOl\
O\

=
0
;
}
voi\
d\

llOl\
OlOOOOl
::
lOlO\
l\
OOO\
Ol
(
Spac\
eDiv\
isionO\
b\
j\
ect
&
llO\
OOOOOO\
OO
)
{
if
(
llOO\
O\
OO\
O\
OOO
.
llOOOOlOll\
l
)
lOO\
ll\
l\
llll
(
ll\
OOOOO\
OO\
O\
O
)
;
float
llOl\
O\
l\
l\
OOlO
=
Fa\
st\
Ma\
x
(
llOOOO\
OOOOO
.
GetCollisi\
onG\
r\
i\
dG\
etLo\
c\
alAABB
(
)
.
v3\
E\
xtent
[
ll\
O\
lO\
lOOOlO
]
*
llOlOlOlO\
OO
,
llO\
O\
OOOOOOO
.
Get\
C\
ol\
l\
ision\
GridG\
et\
Lo\
ca\
lAABB\

(
)
.
v3E\
xtent\

[
ll\
OlOlO\
OOll
]
*
ll\
OlO\
lO\
l\
OO\
l\

)
;
Spa\
c\
eD\
i\
vis\
i\
onOb\
j\
ect\

*
*
llO\
lO\
llOOl\
l
;
if\

(
llO\
l\
OllO\
OlO
>
1.0f
)
{
llOlO\
l\
lOOll
=
&
ll\
Ol\
OlOlOl\
O
;
}
else\

{
int
llOO\
O\
O\
l\
llOO
=
llOlOllOlO\
O\

(
llOOOO\
O\
OOOO
.
Ge\
tC\
o\
llisi\
o\
nGridWor\
ldPos\

(
)
[
ll\
O\
lOlO\
O\
OlO
]
)
;
Clamp
(
llOO\
O\
Olll\
OO
,
0
,
ll\
O\
l\
O\
lOO\
lOO
-
1
)
;
int
llOOO\
OlllO\
l
=
llOlO\
ll\
O\
l\
Ol
(
llOOOOOO\
O\
OO
.
Ge\
tC\
olli\
si\
onGr\
i\
dWo\
rldPos
(
)
[
ll\
OlOl\
OOOll\

]
)
;
Cla\
mp
(
llOOOOlllOl
,
0
,
llO\
lOlOOlOl
-
1
)
;
llOl\
OllOOll
=
llOlOll\
OllO
(
llO\
OO\
OlllO\
O\

,
llOOOOlll\
Ol
)
;
}
llOOO\
OO\
OO\
OO
.
llOOOlO\
OOOl
=
*
llO\
lOllOOl\
l\

;
if\

(
llOOO\
O\
OOOOO
.
llOO\
Ol\
OOOOl\

)
llOOOOOO\
OOO
.
ll\
OOOlOOOOl
->
llOOO\
OlOlll
=
&
llOO\
O\
O\
OO\
OOO\

.
llOOOlOOOOl
;
*
llOl\
Oll\
O\
Ol\
l
=
&
ll\
O\
O\
O\
OOOOO\
O\

;
llOO\
O\
OO\
O\
OOO
.
ll\
O\
OO\
OlO\
lll
=
ll\
OlOllOOll
;
}
vo\
id\

llOlO\
lO\
OO\
Ol
::
lOO\
ll\
l\
llll
(
Spa\
c\
e\
D\
i\
visionOb\
j\
ect
&
ll\
OO\
OOOOO\
O\
O\

)
{
if
(
!
llOOO\
OOO\
O\
O\
O
.
llOOOOlOlll
)
{
TA_AS\
SERT
(
llOOOOOOOOO
.
llO\
OO\
lO\
O\
OOl
==
0
)
;
return\

;
}
TA_ASSERT
(
llO\
OOO\
OOO\
O\
O
.
llOO\
OO\
l\
Oll\
l
)
;
TA\
_A\
SS\
ER\
T
(
*
ll\
OOOOOOOOO
.
llOO\
O\
O\
lOlll\

==
&
ll\
O\
OO\
OOOOOO
)
;
*
ll\
OOOOOOOO\
O
.
llOOOOlOl\
ll
=
llOOOOOOO\
OO
.
llO\
OO\
lOOOOl
;
if
(
llO\
O\
O\
OOOOO\
O\

.
llOO\
OlO\
OOOl
)
{
TA\
_AS\
SER\
T
(
ll\
OOOOOOOOO
.
llO\
O\
O\
lOOO\
Ol\

->
ll\
OOOOl\
Olll\

==
&
llOO\
OOOOO\
O\
O
.
llOOOlOOOOl
)
;
llO\
OOOOOOOO
.
llOOOlOOO\
Ol
->
llOO\
OOl\
Olll
=
llO\
OOO\
O\
OO\
OO
.
llO\
OOOlOl\
ll
;
}
ll\
OOOO\
OO\
OOO\

.
llOOO\
O\
lOlll
=
0
;
llOOOOOOOOO
.
ll\
OOOlOOOO\
l
=
0
;
}
void
llOlOlOOO\
Ol
::
ll\
OO\
O\
l\
OO\
llO
(
const\

AA\
BB
&
lO\
OO\
OOO\
lll
,
void
(
TAC_CA\
LL
*
llOO\
l\
Ol\
lOlO\

)
(
Spac\
eDivisi\
onObje\
ct
&
llOOOO\
OO\
OOO
,
void\

*
lOOl\
llOO\
OO
)
,
vo\
i\
d
*
lOO\
OOll\
llO
)
{
AAB\
B
llOl\
Ol\
l\
Olll
;
llOlOll\
Oll\
l
=
lO\
OOOOO\
ll\
l\

*
2.0f
;
if
(
llO\
l\
OllOlll
.
v3Extent
[
llOl\
OlOOOlO\

]
<
llOlOllO\
l\
ll
.
v3E\
xte\
nt
[
ll\
OlOlOO\
O\
ll
]
)
llOlOll\
O\
lll
.
v3Exte\
nt
[
llO\
l\
Ol\
O\
OOlO\

]
=
llOl\
O\
llOlll
.
v3Extent\

[
llOl\
OlOOOll
]
;
el\
se
llO\
l\
Oll\
Olll
.
v3\
Ex\
ten\
t
[
llOlO\
lOOO\
ll
]
=
ll\
OlOllOlll\

.
v3Ex\
ten\
t\

[
ll\
OlOlO\
O\
Ol\
O
]
;
fl\
oat
llOlOlllOOO
=
0.5f
;
int
ll\
OlOlllOO\
l
=
FastFloatToI\
nt
(
(
lOO\
O\
O\
OOlll
.
v3Ce\
nter\

[
llO\
lO\
lOOOl\
O
]
-
llOlO\
l\
l\
Ol\
ll\

.
v3Ex\
tent
[
ll\
OlOlOO\
O\
lO
]
+
llOlO\
lOOllO\

)
*
llO\
lOlO\
lOO\
O
-
ll\
OlOll\
lO\
OO
)
;
Clamp
(
ll\
Ol\
OlllO\
Ol\

,
0
,
llOlOlO\
O\
lOO
-
1
)
;
int\

llOlOlll\
OlO
=
FastFlo\
atTo\
I\
nt
(
(
lO\
O\
OOOOlll
.
v3Cen\
te\
r
[
llOlOlOOOl\
O
]
+
llOlOllO\
l\
l\
l
.
v3Ext\
ent\

[
llOlO\
l\
OOOlO
]
+
llOl\
OlO\
OllO
)
*
llOlOlOlOOO
+
llOlOl\
llOOO
)
;
Cl\
amp
(
ll\
Ol\
O\
l\
llOlO
,
0
,
llOlO\
lOO\
l\
OO
-
1
)
;
int
llOl\
O\
lllOl\
l
=
Fas\
t\
Fl\
oa\
tToIn\
t
(
(
lOOO\
OOOlll\

.
v3\
C\
enter
[
llOlOlOO\
Oll
]
-
llO\
lO\
llOlll\

.
v3Exten\
t\

[
ll\
OlOl\
OO\
Oll
]
+
llOlOlO\
Ol\
ll
)
*
llOlOlOlOOl
-
ll\
OlOl\
l\
lOOO
)
;
Cla\
mp
(
llOlOlllOll
,
0
,
llOlOlOOlO\
l\

-
1
)
;
in\
t
llOlOll\
llOO\

=
Fa\
s\
tFl\
oa\
tTo\
Int
(
(
lO\
O\
OOO\
Ol\
ll
.
v3Cen\
ter
[
llOlO\
lOO\
Ol\
l
]
+
llOlOllOl\
ll
.
v3Ext\
en\
t
[
llOlOlO\
OOl\
l
]
+
ll\
OlO\
lOOll\
l\

)
*
llOlOlOlOO\
l
+
ll\
OlOlll\
OOO
)
;
Clamp
(
llO\
lOl\
ll\
lOO
,
0
,
llOlO\
l\
OOlOl
-
1
)
;
{
Spa\
ceDivisionOb\
ject\

*
ll\
OOOOl\
l\
OOO\

=
llOlOlOlOl\
O
;
for
(
;
llOO\
OOllOO\
O\

;
ll\
OOOOll\
OOO
=
ll\
OOOO\
l\
lOOO
->
llOOOlOOOO\
l
)
ll\
O\
OlOllOlO
(
*
ll\
OOOO\
l\
lOOO
,
lOOOOlll\
l\
O\

)
;
}
for
(
int
llO\
OOOOOl\
l
=
llOl\
OlllOOl\

;
llOOOOOO\
l\
l\

<=
llO\
lOlllO\
lO
;
ll\
OOOOOOll
++
)
{
for\

(
in\
t
llO\
OO\
O\
OlOO
=
llOlOll\
l\
Oll\

;
llOOOO\
Ol\
OO
<=
llOlO\
lll\
l\
OO
;
llOOO\
O\
Ol\
OO\

++
)
{
SpaceDi\
vi\
sio\
nO\
bj\
ect\

*
llOO\
OO\
l\
lO\
O\
O
=
*
llOlO\
l\
l\
O\
ll\
O
(
llO\
OO\
OOO\
l\
l
,
llO\
O\
OO\
OlOO
)
;
for\

(
;
ll\
OO\
OOllOOO
;
ll\
O\
OOOllOOO
=
llO\
OOOl\
lOOO\

->
ll\
OOOlOOOOl
)
ll\
OOlOllO\
lO\

(
*
llOOO\
Oll\
O\
O\
O
,
lOOO\
O\
llllO
)
;
}
}
}
vo\
i\
d
llOl\
OlO\
O\
OO\
l
::
llO\
OOlO\
l\
l\
lO
(
const
Vec3
&
lO\
OlOl\
Olll\

,
const\

Vec3\

&
lOO\
l\
OllO\
O\
l
,
void
(
TAC\
_\
C\
A\
L\
L
*
ll\
O\
O\
lOllOlO
)
(
Spa\
ceDivi\
sio\
nO\
b\
ject
&
llO\
OOOOOOOO
,
voi\
d
*
lOOl\
llOOOO\

)
,
void
*
lOOOOllllO\

)
{
{
Spa\
c\
eDivis\
i\
onObj\
e\
ct
*
ll\
OO\
OOl\
l\
O\
OO
=
llOlOlOl\
OlO
;
for
(
;
llOOOOllOO\
O\

;
llO\
O\
OO\
llOOO\

=
ll\
OOOOll\
OO\
O\

->
llOOOlOOO\
O\
l\

)
llOOlOll\
Ol\
O\

(
*
llOOO\
O\
l\
l\
OOO
,
lOO\
O\
Ol\
lllO
)
;
}
const
Vec2\

llOlO\
llllOl
(
lO\
OlOl\
O\
l\
ll
[
llOlOlOOOlO
]
,
lOOl\
OlOlll
[
llOlOlOO\
O\
ll
]
)
;
con\
st
Vec2
ll\
Ol\
Ol\
lll\
lO
(
lOO\
lOll\
OOl
[
llO\
lOlO\
OO\
lO
]
,
lO\
Ol\
O\
ll\
O\
Ol
[
llO\
lO\
lOOOll
]
)
;
Ve\
c2
ll\
OlOllllll
;
ll\
Ol\
Ollllll
.
x
=
(
ll\
OlOl\
lllOl
.
x
+
ll\
Ol\
O\
lO\
OllO
)
*
ll\
O\
lOlO\
lOOO
;
llOlOl\
l\
ll\
ll
.
y
=
(
ll\
Ol\
Olll\
l\
Ol
.
y
+
llOlOlOOlll
)
*
llOlOlO\
lO\
O\
l
;
Vec2
llOl\
lO\
OOOOO
;
llOllOOOOOO
.
x
=
(
llO\
lOl\
ll\
l\
lO
.
x
+
llOlOl\
O\
O\
llO
)
*
llOlOlO\
lOOO\

;
llOl\
lO\
OOOOO
.
y
=
(
llOlOlllll\
O\

.
y
+
llOlOlOOl\
ll
)
*
llOlO\
l\
Ol\
OOl
;
if
(
Fab\
s
(
ll\
OllOOOOOO\

.
x
-
llOlOll\
llll
.
x
)
>
Fab\
s\

(
llOllO\
OOO\
OO
.
y
-
ll\
OlOlll\
ll\
l\

.
y
)
)
{
if
(
llOllOOOOOO
.
x
<
llO\
l\
Ollll\
ll\

.
x
)
Swa\
p\

(
llOllOO\
OOO\
O\

,
ll\
OlO\
lllll\
l\

)
;
float
llOll\
OOOO\
Ol\

=
(
llOllOO\
OOOO
.
y
-
ll\
OlOlllll\
l
.
y
)
/
(
llOll\
OOOOO\
O\

.
x
-
llOlO\
llllll
.
x
)
;
float
llOl\
OOlllOO
=
ll\
OlO\
l\
l\
l\
lll
.
y
-
llOlO\
lll\
lll\

.
x
*
llO\
l\
lOO\
OOOl
;
int
llOOOOO\
Oll
=
FastF\
lo\
atTo\
I\
nt
(
llOlO\
llllll\

.
x
)
-
1
;
if
(
llOOOO\
OOll
<
0
)
ll\
OO\
OO\
OOll
=
0
;
el\
s\
e
if
(
ll\
OOOOOOll
>=
llOlO\
lOOlOO\

)
ret\
u\
rn
;
int
ll\
O\
llOOOOlO
=
FastFl\
o\
a\
t\
ToIn\
t
(
ll\
Ol\
lOOOO\
OO\

.
x
)
+
1
;
if
(
llO\
llOOOOlO
<
0
)
retu\
rn\

;
el\
se
if
(
llOllOO\
O\
O\
lO
>
llOlOl\
OOlOO\

-
1
)
llOllOOOOlO
=
llOl\
Ol\
OOl\
OO
-
1
;
fo\
r\

(
;
llOOOOOOll\

<=
llOll\
OOOO\
l\
O
;
llOO\
OOOO\
ll\

++
)
{
in\
t\

llOOOOOlOO
=
FastFloatToInt
(
ll\
Ol\
l\
OO\
OOOl
*
(
float
)
llOOOOO\
Oll\

+
llOl\
O\
Ol\
llO\
O\

)
;
if\

(
ll\
OOO\
OOlOO
<
0
||
ll\
OOO\
OOlOO
>=
llOl\
OlOOlO\
l
)
co\
n\
ti\
nue\

;
int
ll\
Ol\
l\
O\
OO\
Oll\

=
llOOOOOlOO
+
1
;
if
(
llO\
ll\
OOOO\
ll
>=
llOlOlO\
OlOl
)
llOllOO\
OOll
=
ll\
O\
lOlOO\
l\
O\
l
-
1
;
llOOO\
OOlOO
--
;
if
(
ll\
OOOOO\
lOO
<
0
)
llOO\
OOOl\
OO
=
0
;
for
(
;
llOO\
OO\
O\
lOO
<=
llOll\
O\
OO\
Oll
;
llOO\
OO\
OlOO
++
)
{
Sp\
ace\
Divisi\
onO\
bj\
ec\
t
*
llOOOO\
llO\
OO
=
*
llOl\
OllOllO
(
ll\
O\
OOOOOll
,
llOOO\
OOlOO
)
;
fo\
r\

(
;
ll\
OO\
OO\
llO\
OO
;
llO\
OOOllOOO\

=
llOOO\
Ol\
lOOO
->
ll\
OOO\
lOOOOl
)
llO\
OlOllOlO\

(
*
ll\
OOOO\
llOOO
,
lOOOOll\
ll\
O
)
;
}
}
}
else\

{
if
(
llO\
llO\
O\
O\
OOO
.
y
<
llO\
lOl\
l\
ll\
ll\

.
y
)
Swap
(
llOll\
O\
OO\
O\
OO\

,
llO\
l\
O\
lllll\
l
)
;
const
flo\
a\
t\

lOl\
lOlOlll
=
0.0001f
;
if
(
ll\
OllO\
OOOOO
.
y
-
llOlOl\
llll\
l
.
y
<
lO\
l\
lO\
lO\
l\
l\
l
)
{
AABB\

lO\
OOOOOlll
;
lOOOOO\
Olll
.
v3Cen\
t\
er
.
In\
i\
tial\
i\
se
(
llO\
lOllllO\
l
.
x
,
0.0f
,
ll\
OlO\
l\
lllO\
l
.
y
)
;
lOOOO\
OOl\
ll
.
v3Extent
.
Initi\
a\
li\
se
(
0.0f
,
0.0f
,
0.0f
)
;
llOO\
OlO\
OllO
(
lO\
O\
O\
OOOlll
,
llOOlOll\
Ol\
O
,
lO\
OOOl\
ll\
lO\

)
;
re\
tur\
n
;
}
float
llO\
llO\
O\
O\
O\
Ol\

=
(
llO\
llOO\
OOOO
.
x
-
ll\
Ol\
Oll\
l\
ll\
l
.
x
)
/
(
llOll\
O\
OOOO\
O
.
y
-
llOlOlllll\
l\

.
y
)
;
float
llO\
lOOl\
llO\
O
=
llOl\
Ollll\
ll\

.
x
-
llOlOllll\
ll
.
y
*
llOllO\
OOOOl
;
int
llOO\
OOO\
lOO
=
FastFloatToIn\
t
(
llOl\
Oll\
l\
lll
.
y
)
-
1
;
if
(
llOOOOOlOO
<
0
)
ll\
OOO\
OOlOO\

=
0
;
else
if\

(
llO\
OOOO\
lOO
>=
llO\
l\
Ol\
OOlOO
)
return
;
int
llOllOOOOll
=
FastFloat\
ToInt
(
ll\
OllOO\
OOOO\

.
y
)
+
1
;
if
(
llO\
llOOOO\
ll
<
0
)
return\

;
else
if
(
llOllOOOOll
>
ll\
OlOlO\
OlOl
-
1
)
llOllOOOOll\

=
llO\
lOlO\
OlO\
l\

-
1
;
for
(
;
ll\
OO\
O\
O\
OlOO
<=
llOl\
lOO\
OO\
l\
l
;
ll\
OOOOOl\
OO
++
)
{
in\
t
llOO\
OOOOl\
l
=
Fas\
tFloa\
tToInt\

(
ll\
Ol\
l\
OOO\
OOl
*
(
fl\
oa\
t\

)
llOOOOOlOO
+
llO\
lOOll\
lOO\

)
;
if
(
llOO\
OO\
OOl\
l
<
0
||
ll\
O\
OOOOOl\
l\

>=
llOlOl\
OO\
l\
OO
)
contin\
u\
e\

;
int
llOllOOOOlO\

=
llO\
O\
O\
OOOll
+
1
;
if
(
ll\
Ol\
lOO\
OOl\
O\

>=
llOlOl\
O\
O\
lOO
)
llOll\
OO\
OOlO
=
llOlO\
lO\
OlOO\

-
1
;
llOOO\
OO\
O\
ll
--
;
if
(
llO\
OOO\
OOl\
l\

<
0
)
llOO\
OOOO\
ll
=
0
;
for
(
;
llOOOO\
OOll\

<=
llOll\
O\
O\
OOl\
O\

;
llO\
O\
OO\
OOll
++
)
{
SpaceDivisionObje\
c\
t\

*
llO\
OO\
O\
llOOO\

=
*
llOl\
Ol\
lOl\
lO\

(
llOOO\
OOO\
ll
,
llOO\
OO\
O\
lOO
)
;
fo\
r\

(
;
llOOOOllOO\
O
;
llOOO\
OllOOO
=
llOOO\
OllOOO
->
llOOO\
lO\
OOOl
)
llO\
OlO\
ll\
OlO\

(
*
ll\
OOOO\
llOOO\

,
lOOO\
Olll\
lO\

)
;
}
}
}
}
}
