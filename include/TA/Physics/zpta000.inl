//---------------------------------------------------------------------------------
// File Name: zpta000.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

namesp\
ac\
e
TA
{
inline
void
Ca\
rTempl\
a\
te
::
Whee\
l
::
Set\
Su\
s\
pensionTop
(
cons\
t
Vec3\

&
lOlOlll\
ll\
O\
l
)
{
lO\
lOlOOl\
OO\
O
=
lOlOl\
l\
l\
ll\
Ol
;
}
in\
line\

const
Ve\
c3
&
Ca\
rT\
em\
pla\
t\
e
::
Whe\
el\

::
Ge\
t\
S\
uspe\
ns\
i\
on\
Top
(
)
const
{
return
lOlOlOOl\
O\
OO
;
}
inlin\
e
void
Car\
Templ\
at\
e
::
Wh\
eel
::
SetSus\
pe\
ns\
i\
onBottom\

(
co\
nst
Vec\
3
&
lOlOllll\
llO
)
{
lO\
lOlOOl\
OOl
=
lO\
lOl\
ll\
lllO
;
}
inlin\
e
co\
n\
st
Vec\
3
&
CarTe\
m\
plate\

::
Wheel\

::
GetSuspe\
ns\
io\
nBottom
(
)
const
{
ret\
urn
lOlOl\
OO\
l\
OOl
;
}
inl\
in\
e
void\

CarTemplate
::
Wheel
::
SetRadi\
us
(
fl\
oat
lllll\
OOO\
Ol
)
{
lOlOlOO\
lOlO
=
lllllOOOO\
l
;
}
inline
fl\
oat
CarTemplat\
e\

::
Whee\
l\

::
Ge\
tR\
adiu\
s
(
)
con\
st\

{
return\

lOl\
OlO\
O\
lO\
lO
;
}
inl\
i\
ne\

voi\
d\

Car\
Te\
mpl\
ate\

::
Wheel\

::
SetI\
ner\
tia\

(
fl\
oat\

lOlOlll\
ll\
ll
)
{
lOlO\
lOO\
lOll
=
lO\
lOlll\
llll\

;
}
inline
floa\
t
CarTemp\
lat\
e
::
Wh\
eel\

::
GetI\
nertia
(
)
const\

{
ret\
urn\

lO\
lO\
lO\
O\
lOl\
l
;
}
inl\
ine\

voi\
d\

CarT\
emp\
la\
t\
e
::
Whe\
el
::
SetBrakeTorque
(
float
lO\
llOO\
OO\
OO\
O
)
{
lOlOlOOl\
lOO
=
lOl\
lO\
O\
OOOOO
;
}
inli\
ne
floa\
t
Car\
T\
e\
m\
pla\
te\

::
Wheel
::
GetBrakeT\
o\
rque\

(
)
co\
ns\
t
{
re\
turn
lOl\
OlOOllOO
;
}
in\
line
vo\
id
Car\
Tem\
pla\
t\
e
::
Whee\
l
::
SetR\
ol\
l\
R\
e\
sis\
tance
(
flo\
at
lO\
l\
l\
OOOOOOl
)
{
lOlOlOOll\
O\
l
=
lO\
llO\
O\
O\
O\
OOl
;
}
inline
flo\
at
Ca\
rTemplate
::
Wheel
::
GetR\
o\
llResistance\

(
)
con\
st
{
ret\
ur\
n
lOlO\
l\
OO\
llOl
;
}
inli\
ne\

vo\
id
CarT\
emplate\

::
Wheel\

::
SetSuspen\
s\
ionSpr\
ingC\
on\
stant\

(
flo\
a\
t
lO\
l\
l\
OOOOOlO\

)
{
lO\
lOlO\
O\
l\
ll\
O
=
lO\
llOOOOO\
lO
;
}
inli\
ne\

floa\
t
CarTe\
mpl\
ate
::
Whe\
el
::
Get\
Suspen\
sionS\
prin\
gConst\
an\
t
(
)
cons\
t
{
re\
t\
ur\
n
lOlOlOOl\
l\
lO
;
}
in\
lin\
e
void
Ca\
rTemp\
la\
te\

::
Wh\
eel
::
Se\
tSu\
s\
pensionDam\
pi\
n\
gCons\
t\
ant
(
flo\
at\

lOllOOOOOll\

)
{
lOlOlOOll\
l\
l\

=
lO\
llO\
OOOOl\
l
;
}
inli\
n\
e
float
CarTemplate\

::
Wheel
::
Ge\
tSu\
sp\
ensionDam\
pingC\
on\
s\
tant
(
)
cons\
t\

{
ret\
urn\

lOlO\
lOOllll
;
}
inl\
ine
void\

Car\
Tem\
plate
::
Wheel
::
Set\
Slip\
Rat\
ioToNor\
ma\
l\
ise\
dTr\
ac\
t\
ionCa\
llBack
(
Fn\
Sli\
pR\
a\
t\
io\
T\
o\
Nor\
mal\
i\
sedTractio\
n
lO\
OOO\
lllOl
)
{
lOlOl\
OlOOO\
O
=
lO\
O\
O\
OlllOl
;
}
inline
CarTe\
mp\
late
::
FnSlip\
R\
atioT\
oNor\
malis\
e\
d\
Tracti\
on
CarTemplate\

::
Wh\
ee\
l
::
GetSl\
ip\
Rati\
oT\
oNormalise\
dTra\
c\
tionCallBack
(
)
con\
st
{
return\

lOl\
OlOlOO\
O\
O
;
}
inl\
i\
n\
e
void
CarT\
emp\
lat\
e\

::
Wheel\

::
Se\
tS\
lipA\
ng\
le\
T\
o\
La\
teralFo\
rceCallB\
ac\
k
(
FnSli\
pAngleToL\
ateralForc\
e
lOO\
O\
OlllOl
)
{
lOlO\
lOlOOO\
l
=
lOO\
OOll\
l\
Ol
;
}
inlin\
e
CarT\
e\
mplat\
e
::
FnS\
lipA\
ngleToLat\
eralFo\
rce
CarTempla\
te
::
Wh\
e\
e\
l
::
GetSlipAn\
gl\
eTo\
LateralFor\
ceCallBack
(
)
con\
s\
t
{
ret\
urn
lOlOl\
Ol\
O\
OOl\

;
}
inline\

voi\
d
CarTem\
pl\
ate\

::
Wheel\

::
SetSte\
e\
r\
ingFl\
a\
g
(
bool
lOlO\
lOO\
O\
l\
Ol\

)
{
lOlO\
lOOOlOO
.
lO\
l\
OlOOOlOl
=
lOlO\
l\
OOOlOl\

;
}
in\
li\
ne
bo\
ol\

CarTemplate
::
Wheel\

::
GetSteerin\
gF\
lag
(
)
const
{
ret\
urn
lOlO\
lOOO\
l\
OO\

.
lOlOl\
OOOlO\
l
;
}
in\
li\
ne
void\

CarTemplate
::
Whe\
el
::
SetD\
riving\
Fl\
a\
g
(
bool\

lO\
lOlOOOllO
)
{
lO\
lO\
lO\
OOlOO\

.
lO\
lOlOOOllO
=
lO\
lOlOOOll\
O
;
}
inli\
ne
bool
Ca\
rT\
e\
m\
plate
::
Wh\
eel
::
Ge\
tD\
ri\
v\
ingF\
l\
a\
g
(
)
con\
st
{
retur\
n
lOl\
OlOO\
Ol\
OO
.
lOlOlO\
OOll\
O
;
}
in\
li\
ne
void
Ca\
r\
Te\
m\
p\
late
::
Whe\
el\

::
SetHa\
ndBra\
keFlag
(
bool\

lO\
lOlOOOlll\

)
{
lOlO\
lOOOl\
OO
.
lO\
lO\
lOOOlll\

=
lOlOlO\
O\
Olll
;
}
inl\
ine
bool
Ca\
rTemplate\

::
Wheel
::
Get\
Han\
dBrake\
Fl\
ag
(
)
const
{
ret\
u\
r\
n\

lOlOlOO\
Ol\
O\
O
.
lOlOlOOO\
lll\

;
}
inlin\
e
con\
st
Vec3
&
Ca\
rTemplate
::
GetF\
orw\
ard\

(
)
cons\
t\

{
return
lOl\
OllOOllO
;
}
inlin\
e
const
Vec\
3
&
CarTe\
mp\
late
::
GetUp
(
)
con\
st
{
return\

lO\
lOllO\
Ol\
ll\

;
}
inl\
i\
ne\

int
CarTemp\
l\
a\
te
::
GetNu\
mGears
(
)
const
{
retur\
n
lOl\
O\
lOllOOO
.
lO\
OOlllO\
Ol
(
)
;
}
inline
voi\
d
Ca\
rT\
emplat\
e
::
SetGearRat\
io
(
in\
t
lOOOlOOll\
l
,
float
lO\
l\
lO\
OO\
Ol\
OO
)
{
lO\
lOlOllOOO\

[
lOOO\
lOO\
ll\
l
]
=
lOl\
l\
OO\
O\
Ol\
OO\

;
}
in\
lin\
e\

fl\
oa\
t\

Car\
Te\
mplate\

::
Get\
Ge\
a\
r\
R\
a\
t\
io
(
in\
t
lOOOl\
OOlll\

)
con\
s\
t
{
re\
tu\
r\
n
lOl\
OlO\
llOOO
[
lOOOlOO\
lll
]
;
}
inline\

void\

CarTemplat\
e\

::
Set\
D\
iffere\
ntialRa\
tio\

(
floa\
t
lOllOOO\
OlOl
)
{
lO\
lOlOllOOl
=
lO\
llOO\
O\
OlOl
;
}
inlin\
e
floa\
t
CarTe\
mplat\
e\

::
Ge\
tDifferenti\
alRa\
t\
io
(
)
const
{
return
lO\
lOlOllOO\
l
;
}
inl\
ine\

void
CarTe\
mplat\
e
::
SetM\
ass
(
float
lOl\
lOOOOllO
)
{
lOlO\
lOlOlOO
=
lOl\
lO\
O\
OO\
l\
lO
;
}
inlin\
e
float\

CarTem\
plat\
e
::
GetM\
as\
s\

(
)
const\

{
retu\
r\
n
lOlOlOl\
O\
lO\
O
;
}
inli\
ne\

void\

Car\
Template
::
SetTransm\
issio\
nEff\
ici\
e\
n\
c\
y
(
flo\
at
lOll\
OO\
OOlll
)
{
lO\
lOlOlOl\
ll
=
lOllO\
O\
O\
Ol\
l\
l
;
}
inl\
ine\

float
CarTemp\
late
::
Ge\
tT\
r\
ans\
mi\
s\
sionEfficie\
ncy\

(
)
const
{
return
lOlOlOlOlll\

;
}
in\
lin\
e
vo\
id
Ca\
rT\
em\
plate
::
Set\
To\
rqueMult\
ip\
lie\
r
(
floa\
t
lOllOOOlOOO\

)
{
lOlOlOlOlOl
=
lO\
l\
lOOOlOOO
;
}
in\
line
float
Ca\
rTem\
plate
::
GetTorqueM\
u\
l\
tipl\
ier\

(
)
const\

{
return\

lOlOlOlOlOl
;
}
inline
void
CarT\
emp\
l\
at\
e
::
Se\
tT\
orq\
u\
eC\
urve\

(
FnT\
orqueCurve
lO\
llOOOlO\
O\
l
)
{
lOlOlOlO\
llO\

=
lO\
llOOOlOOl
;
}
in\
lin\
e
void\

CarTemplate
::
SetA\
irResistance\

(
float
lOllOO\
OlOlO
)
{
lOlOlOllOl\
O
=
lOllOOOlOlO
;
}
inli\
n\
e
float
Car\
Template
::
GetAi\
r\
Resis\
tance
(
)
co\
n\
s\
t
{
ret\
urn
lO\
lOlOl\
lOlO
;
}
inl\
in\
e
void
CarTem\
p\
l\
ate
::
SetD\
ownForc\
e
(
flo\
at
lO\
l\
lOOOlOl\
l
)
{
lO\
lO\
lOllO\
ll
=
lO\
llOOOlOll
;
}
inl\
i\
ne
flo\
at
CarTe\
m\
pla\
te
::
GetD\
ownForce
(
)
co\
ns\
t
{
retu\
rn\

lOl\
OlO\
llOll
;
}
in\
line
voi\
d\

CarTe\
mp\
late
::
SetAntiRoll\
Fud\
g\
e
(
float
lOl\
lOOOllOO
)
{
lOl\
O\
l\
Oll\
lOO
=
lOllOO\
O\
llOO
;
}
in\
li\
ne
float\

Ca\
rT\
empl\
ate
::
Get\
A\
n\
t\
iRollF\
ud\
ge
(
)
co\
ns\
t\

{
return\

lO\
lOl\
O\
lllOO
;
}
}
