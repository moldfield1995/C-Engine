//---------------------------------------------------------------------------------
// File Name: zpta004.inl
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

{
bo\
ol\

lOlllOOllOl
=
false
;
TA_AS\
SERT
(
lOlllOOlO\
ll
<
32
)
;
TA_ASS\
ER\
T
(
llOOO\
l\
OlOO
->
lOll\
Oll\
lO\
l
<
32
)
;
int
lOl\
l\
lOOllO\
O
=
0
;
in\
t
lOll\
lOOl\
l\
l\
O
=
0
;
int\

lOOOllO\
OOl
;
{
co\
nst
Vec3
&
lOlllOOlll\
l\

=
lOO\
lO\
lO\
ll\
l
;
fl\
oa\
t\

lO\
ll\
lO\
lllO
=
lOl\
ll\
OlOOO\
l\

(
lO\
lllO\
O\
ll\
ll
)
;
if\

(
lOlllOl\
llO
<=
ll\
lOlll\
l\
O\
lO
.
lOlO\
lOOlOlO
&&
lOlll\
OlllO
>=
-
lllOll\
l\
lO\
l\
O
.
lOl\
OlOOlOlO
)
{
flo\
at
lOl\
ll\
OlOOll
=
lllOllllO\
lO\

.
lOlOlOOlOlO
*
lllO\
ll\
ll\
OlO\

.
lOlOlO\
O\
lOlO
-
lOl\
ll\
Olll\
O
*
lOlllO\
l\
l\
lO\

;
lO\
l\
llOOllOl
=
tru\
e
;
fo\
r
(
lOOOllOOO\
l
=
0
;
lO\
OO\
llOOOl
<
llO\
OOlOlOO
->
lO\
llOlllOl
;
lOO\
OllOOO\
l
++
)
{
const\

Vec\
3
&
lOll\
lOlOlOO
=
lOlllOlOlOl\

(
lOOOl\
lOOO\
l
)
;
flo\
at
lOll\
l\
OlOl\
lO
=
llOOOl\
O\
lOO
->
llOl\
l\
llOl\
O
[
lO\
OOllO\
OOl
]
.
lOlllOl\
Oll\
l
.
Do\
t
(
lO\
lllOl\
O\
lOO
-
lOl\
llOOllll
)
;
if
(
lOlllOlOll\
O
*
Fa\
bs
(
lO\
lllO\
lOl\
lO
)
>
lO\
lllO\
l\
O\
Oll
)
{
lOll\
lOOllOl
=
false
;
br\
ea\
k
;
}
if
(
lO\
lll\
Ol\
OllO
<
0.0f
)
{
#ifndef lOOOOllllOOO
if
(
lO\
lll\
O\
lOllO
*
Fabs\

(
lOlll\
Ol\
OllO
)
<
lOlllOlOOll
+
0.001f
)
{
int
lOll\
l\
Ol\
lOO\
O
=
lOl\
l\
l\
Ol\
l\
OOl
(
lOO\
OllOO\
O\
l\

,
llOOOl\
Ol\
OO
->
lOllOlllO\
l
)
;
co\
n\
s\
t\

Vec\
3
&
lOlllOll\
Ol\
O
=
lOl\
ll\
OlO\
lOl\

(
lOl\
llOllOOO
)
;
if
(
(
lOlllOlO\
lOO
-
lO\
lll\
O\
llOlO
)
.
Dot
(
lOl\
llOllOlO
-
lOl\
l\
lOO\
l\
lll
)
<=
0.0f
)
{
if
(
(
lOll\
lO\
l\
O\
lOO
-
lOlllOll\
O\
lO
)
.
Dot
(
lOll\
l\
OlOlOO\

-
lOll\
lO\
Ollll\

)
>=
0.0f
)
{
lOll\
lOl\
l\
O\
ll\

(
lOlllO\
lO\
lOO
,
lO\
lll\
O\
llOlO
,
1
)
;
lOlllOOlll\
O\

|=
1
<<
lOO\
O\
llO\
OOl
;
}
}
}
#endif //
}
else\

{
lOlllO\
Oll\
Ol
=
false
;
int\

lO\
ll\
lOllOOO
=
lOl\
llOllOO\
l
(
lOOOllO\
O\
Ol
,
ll\
OOOl\
O\
l\
OO
->
lOllO\
lllOl
)
;
co\
n\
s\
t
Vec\
3
&
lOlllOllO\
lO\

=
lOl\
l\
lOlOlO\
l\

(
lOll\
lOll\
OO\
O
)
;
if
(
(
lOlllOlOlOO
-
lOll\
lO\
l\
lOlO
)
.
Dot
(
lOlllOllO\
lO
-
lO\
lllOO\
ll\
ll
)
<=
0.0f
)
{
if
(
(
lO\
l\
llO\
l\
OlOO\

-
lOlll\
Ol\
lOlO
)
.
Do\
t
(
lOll\
lO\
l\
Ol\
O\
O
-
lOlllOO\
lll\
l
)
>=
0.0f
)
{
Vec\
3
lO\
ll\
l\
OlllOO
=
lO\
l\
llO\
Olll\
l
-
llOOO\
lO\
lOO\

->
lO\
O\
OlOOO\
OO
*
lO\
ll\
lOlll\
O
+
ll\
OOOlO\
l\
O\
O
->
llO\
llllOlO
[
lOOOll\
OOOl
]
.
lOll\
lOlO\
lll
*
lOl\
llOl\
OllO\

;
Vec3
lOO\
OlO\
OOOO
=
lOlll\
OOl\
lll
-
lOlll\
OlllOO
;
float
lOllllOl\
O\
l
=
lOOOlO\
OOOO\

.
Ge\
t\
Ma\
gn\
itud\
e
(
)
;
if\

(
lOl\
ll\
l\
OlO\
l\

>
0.0001f
)
lO\
OOl\
OOO\
O\
O
/=
lOll\
l\
l\
OlO\
l
;
else
lOOO\
l\
OO\
O\
OO
=
llOOOlOlOO
->
lOOOl\
O\
OO\
O\
O\

;
lO\
lllO\
ll\
lO\
l
(
0.0f
,
lllOllllO\
lO
.
lOlOlOOl\
OlO\

-
lO\
llllOl\
O\
l
,
llO\
OOlOlOO
,
lOll\
lOlOlO\
O\

,
lOlll\
OllOlO\

,
lOlll\
Ol\
l\
l\
OO
,
lOOOl\
OOOOO
,
1
)
;
lOlll\
OOll\
lO
|=
1
<<
lOOOllOO\
Ol
;
}
}
}
}
if
(
lOO\
Oll\
O\
OOl
==
llO\
OO\
lOl\
OO\

->
lOllOlllOl\

)
{
for
(
lOO\
Oll\
O\
OOl
=
0
;
lO\
OOl\
lOOO\
l\

<
llOO\
OlOl\
OO\

->
lOllOlll\
Ol
;
lO\
OOllOOO\
l
++
)
{
const
Vec3
&
ll\
OOlll\
ll\
O
=
lO\
lllO\
l\
Ol\
Ol\

(
lOOO\
l\
lOO\
Ol
)
;
if
(
(
lOl\
llO\
Olll\
l\

-
llOO\
ll\
lllO
)
.
Get\
M\
agnit\
udeSqrd
(
)
>
lllOll\
llOlO
.
lOlOlO\
O\
lO\
lO
*
lllO\
ll\
l\
lO\
lO\

.
lO\
l\
OlO\
OlOl\
O
)
con\
ti\
nu\
e
;
con\
st\

int
lO\
lll\
OllllO\

=
lO\
l\
l\
lOll\
ll\
l
(
lOO\
O\
llOO\
Ol
,
llOOOlOl\
O\
O
->
lOll\
Oll\
l\
Ol
)
;
if\

(
lO\
lllO\
O\
llOl\

||
(
lOll\
lOOll\
l\
O
&
(
(
1
<<
lOlllOllllO
)
|
(
1
<<
lOOOllOO\
Ol
)
)
)
)
{
lOllllO\
OOO\
O
(
llO\
OlllllO
)
;
}
else\

{
Vec\
3
lOOOlOOOO\
O\

=
lO\
lll\
OOllll\

-
llO\
OlllllO
;
float
lOllll\
OlOl\

=
lOOOlO\
OOOO
.
Ge\
tMa\
gni\
tud\
e
(
)
;
if
(
lO\
lll\
lOlOl
>
0.0001f
)
lO\
OO\
l\
OOOO\
O
/=
lOllllOl\
O\
l
;
else
lOOOlO\
O\
OOO
=
llO\
OO\
lO\
l\
OO\

->
lOOOlOOOO\
O
;
lOlll\
lOOOOl
(
0.0f
,
lllOllllOlO\

.
lOlOl\
OOlOlO
-
lOllllO\
lOl\

,
llO\
O\
Ol\
OlOO
,
lOOOl\
lOOO\
l
,
fal\
se
,
llOOlllllO
,
llO\
O\
llll\
lO
,
lOOOl\
O\
O\
O\
OO
)
;
}
lOll\
lO\
OllOO
|=
1
<<
lOOO\
llOOOl
;
}
}
if
(
lOll\
lOOllOl
)
{
lO\
l\
lllO\
OOlO
(
0.0f
,
lllOll\
l\
lOl\
O\

.
lO\
lOlO\
Ol\
OlO\

-
lOlllOlllO
,
llOOO\
lOl\
OO\

,
lOl\
llO\
Ollll\

-
llO\
O\
OlOlOO\

->
lOO\
OlO\
OO\
OO\

*
lOlllOl\
llO
,
llOO\
OlO\
l\
OO\

->
lOOOl\
OOOO\
O\

)
;
}
}
}
if
(
lO\
ll\
lO\
O\
O\
Oll
->
lOllO\
ll\
l\
Oll
)
{
float
lOlOllOlO\
O\

=
lO\
l\
ll\
Ol\
OOOl
(
lOOlOlOll\
l\

)
-
ll\
l\
O\
llllOlO
.
lO\
lO\
l\
OOlOl\
O\

;
float
lO\
l\
Ol\
l\
OlOl
=
lOlllOlOOOl
(
lOOlOl\
lOOl\

)
-
ll\
lOllllOl\
O
.
lOlOlOOlOlO
;
#ifdef lOOOOllllOOO
if
(
lOl\
OllOl\
O\
l
!=
lOlOllO\
lOO
)
#else
if
(
lOlOllO\
lOl
<
0
&&
lOlO\
l\
lOlO\
O
>
0
)
#endif
{
float\

lOllllO\
OlOO\

=
lOlOl\
lO\
lOO\

/
(
lOlO\
l\
lOl\
OO\

-
lO\
lOll\
Ol\
O\
l\

)
;
Vec3
lO\
lllOlllOO
=
lOO\
l\
OlOlll\

+
(
lOOlO\
llOO\
l
-
lOOlOlO\
ll\
l\

)
*
lOllll\
OOlOO
;
bool
lOllllO\
OlOl
=
!
lOlll\
OOllOl
&&
lOl\
ll\
O\
Oll\
lO
==
0
&&
lOlllOOll\
OO\

==
0
;
for
(
lOOOl\
lOOO\
l\

=
0
;
lOOOllOOOl
<
llOOOlOl\
OO
->
lOllOlll\
Ol
;
lOOOll\
O\
O\
O\
l
++
)
{
cons\
t
Vec3\

&
lOll\
llO\
OllO
=
lOl\
llOl\
O\
l\
Ol
(
lOO\
O\
ll\
OOOl\

)
;
in\
t
lO\
l\
llOl\
lOOO\

=
lOl\
l\
l\
OllOOl
(
lOO\
O\
ll\
OOOl\

,
llOOOlOlOO
->
lOl\
lOll\
lOl
)
;
co\
ns\
t
Vec3
&
lOlllOl\
lO\
lO
=
lOlllO\
lO\
lOl\

(
lOl\
llO\
llOO\
O
)
;
flo\
a\
t
lOlllO\
lOllO
=
llOOOlOlOO
->
ll\
OllllOl\
O
[
lOOOl\
lOOO\
l
]
.
lO\
ll\
lOlOlll
.
Dot
(
lOl\
lll\
OOll\
O
-
lO\
l\
llO\
lllOO
)
;
float
lll\
l\
OlO\
O\
ll
;
Ve\
c3
lO\
ll\
l\
l\
OOll
;
Vec3\

lO\
llllOlOO
;
float
ll\
l\
l\
lOO\
OOl
=
lllOll\
llO\
l\
O
.
lOlOlOOlO\
lO\

;
if\

(
lOlllOlO\
ll\
O
<
0.0f
)
lll\
ll\
O\
O\
OO\
l
+=
0.001f
;
if
(
!
(
lOl\
llOOlllO
&
1
<<
lOO\
Oll\
OO\
Ol
)
&&
Geo\
metry\

::
Te\
st\
Sp\
hereM\
o\
v\
eme\
ntA\
gain\
stLin\
e\

(
lOO\
lOlOll\
l
,
lOOl\
Oll\
O\
Ol
,
lOl\
lllO\
OllO
,
lOlllOll\
O\
l\
O
,
lll\
llOOO\
O\
l
,
ll\
llOl\
OO\
ll
,
lOllllOOl\
l
,
lO\
ll\
l\
l\
O\
lOO
)
)
{
lOlllOOlll\
O\

|=
1
<<
lOOOllO\
O\
O\
l
;
if
(
lOl\
ll\
OlOllO
<
0.0f
)
{
lOlllOllOll
(
lO\
llllO\
OllO\

,
lO\
ll\
lOll\
OlO\

,
1
)
;
}
else
{
lOlllOlll\
Ol\

(
llllOlOOll
,
0.0f
,
ll\
OOOl\
Ol\
OO
,
lO\
llll\
OOllO
,
lOlll\
Ol\
lOl\
O
,
lO\
OlOlOl\
ll\

-
lOllll\
Ol\
OO\

*
lll\
O\
l\
lll\
OlO
.
lOlOlOO\
l\
OlO
,
lOllll\
OlOO
,
1
)
;
lOll\
llO\
OlOl
=
fal\
se\

;
}
}
else
{
if
(
lOlllOl\
OllO\

>
0.0f
)
{
lOll\
llOOlO\
l
=
fa\
lse
;
}
}
}
#ifdef lOOOOllllOOO
if
(
lOlOl\
lOlOl
<
0
&&
lOl\
Oll\
O\
lO\
O
>
0
)
#endif
if\

(
lOllll\
O\
OlOl
)
{
if\

(
lOOO\
l\
lO\
O\
Ol
==
llO\
OO\
l\
OlOO
->
lOllOll\
lOl
)
{
TA\
_ASSERT
(
lOll\
l\
lOO\
lOO\

>=
0.0f
)
;
TA_AS\
S\
E\
R\
T\

(
lOllllO\
OlOO
<=
1.0f
)
;
lOllll\
OOO\
l\
O
(
lOlll\
lOO\
lOO
,
0.0f
,
ll\
OO\
OlO\
lO\
O
,
lOOlO\
l\
Oll\
l
-
ll\
O\
O\
OlOlOO\

->
lOOO\
lOO\
O\
O\
O
*
lllOllllOlO\

.
lO\
l\
O\
lOOlO\
lO
,
llOO\
OlOlOO
->
lO\
OOlOO\
OOO
)
;
lO\
lllOOllO\
l
=
true
;
}
}
for
(
lOO\
O\
llO\
OO\
l
=
0
;
lOOO\
llOOOl\

<
llOOOl\
OlOO
->
lOllO\
lll\
Ol\

;
lO\
O\
OllOOOl
++
)
{
con\
s\
t
Vec3
&
lOlllOlOlOO\

=
lOl\
llOlO\
lO\
l
(
lOOO\
llOOOl\

)
;
floa\
t\

ll\
llOl\
OOll
;
Vec3
lOllllOOll
;
Vec3\

lOllll\
OlOO
;
if
(
!
(
lOl\
l\
l\
OOllOO\

&
1
<<
lOOOl\
lOOOl
)
&&
Geometry\

::
TestPoin\
tMoveme\
nt\
A\
g\
ain\
st\
S\
ph\
ere\

(
lOOl\
O\
lO\
lll
,
lOOlOl\
l\
OOl
,
lOlll\
OlOl\
O\
O
,
lllO\
l\
lllO\
lO\

.
lO\
lO\
lOOlOl\
O
,
llllO\
lOOll
,
lOl\
ll\
lOOll\

,
lO\
l\
lllOlOO
)
)
{
co\
ns\
t
in\
t\

lO\
lllOllllO
=
lOlllOll\
l\
ll
(
lOOO\
llOOOl
,
llOOOl\
OlOO\

->
lOl\
lO\
lllO\
l
)
;
if
(
lOlllOOllOl
||
(
lOlllOOll\
lO
&
(
(
1
<<
lOlllOllllO
)
|
(
1
<<
lOOOl\
lOOOl
)
)
)
)
{
lOlll\
lOOOOO
(
lOll\
lOlOlO\
O
)
;
}
els\
e\

{
lO\
l\
lllOO\
OOl
(
llllO\
l\
OOll
,
0.0f
,
llOO\
O\
lOlOO\

,
lOOOllO\
OOl\

,
fal\
se
,
lOlllOlOl\
OO\

,
lOOlOlOl\
l\
l\

-
lO\
llll\
Ol\
OO
*
lllO\
llllOl\
O
.
lO\
lOlOOl\
OlO
,
lOllll\
OlO\
O\

)
;
}
}
}
}
}
}
