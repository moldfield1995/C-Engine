//---------------------------------------------------------------------------------
// File Name: zpta014.h
//
// Copyright (C) 2004 - 2006 True Axis Pty Ltd, Australia.
// All Rights Reserved.
//
//---------------------------------------------------------------------------------

#ifndef lOllOOOllllO
#define lOllOOOllllO
#ifndef TA_DEBUG_H
#include "../Common/Debug.h"
#endif //
#ifndef TA_TYPES_H
#include "../Common/Types.h"
#endif //
#ifndef TA_MATRIX_H
#include "../Common/Matrix.h"
#endif //
na\
me\
s\
pa\
ce
TA
{
nam\
espa\
ce
llOlOlOO\
ll\
OO
{
class
llOlOlOlO\
l\
OO
;
clas\
s
llOlOllOOO\
O\
l
;
}
clas\
s
lOllOl\
OlOOll\

{
public\

:
enu\
m
lllOOOlOOl\
lO
{
llOOOOOl\
l\
l\
Ol
=
0x1
,
lllOOO\
OOlOOl
=
0x2
,
llO\
O\
O\
O\
Olll\
lO\

=
0x4
,
llO\
llOOlOllO\

=
0x8
,
llO\
llOO\
lO\
lll
=
0x10
,
}
;
lO\
llOl\
OlOO\
l\
l\

(
)
;
~
lOllOlOlOO\
ll
(
)
;
vo\
id\

Init\
ial\
is\
e
(
in\
t
lll\
O\
OOlO\
Olll\

,
int\

llOlOllOllll
)
;
void
Finali\
se\

(
)
;
vo\
i\
d
Cl\
ear
(
)
;
voi\
d\

llOO\
OOlOOllO
(
in\
t
ll\
OOOOlOOOOO\

,
int
lO\
O\
OlOOlOOl
,
float
lOOOl\
OOllO
)
;
fl\
o\
at
Get\
I\
mpulse
(
int
llOOOOlOOOO\
O
,
int\

lOOOlOOlOOl
)
;
voi\
d
ll\
OOOOOllO\
lO\

(
fl\
oat
llOll\
lllOl\
OO\

,
con\
st
Mat33
&
llOl\
lll\
lOlO\
l
)
;
float
GetM\
as\
s\

(
int
lOOOlOOl\
ll
)
const
{
re\
turn\

1.0f
/
(
llOllllOOlll
[
lO\
OOlOOl\
ll\

]
.
lOOOlllOlOlO
*
llO\
l\
lllOO\
l\
ll
[
lOOOl\
OOlll
]
.
lOOOlll\
Ol\
O\
l\
O
)
;
}
fl\
o\
at\

lll\
O\
OOlOlOO\
O
(
int
lOOO\
lOOlll
)
const
{
retur\
n
llOll\
llOO\
l\
ll
[
lO\
OO\
lOO\
ll\
l\

]
.
lOOO\
lllOlOlO
*
llO\
lll\
lOOlll
[
lO\
O\
O\
lOO\
l\
ll
]
.
lOOOlll\
OlOlO
;
}
int
llOO\
OOlOO\
OOl\

(
int\

ll\
OlOlOlOlOl\

,
int\

llOll\
OOlOOO\
O
,
in\
t
ll\
OllO\
O\
lOOOl
,
u32
lOlOllOO\
l\
l
)
;
voi\
d\

llOOOOlOOOlO
(
int
ll\
OO\
OOl\
OOOOO
,
int
lOOOlO\
Ol\
OOl\

,
co\
n\
st
Ve\
c3
&
llOO\
l\
llllO\

,
const
Vec3
&
llOl\
lO\
OOOOl\
l
)
;
vo\
id
llO\
OOOlOOOlO
(
int
llOOOOlOOOOO
,
int
lOOOl\
O\
OlOOl
,
const\

Vec3\

&
lll\
l\
OOOOll
,
const
Vec3\

&
llOll\
OOO\
Ol\
O\
O
,
const\

Vec3\

&
llllOOO\
l\
O\
O
,
const\

Vec3
&
llOl\
lOOO\
OlOl\

)
;
vo\
i\
d
ll\
OO\
OOlOOO\
l\
l\

(
)
;
bo\
ol\

llOOOOlOllOO
(
)
;
void
ll\
O\
OOOlOlllO
(
)
;
int
llOOOOOOlOll\

(
)
const\

{
re\
t\
ur\
n
llOl\
lO\
O\
OlOOO
;
}
in\
t\

llOOOO\
OOlO\
lO
(
)
const\

{
re\
turn
lOlOOO\
l\
Ol\
O\

;
}
void
lll\
OOOlOlOOl
(
)
;
static\

void
llOl\
O\
lOlllll
(
int
lOOl\
l\
lO\
llO
,
int
llOOOllO\
OOOl\

,
fl\
oat
*
lOOOlll\
lOOl
)
;
pri\
v\
ate
:
str\
uct
llOlOlllOOOl
{
float\

lO\
O\
OlllO\
l\
OlO
;
flo\
at
llOllOlOOOlO
[
1
]
;
float\

llOllOlOOOll
[
2
]
;
flo\
a\
t\

llOl\
lO\
l\
OOlOO
[
3
]
;
}
;
struct\

llOlOll\
O\
l\
OOO\

;
st\
ruct\

llOlOlll\
lOl\
O
;
stru\
c\
t\

llOllOlOO\
OOO\

;
struc\
t
ll\
Oll\
O\
OllO\
O\
l
{
stru\
ct
llO\
OOOOl\
OOO\

;
fl\
oat
*
llOllOlOOlOl
;
float
*
llO\
l\
l\
Ol\
OOl\
lO\

;
fl\
oa\
t
*
llOl\
l\
O\
l\
O\
Olll\

;
in\
t
llOllOl\
lOO\
lO
;
int
ll\
O\
Ol\
Oll\
Olll
;
int
llOll\
OlO\
lOOl
;
int
llO\
llOl\
Ol\
OOO\

;
in\
t
llOllOlOlllO
;
int
ll\
OllOlOl\
OlO
;
llOOOOOl\
O\
OO
*
ll\
OllOlOl\
Oll
;
int\

llOl\
lOlllO\
Ol
;
ll\
OOO\
OOlO\
OO
*
*
llO\
l\
lOlOllOO
;
ll\
OO\
O\
OO\
lOOO
*
*
llOllOlOllOl
;
llOlOlOOllOO\

::
llOlO\
llOO\
OOl
*
llOl\
lOlOll\
ll
;
llOlOlO\
O\
l\
lO\
O
::
llOlOlOlOlOO
*
llOllOllOOOO
;
int
llOllO\
OO\
OllO
;
int\

ll\
Oll\
OOOOlll
;
ll\
O\
llO\
lO\
OOO\
O
*
ll\
OllOl\
l\
OOOl\

;
llO\
llOO\
llOO\
l
(
)
;
~
ll\
OllOOllOOl\

(
)
{
Fi\
nalise
(
)
;
}
void
Initi\
ali\
se
(
int
llOO\
Oll\
OO\
OOl
,
int
llOl\
OllOllll
)
;
void
Finalise
(
)
;
void
Clear\

(
)
;
void
llOll\
OllOlOO
(
ll\
OlOllll\
Ol\
O
*
ll\
O\
llO\
llOlOl
)
;
voi\
d
llOllO\
lllOO\
O
(
)
;
vo\
id
llOllOlll\
lOO
(
cons\
t
fl\
oat\

*
llO\
lllOlOO\
l\
O
,
float
*
llOlllOlOOll
)
;
void\

llOllO\
l\
llOlO
(
llO\
OOOOlOOO
*
ll\
OOOOOlO\
Ol\

)
;
voi\
d
ll\
OllO\
l\
llO\
l\
l
(
)
;
vo\
i\
d
llOl\
lOlll\
lOO\

(
)
;
void
ll\
O\
lllOOOOOO
(
llOlOl\
OOllOO
::
llO\
lO\
l\
OlOlOO
&
llOlOllllOll\

,
int
lOO\
OlOOl\
OOl
,
in\
t\

lOOOlOOlOlO
)
;
void
ll\
OlllOOO\
OOl\

(
llO\
lOlO\
OllOO\

::
llOlOlOlOlOO
&
llOlO\
llllOll\

,
in\
t
lOOO\
l\
OOlOOl
,
int
lOOOlO\
O\
lOlO
)
;
void\

ll\
Oll\
lOO\
OOlO\

(
llO\
lOlO\
Ol\
l\
OO
::
llO\
lOlOlOl\
O\
O
&
lO\
lO\
OllOOlO
,
const\

llOlO\
lOOllO\
O
::
llOlOl\
OlOlOO\

&
ll\
OlllOOlOOl\

,
const\

llOlOl\
OO\
l\
l\
OO
::
llOlOlOlO\
lOO
&
lO\
O\
lOO\
lO\
l\
O\

)
;
void\

llOll\
l\
OOOl\
lO\

(
llOlOlOOllOO\

::
ll\
OlOlOlOl\
OO
&
lOl\
OOllO\
O\
lO
,
con\
st\

llOlOlOOll\
O\
O
::
llO\
l\
O\
lOlOlO\
O
&
lllOOll\
lOO
,
const
llO\
l\
Ol\
OOll\
O\
O\

::
ll\
OlOlOlOlOO\

&
lll\
Ol\
OO\
OOO
)
;
void
llOlllOOOOl\
l\

(
ll\
O\
lOlOOllO\
O
::
ll\
OlOlO\
l\
Ol\
OO
&
lll\
OOlllOO\

,
co\
ns\
t
ll\
OlOlOOllO\
O
::
llOlOlOl\
Ol\
O\
O
&
ll\
lOl\
O\
OOOO
)
;
void
llOlllOO\
OllO
(
llOl\
O\
lOOllOO
::
ll\
OlOllOOOO\
l
&
lO\
l\
O\
Oll\
OOl\
O
,
const
ll\
O\
lOlOOllO\
O
::
ll\
Ol\
Ol\
Ol\
OlOO
&
llOl\
llOlOOOO
,
const
ll\
Ol\
OlOOllOO
::
llOl\
O\
ll\
OOO\
Ol
&
llOll\
lOlOOOl\

)
;
vo\
id
llOlll\
OOO\
lOO
(
llOl\
OlOOl\
lOO
::
ll\
OlOll\
OOO\
Ol\

&
lOlOOll\
O\
OlO\

,
const\

llO\
lOlOO\
llOO
::
ll\
Ol\
OlOlO\
lOO
&
ll\
Oll\
lOlO\
OOO
,
const
llO\
lOlOOl\
l\
O\
O
::
llOlOllOO\
OOl
&
llOl\
l\
lOlOOO\
l
)
;
vo\
id
ll\
O\
lll\
OO\
Olll
(
llOlOlO\
OllOO
::
llOlOllOO\
OO\
l
&
lO\
lOOll\
O\
O\
lO\

,
cons\
t
llOlOl\
OOllOO
::
llOl\
OlOlOlOO
&
llOlll\
Ol\
OOOO\

,
cons\
t
llO\
lOlOOllOO
::
llOlO\
ll\
O\
OOO\
l\

&
llOlllOlOO\
Ol
)
;
void\

ll\
OlllO\
lOlOl
(
floa\
t
*
llOlllO\
lOl\
l\
O\

,
fl\
o\
at
*
llOlllOlOll\
l
,
llO\
l\
Ol\
lOl\
OOO
*
llO\
ll\
l\
Ol\
lOOO\

,
int\

lOOO\
lO\
OlOlO
)
;
fl\
oat
ll\
Ol\
l\
l\
O\
l\
lOOl
(
ll\
OlOllOlOOO
*
llOll\
lO\
llOOO
,
int
lOOOlO\
OlOOl
)
;
voi\
d
llOll\
lOllOlO
(
llOl\
Ol\
lO\
lOO\
O
*
ll\
Oll\
lOllOOO
,
float
*
llOlllOllO\
l\
l\

)
;
void
llO\
lOlllOOO\
O
(
llOlOlllOOO\
l
*
llOl\
Olll\
OOlO
,
int
llOlOlllOO\
ll
)
;
}
;
int
lOlOO\
Ol\
OO\
l
;
in\
t
lOlOOOlOlO
;
int
ll\
OOlOl\
l\
Olll
;
in\
t
llOllO\
OOlOO\
O
;
float
*
llO\
lllOllllO
;
float
*
ll\
OlllOllll\
l
;
floa\
t
*
llOllOlOOlOl
;
float
*
llOll\
Ol\
OOl\
ll
;
flo\
at
*
llOl\
lll\
OOOO\
O
;
in\
t
*
ll\
OllllOO\
O\
O\
l
;
int
*
llOlll\
lOO\
O\
lO\

;
float
*
llOl\
ll\
lOOOll
;
float
*
ll\
Ol\
lllOOlOO\

;
int\

*
llOl\
lll\
OOl\
Ol\

;
int
*
llOl\
l\
llO\
O\
ll\
O\

;
voi\
d\

*
lO\
lOOlOllO
;
llOl\
Oll\
lOO\
O\
l\

*
llO\
llllO\
O\
ll\
l\

;
ll\
O\
lOllO\
lOOO
*
llOllllOlOOO\

;
llOllOOllO\
Ol
*
llOllllOlOl\
O
;
ll\
OlOllllOlO
*
llOll\
ll\
O\
l\
OOl
;
in\
t
llOl\
lll\
Ol\
lOl
;
int\

*
ll\
Ollll\
OlllO
;
int\

llOll\
l\
lOl\
Ol\
l\

;
int\

*
ll\
Ol\
l\
l\
l\
Ol\
lOO
;
float
*
llOlll\
lO\
l\
lll
;
float
*
llOll\
ll\
l\
O\
OOO
;
int
llOlll\
llOOO\
l
;
in\
line\

float
&
lllOOOO\
Ollll\

(
int
lOOOl\
OOlOOl\

,
int\

lOOOlOOlOlO\

)
{
return\

llOlll\
lOOO\
ll
[
lO\
OOlOO\
lOOl
*
lOl\
OOOl\
OO\
l
+
lOOO\
lOOl\
OlO\

]
;
}
void
ll\
Oll\
lll\
l\
Oll
(
)
;
boo\
l\

llO\
llll\
l\
llll\

(
in\
t
ll\
Ollll\
l\
l\
llO\

)
;
void
lllOOOO\
OlOO\
O
(
in\
t
llOllll\
llllO
)
;
void
lllOOOOlOOOO
(
int
lllOOOOlO\
O\
Ol
,
int
lll\
O\
OOOlOO\
lO
,
cons\
t
fl\
oa\
t
*
lO\
OOlll\
lOOl\

,
const
fl\
oat\

*
llOlO\
lllOlOl
,
fl\
oat
*
ll\
lOOOOlOOll
)
;
void
lllOO\
O\
O\
Ol\
O\
ll
(
int
ll\
Olllll\
lllO
,
flo\
a\
t
&
lOOOOl\
l\
OO\
Ol\

,
int
&
llOl\
lOllO\
Ol\
l
)
;
st\
at\
ic
void
ll\
lO\
OOOlOll\
l\

(
int
lOOl\
llOllO\

,
flo\
at\

*
lO\
OOl\
ll\
l\
OOl
,
fl\
oa\
t\

*
llOl\
llOl\
OOlO
,
float
*
llOlllOlOOl\
l
)
;
void
lllO\
OOOllO\
OO
(
int\

lOOlllOllO\

,
float\

*
lO\
OO\
lll\
lOOl
,
float\

*
ll\
Ol\
llOl\
OOlO
,
flo\
a\
t\

*
llOlllOlO\
O\
ll\

)
;
sta\
t\
i\
c
voi\
d
llOlOl\
O\
ll\
lll
(
int
lOOlll\
OllO
,
int\

llOOOllO\
OOOl
,
floa\
t
*
lOOO\
lll\
lOOl\

,
float
*
llOll\
l\
Ol\
OO\
lO\

,
float
*
llOl\
l\
lOlOOll
)
;
static
void
ll\
lOOOO\
OO\
O\
OO\

(
int\

lOOll\
lOllO
,
int
llOO\
O\
llOOO\
Ol\

,
fl\
oat
*
lO\
OOllllOOl
,
float
*
llO\
l\
ll\
Ol\
O\
OlO
,
fl\
oat\

*
llOlllO\
l\
O\
Ol\
l
)
;
sta\
t\
ic\

void\

ll\
lOOOO\
llOO\
l
(
int\

lO\
OlllOllO
,
int\

ll\
OOOl\
lOOOO\
l\

,
fl\
oa\
t
*
lllOOOOllOlO
,
floa\
t
*
lllOOO\
OllO\
ll
)
;
void
lllOO\
OO\
Ol\
lOO\

(
int
lOO\
lllOllO
,
int
ll\
OOOll\
O\
OOOl
,
fl\
o\
at
*
lO\
OOllllOO\
l
,
int
ll\
lOOOOl\
ll\
OO
)
;
bo\
ol\

lllOO\
O\
OOl\
lOl\

(
int
lO\
Ol\
l\
lOl\
lO
,
int
llOOOll\
OOO\
Ol
,
flo\
a\
t
*
ll\
lO\
OOlOOO\
Ol
,
const
float
*
ll\
lOOOlO\
OO\
lO
,
in\
t
ll\
l\
OOOl\
OO\
Oll
)
;
#ifdef _DEBUG
voi\
d
lOl\
lO\
lOlOOll
::
llOllll\
lOO\
l\
l\

(
)
;
#endif
}
;
}
;
#endif //
